{"data":{"markdownRemark":{"internal":{"content":"\n<!-- class: middle -->\n<!-- layout: true -->\n\n---\n\n<img src=\"/images/assets/docker-74de8.png\" width=\"400px\"></img>\n\n# Introduccion a docker\n\n## Por nicosommi\n\n---\n\nname: agenda\n\n## Agenda\n\n1. Agenda y alcance\n2. Fundamentos\n3. Casos de uso\n4. Por dentro\n5. Componentes\n6. Ejemplo sencillo\n7. Q & A\n8. Mas componentes\n9. Comandos sobre contenedores e imágenes\n10. Ejemplo lateral\n11. Técnica para construir un Dockerfile\n12. Buenas prácticas\n13. Docker para SPA, web apps, etc\n14. Anexo: Services\n15. Q & A\n\n---\n\nclass: center\n\n## Que es?\n\n<center>\n  <img src=\"/images/assets/docker-89c82.png\" width=\"400px\"></img>\n</center>\n\n???\nDisculpen el teclado en ingles\n\n---\n\n- Técnicamente es una capa de abstracción para la utilización de cgroups, namespaces y UnionFS de linux.\n- Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.\n- UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente\n- Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios\n- Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)\n  <center>\n    <img src=\"/images/assets/docker-28b55.png\" width=\"300px\"></img>\n  </center>\n\n---\n\nclass: right\n<img style=\"position: absolute\" src=\"/images/assets/docker-04a7d.png\" width=\"200px\"></img>\n\n## Es una maquina virtual? No.\n\n## Como se diferencia de una?\n\n---\n\nSe diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.\n\n<center>\n  <img src=\"/images/assets/history.png\" width=\"600px\"></img>\n</center>\n???\nComentar:\n* historia\n* primero escalabilidad horizontal\n* despues optimizar recursos\n* adicionales: docker swarm independiente\nNos permite cambiar la unidad de medida de nuestra aplicación de máquinas virtuales o físicas a simples containers.\n\n---\n\n## En donde corre?\n\nEn sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).\nTambien, recientemente incorporaron contenedores basados en windows server.\n\n<center>\n  <img src=\"/images/assets/platforms.png\" width=\"400px\"></img>\n</center>\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/docker-6a999.png\" width=\"100px\"></img>\n</div>\n## &nbsp;Para que sirve?\nPara isolar el entorno de ejecución de una aplicación.\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/pencil.png\" width=\"80px\"></img>\n</div>\n## &nbsp;Datos\n* Es open source desde el 2013.\n* Esta escrito en go.\n* Lo comenzó Solomon Hykes en dotCloud.\n\n???\nGo esta pensado para concurrencia y productividad y tiene garbage collection\n\n---\n\n## Casos de uso\n\n<img src=\"/images/assets/usecases.png\" width=\"90%\"></img>\n???\nInvitar a sugerir ideas u opinar sobre las mencionadas\nTexto:\n\n- CI/CD\n- Entornos de desarrollo\n- Compilar para distintos targets\n- PaaS\n- Escalabilidad horizontal\n- High availability cluster\n- Aislar ejecucion de codigo de manera segura (webpackbin, etc)\n- Aprendizaje/investigacion\n- Etc...\n\n---\n\n## Por dentro\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/docker-c4f70.png\" width=\"140px\"></img>\n</div>\n## &nbsp;Docker Image\n* Es un template con instrucciones para la construccion de contenedores\n* Tiene una o varias capas de solo lectura a partir del cual se crean contenedores\n* Se pueden extender o empezar de cero\n* Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile\n* El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.\n* Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen\n\n---\n\n## Docker Container\n\n- Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.\n- Contiene una fina capa adicional a las de su imagen con permisos de escritura.\n- Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.\n- Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.\n  <center>\n    <img src=\"/images/assets/docker-bb91f.png\" width=\"300px\"></img>\n  </center>\n\n???\nPreguntar diferencia entre contenedor e imagen y clarificar dudas\n\n---\n\n## Acerca del Contenedor\n\nPreviamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).\n\n<center>\n  <img src=\"/images/assets/docker-71f58.png\" width=\"240px\"></img>\n</center>\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/docker-1c5ae.png\" width=\"70px\"></img>\n</div>\n## &nbsp;Storage\n* Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente\n* Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor\n* Docker utiliza 'copy on write', es decir que copia una capa sólo cuando la va a cambiar, lo que permite optimizar el tamaño en disco ocupado por la imagen y el tiempo de arranque de los contenedores.\n* Toda la data de imagenes y contenedores se guarda en una carpeta.\n* Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir según caso de uso, experiencia del equipo y linux distro.\n\n---\n\n## Componentes\n\n---\n\n## Docker Engine\n\nAplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.\n![Docker engine](/images/assets/docker-9cf40.png)\n\n---\n\n## Machine\n\n- Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.\n- Nos deja instalar docker en terminales remotas y provisionar swarms.\n  <img src=\"/images/assets/docker-7ada0.png\" width=\"95%\"></img>\n  ???\n  Permite especificar drivers para distintos providers\n\n---\n\n## Compose\n\nEs una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.\n\n- Detecta cambios y recrea solo lo necesario\n- Soporta variables en el compose file\n- Guarda la data persistida en los volumes\n- Es muy util para entornos de desarrollo, para deployment en un solo host\n  <center>\n    <img src=\"/images/assets/docker-32d4f.png\" width=\"200px\"></img>\n  </center>\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/ubuntu.png\" width=\"50px\"></img>\n</div>\n## &nbsp;Ejemplo sencillo\n```bash\n$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash\nroot@3883936319fb:/# lsb_release -a\n(...) Description:\tUbuntu 14.04.5 LTS (...)\n```\n1. Trae la ultima imagen, o si ya existe la utiliza.\n2. Crea, en base a la imagen, un contenedor.\n3. Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.\n4. Asigna una interfaz de red con la cual habla con el host\n5. Setea una IP de una pool\n6. Ejecuta el proceso solicitado (/bin/bash)\n7. Captura y devuelve el output del contenedor por haber indicado -it\n\n???\ni es para el interactive mode, que deja el stdin esperando\nt asigna un pseudo tty / pty\n\n- pull\n- hablar de pull y de los otros parametros como name, port, volume\n\n---\n\n## Wordpress\n\n<pre>\n  <code class=\"bash hljs remark-code remark-code-line\" style=\"font-size: 13px;\">\n  version: '2'\n\n  services:\n     db:\n       image: mysql:5.7\n       volumes:\n         - \"./.data/db:/var/lib/mysql\"\n       restart: always\n       environment: (...)\n\n     wordpress:\n       depends_on:\n         - db\n       image: wordpress:latest\n       links:\n         - db\n       ports:\n         - \"8000:80\"\n       restart: always\n       environment: (...)\n  </code>\n</pre>\n\n???\nEnvironment está cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la página oficial\n\n---\n\n# Q & A Parcial\n\n---\n\n## Docker Registry\n\n- Es una libreria de imagenes.\n- Puede ser publico o privado.\n- Una vez construida la imagen, hacemos un push al registry\n- Docker hub es un registry publico oficial\n- Hay una imagen publica registry y una para el trusted registry\n  <center>\n    <img src=\"/images/assets/docker-89504.png\" width=\"240px\"></img>\n  </center>\n  ???\n  Trusted registry es con soporte comercial\n\n---\n\n## Data volumes\n\n- Encontrar\n\n```bash\n$ docker inspect myContainer\n```\n\n- Se pueden crear volúmenes o montar desde el host\n\n```bash\n$ docker run -d -P --name web -v /webapp myImage npm start\n$ docker run -d -P --name web -v /src:/webapp myImage npm start\n```\n\n???\n\n- bypass a unionfs\n- si no esta bindeado a host, copia el contenido adentro\n- permite compartir entre containers con compose o con named volumes (flocker por ejemplo)\n- esta diseñado para cambiar el container y que la data persista, incluso aunque ningun container la referencie\n- soporta SCSI, NFS, etc.\n\n---\n\n## Data volume containers\n\n- _[Es una práctica](/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/)_ que consiste en crear un contenedor que sólo contiene data que luego será utilizada por otros contenedores\n\n```bash\n$ docker create -v /dbdata --name mydb postgres /bin/true\n$ docker run -d --volumes-from mydb --name db1 postgres\n```\n\n---\n\n## Network\n\n- Puede ser bridge, none y host\n\n```bash\n$ docker network ls\n```\n\n- Pueden verse los detalles\n\n```bash\n$ docker network inspect bridge\n```\n\n- Se pueden crear nuestras redes en las cuales correr containers\n  ???\n- un container puede pertenecer a varias redes\n- se ven entre los de la misma red\n- puede ser overlay (swarm mode) o custom driver\n- embedded dns en custom networks\n- antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts\n\n---\n\n## Docker Aplicado\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/docker-28b55.png\" width=\"70px\"></img>\n</div>\n## &nbsp;Operaciones sobre contenedores\n* Run, Start, Stop\n```bash\n# crea un contenedor en base a una imagen y corre el comando bash\n$ docker run --name miContenedor alpine echo \"Hola\"\n# arrancar un contenedor ya creado\n$ docker start miContenedor\n# parar contenedor con time to kill\n$ docker stop -t 10 miContenedor\n# also valid: docker restart -t 10 miContenedor\n```\n\n---\n\n- Borrar, Listar, Inspeccionar\n\n```bash\n$ docker rm miContenedor\n$ docker ps\n$ docker ps --all\n$ docker inspect miContenedor\n```\n\n???\n\n- hablar de señales y su relacion con stop\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/docker-c4f70.png\" width=\"70px\"></img>\n</div>\n## &nbsp;Operaciones sobre imagenes\n* Cargar, Listar, Inspeccionar\n```bash\n$ docker pull repo/image:tag\n$ docker load -i imagen.tar\n$ docker images\n$ docker inspect alpine\n```\n\n---\n\n- Borrar, Construir, Taggear, Subir\n\n```bash\n$ docker rmi repo/image:tag\n$ docker build -t image-name .\n$ docker tag image-name repo/image-name:tag\n$ docker push repo/image-name:tag\n```\n\n???\n\n- es necesario un docker login myrepo:2376\n\n---\n\n## Ejemplo existente\n\n```bash\n$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc\n```\n\n<center>\n  <img src=\"/images/assets/vncffox.png\" width=\"200px\"></img>\n</center>\n\n???\nLuego con un cliente vnc accedemos a un lxde con firefox instalado\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/docker-08dc8.png\" width=\"45px\"></img>\n</div>\n## &nbsp;Tecnica para construir un Dockerfile\n1. Se inicia un shell sobre una imagen base\n```bash\n$ docker run -it --name testC ubuntu sh\n```\n2. Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile\n\n???\n\n- tar\n- scratch image (reserved word)\n- _history_ de image\n- _commit_ del container como no recomendada mas que para pruebas y debugging\n\n---\n\n## Debug\n\na. Entramos a un contenedor corriendo\n\n```bash\n# otra alternativa, tomar una\n$ docker exec -it nignxTest /bin/bash\n```\n\nb. Miramos los logs conectados\n\n```bash\ndocker logs nginxTest\n```\n\n---\n\n## Buenas prácticas\n\n- Containers lo más prescindibles posibles\n- Usar .dockerignore\n- Evitar instalar paquetes innecesarios\n- Correr un sólo proceso por container\n- Minimizar la cantidad de capas\n- Organizar argumentos y comandos de multiples lineas con \\\n- Contemplar el build cache\n  <center>\n    <img src=\"/images/assets/docker-d0772.png\" width=\"50%\"></img>\n  </center>\n\n???\n\n- prescindible = efimero = pueden ser parados, destruidos y reemplazados\n- usar cache o no\n- el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente\n- una vez invalidado, ya no se utiliza para las subsecuentes capas\n\n---\n\n## Ejemplos docker para web\n\n---\n\n## SPA build\n\n```Dockerfile\nFROM node:6\nADD . /src\nWORKDIR /src\nRUN rm -fR ./node_modules && \\\n  npm i\nENTRYPOINT [\"npm\", \"build\"]\n```\n\n???\nHay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el ´shell´ form que hace \"/bin/sh -c\" lo que oculta señales por ejemplo docker stop)\n--entrypoint overrides\n\n- tiene que haber al menos un cmd o entrypoint\n- entrypoint para ejecutables\n- cmd es mas para preparar parametros\n\n---\n\n## SPA serve\n\n```Dockerfile\nversion: '2'\nservices:\n  spa:\n    image: nginx\n    volumes:\n      - \".:/usr/share/nginx/html:ro\"\n    ports:\n      - \"10000:80\"\n```\n\n---\n\n## API\n\n```Dockerfile\nFROM node:6\nEXPOSE 3000\nADD . /src\nWORKDIR /src\nRUN npm rebuild && \\\n  npm test\nCMD [\"npm\", \"start\"]\n```\n\n???\nHay muchas alternativas, hay una tarea de diseño implícita\n\n---\n\n<div style=\"float: left;\">\n  <img src=\"/images/assets/docker-32d4f.png\" width=\"50px\"></img>\n</div>\n##&nbsp; Compose\n```Dockerfile\n# docker-compose.yml just for api\nversion: '2'\nservices:\n  api:\n    image: mirepo.com/api-image:production\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - mongo\n    environment:\n      PORT: 3000\n  mongo:\n    image: mongo\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - ./mongodata:/data/db\n```\n\n???\nLinks puede utilizarse para definir alias pero no es necesario\n\n---\n\n## Comandos para compose\n\n- Correr, Parar, Borrar\n\n```bash\n$ docker-compose up -d\n$ docker-compose stop -t 10\n$ docker-compose rm\n$ docker-compose --help\n```\n\n---\n\n## Anexo: Docker services\n\nEs una abstracción de los contenedores.\n\n- Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien\n- Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos\n- Para el cliente, el servicio luce como un docker daemon regular\n- Los servicios son los que brindan escalabilidad y flexibilidad de updates\n  ???\n  swarm = el plural de docker nodes... manada/multitud/enjambre/nube\n- temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc\n\n---\n\n## Operaciones con services\n\n```bash\n$ docker service create \\\n  --name my-service \\\n  --replicas 3 \\\n  nginx:alpine\n\n$ docker-compose scale service-name=2\n```\n\n???\n\n- services global/replicated\n\n---\n\n# Q & A\n\n---\n\n# Gracias!\n"},"frontmatter":{"date":"October 24, 2016","url":"/2016/10/24/docker","title":"docker","author":"nico","categories":null,"tags":null,"type":"remark-slide"}}},"pageContext":{}}