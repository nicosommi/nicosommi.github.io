!function(e){function o(a){if(n[a])return n[a].exports;var t=n[a]={i:a,l:!1,exports:{}};return e[a].call(t.exports,t,t.exports,o),t.l=!0,t.exports}var n={};o.m=e,o.c=n,o.i=function(e){return e},o.d=function(e,n,a){o.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},o.p="/",o(o.s=178)}([function(e,o,n){"use strict";e.exports=n(166)},function(e,o,n){"use strict";function a(e,o,n,a,s,i,r,l){if(t(o),!e){var c;if(void 0===o)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,a,s,i,r,l],p=0;c=new Error(o.replace(/%s/g,function(){return u[p++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var t=function(e){};e.exports=a},function(e,o,n){"use strict";function a(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var t=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var o={},n=0;n<10;n++)o["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(o).map(function(e){return o[e]}).join(""))return!1;var a={};return"abcdefghijklmnopqrst".split("").forEach(function(e){a[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},a)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var n,r,l=a(e),c=1;c<arguments.length;c++){n=Object(arguments[c]);for(var u in n)s.call(n,u)&&(l[u]=n[u]);if(t){r=t(n);for(var p=0;p<r.length;p++)i.call(n,r[p])&&(l[r[p]]=n[r[p]])}}return l}},function(e,o,n){"use strict";var a=n(155),t=(n(30),n(156));n.d(o,"a",function(){return a.a}),n.d(o,"b",function(){return t.a})},function(e,o,n){"use strict";function a(e){return function(){return e}}var t=function(){};t.thatReturns=a,t.thatReturnsFalse=a(!1),t.thatReturnsTrue=a(!0),t.thatReturnsNull=a(null),t.thatReturnsThis=function(){return this},t.thatReturnsArgument=function(e){return e},e.exports=t},function(e,o,n){"use strict";function a(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=o.noWarn,a=void 0!==n&&n,t=o.createElement,s=void 0===t||t,i=function(o){function n(){var e,o,t,s;T(this,n);for(var i=arguments.length,r=Array(i),l=0;l<i;l++)r[l]=arguments[l];return o=t=E(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(r))),t.warned=a,t.state={theme:{}},t.setTheme=function(e){return t.setState({theme:e})},s=o,E(t,s)}return I(n,o),C(n,[{key:"componentWillMount",value:function(){this.context[x];var e=this.props.theme;this.context[x]?this.setTheme(e||this.context[x].getState()):this.setTheme(e||{})}},{key:"componentWillReceiveProps",value:function(e){this.props.theme!==e.theme&&this.setTheme(e.theme)}},{key:"componentDidMount",value:function(){this.context[x]&&!this.props.theme&&(this.unsubscribe=this.context[x].subscribe(this.setTheme))}},{key:"componentWillUnmount",value:function(){this.unsubscribe&&this.unsubscribe()}},{key:"render",value:function(){return s?v.a.createElement(e,D({},this.props,this.state)):e(D({},this.props,this.state),this.context)}}]),n}(b.Component);i.propTypes={theme:S.object};var r=P({},x,S.object),l=null;return Object.defineProperty(i,"contextTypes",{enumerable:!0,configurable:!0,set:function(e){l=e},get:function(){return l?D({},r,l):r}}),i}function t(e){var o={},n=0,a=e;return{getState:function(){return a},setState:function(e){a=e,Object.keys(o).forEach(function(e){return o[e](a)})},subscribe:function(e){var a=n;return o[a]=e,n+=1,function(){delete o[a]}}}}function s(e){var o=[],n=[];return e.toString().split(" ").forEach(function(e){if(0===e.indexOf("css-")){var a=i(e);n.push(a)}else o.push(e)}),{glamorlessClassName:o,glamorStyles:n}}function i(e){return P({},"data-"+e,"")}function r(e){var o=e.styles,n=e.props,a=e.cssOverrides,t=e.cssProp,s=e.theme,i=e.context,r=l([].concat(A(o),[n.className,a,t]),n,s,i),c=r.mappedArgs,u=r.nonGlamorClassNames;return(w.css.apply(void 0,A(c)).toString()+" "+u.join(" ").trim()).trim()}function l(e,o,n,a){for(var t=void 0,i=[],r=[],c=0;c<e.length;c++)if("function"===typeof(t=e[c])){var u=t(o,n,a);if("string"===typeof u){var p=s(u),d=p.glamorStyles,m=p.glamorlessClassName;i.push.apply(i,A(d)),r.push.apply(r,A(m))}else i.push(u)}else if("string"===typeof t){var h=s(t),g=h.glamorStyles,y=h.glamorlessClassName;i.push.apply(i,A(g)),r.push.apply(r,A(y))}else if(Array.isArray(t)){var f=l(t,o,n,a);i.push.apply(i,A(f.mappedArgs)),r.push.apply(r,A(f.nonGlamorClassNames))}else i.push(t);return{mappedArgs:i,nonGlamorClassNames:r}}function c(e){return e.replace(/ /g,"-").replace(/[^A-Za-z0-9\-_]/g,"_")}function u(e){return null==e||"function"!==typeof e&&"object"!==typeof e}function p(e,o,n,a){var t=u(a)?a:n(a);if(!o.has(t)){var s=e.call(this,a);return o.set(t,s),s}return o.get(t)}function d(e,o,n){var a=Array.prototype.slice.call(arguments,3),t=n(a);if(!o.has(t)){var s=e.apply(this,a);return o.set(t,s),s}return o.get(t)}function m(e,o){var n=1===e.length?p:d;return n=n.bind(this,e,o.cache.create(),o.serializer)}function h(){return JSON.stringify(arguments)}function g(){this.cache=Object.create(null)}function y(e,o){var n=o.propsAreCssOverrides,a=o.rootEl,t=o.forwardProps,s=e.css,i=(e.theme,e.className,e.innerRef,e.glam,z(e,["css","theme","className","innerRef","glam"])),r={toForward:{},cssProp:s,cssOverrides:{}};return n||"string"===typeof a?Object.keys(i).reduce(function(e,o){return-1!==t.indexOf(o)||so(a,o)?e.toForward[o]=i[o]:n&&(e.cssOverrides[o]=i[o]),e},r):(r.toForward=i,r)}function f(e){return e.slice(0,1).toUpperCase()+e.slice(1)}var b=n(0),v=n.n(b),w=n(102),k=(n.n(w),["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","bgsound","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","command","content","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","element","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","image","img","input","ins","isindex","kbd","keygen","label","legend","li","link","listing","main","map","mark","marquee","math","menu","menuitem","meta","meter","multicol","nav","nextid","nobr","noembed","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","plaintext","pre","progress","q","rb","rbc","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","slot","small","source","spacer","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr","xmp"]),q=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","animation","audio","canvas","circle","clipPath","color-profile","cursor","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","handler","hatch","hatchpath","hkern","iframe","image","line","linearGradient","listener","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","prefetch","radialGradient","rect","script","set","solidColor","solidcolor","stop","style","svg","switch","symbol","tbreak","text","textArea","textPath","title","tref","tspan","unknown","use","video","view","vkern"],j=k.concat(q).filter(function(e,o,n){return n.indexOf(e)===o}),x="__glamorous__",S=void 0;if(parseFloat(v.a.version.slice(0,4))>=15.5)try{S=n(134)}catch(e){}S=S||v.a.PropTypes;var T=function(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")},C=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),P=function(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e},D=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},I=function(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)},z=function(e,o){var n={};for(var a in e)o.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n},E=function(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o},A=function(e){if(Array.isArray(e)){for(var o=0,n=Array(e.length);o<e.length;o++)n[o]=e[o];return n}return Array.from(e)},L=function(e){function o(){var e,n,a,s;T(this,o);for(var i=arguments.length,r=Array(i),l=0;l<i;l++)r[l]=arguments[l];return n=a=E(this,(e=o.__proto__||Object.getPrototypeOf(o)).call.apply(e,[this].concat(r))),a.broadcast=t(a.props.theme),a.setOuterTheme=function(e){a.outerTheme=e},s=n,E(a,s)}return I(o,e),C(o,[{key:"getTheme",value:function(e){var o=e||this.props.theme;return D({},this.outerTheme,o)}},{key:"getChildContext",value:function(){return P({},x,this.broadcast)}},{key:"componentDidMount",value:function(){this.context[x]&&(this.unsubscribe=this.context[x].subscribe(this.setOuterTheme))}},{key:"componentWillMount",value:function(){this.context[x]&&(this.setOuterTheme(this.context[x].getState()),this.broadcast.setState(this.getTheme()))}},{key:"componentWillReceiveProps",value:function(e){this.props.theme!==e.theme&&this.broadcast.setState(this.getTheme(e.theme))}},{key:"componentWillUnmount",value:function(){this.unsubscribe&&this.unsubscribe()}},{key:"render",value:function(){return this.props.children?v.a.Children.only(this.props.children):null}}]),o}(b.Component);L.childContextTypes=P({},x,S.object.isRequired),L.contextTypes=P({},x,S.object),L.propTypes={theme:S.object.isRequired,children:S.node};g.prototype.has=function(e){return e in this.cache},g.prototype.get=function(e){return this.cache[e]},g.prototype.set=function(e,o){this.cache[e]=o};var W={create:function(){return new g}},O=["coords","download","href","name","rel","shape","target","type"],R=["title"],M=["alt","height","name","width"],F=["alt","coords","download","href","rel","shape","target","type"],_=["controls","loop","muted","preload","src"],B=["href","target"],N=["size"],H=["dir"],U=["cite"],Z=["disabled","form","name","type","value"],G=["height","width"],Y=["span","width"],V=["span","width"],K=["value"],J=["cite"],$=["open"],Q=["title"],X=["open"],ee=["height","src","type","width"],oe=["disabled","form","name"],ne=["size"],ae=["accept","action","method","name","target"],te=["name","scrolling","src"],se=["cols","rows"],ie=["profile"],re=["size","width"],le=["manifest"],ce=["height","name","sandbox","scrolling","src","width"],ue=["alt","height","name","sizes","src","width"],pe=["accept","alt","autoCapitalize","autoCorrect","autoSave","checked","defaultChecked","defaultValue","disabled","form","height","list","max","min","multiple","name","onChange","pattern","placeholder","required","results","size","src","step","title","type","value","width"],de=["cite"],me=["challenge","disabled","form","name"],he=["form"],ge=["type","value"],ye=["color","href","integrity","media","nonce","rel","scope","sizes","target","title","type"],fe=["name"],be=["content","name"],ve=["high","low","max","min","optimum","value"],we=["data","form","height","name","type","width"],ke=["reversed","start","type"],qe=["disabled","label"],je=["disabled","label","selected","value"],xe=["form","name"],Se=["name","type","value"],Te=["width"],Ce=["max","value"],Pe=["cite"],De=["async","defer","integrity","nonce","src","type"],Ie=["defaultValue","disabled","form","multiple","name","onChange","required","size","value"],ze=["name"],Ee=["media","sizes","src","type"],Ae=["media","nonce","title","type"],Le=["summary","width"],We=["headers","height","scope","width"],Oe=["autoCapitalize","autoCorrect","cols","defaultValue","disabled","form","name","onChange","placeholder","required","rows","value","wrap"],Re=["headers","height","scope","width"],Me=["default","kind","label","src"],Fe=["type"],_e=["controls","height","loop","muted","poster","preload","src","width"],Be=["accentHeight","accumulate","additive","alignmentBaseline","allowReorder","alphabetic","amplitude","arabicForm","ascent","attributeName","attributeType","autoReverse","azimuth","baseFrequency","baseProfile","baselineShift","bbox","begin","bias","by","calcMode","capHeight","clip","clipPath","clipPathUnits","clipRule","color","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","contentScriptType","contentStyleType","cursor","cx","cy","d","decelerate","descent","diffuseConstant","direction","display","divisor","dominantBaseline","dur","dx","dy","edgeMode","elevation","enableBackground","end","exponent","externalResourcesRequired","fill","fillOpacity","fillRule","filter","filterRes","filterUnits","floodColor","floodOpacity","focusable","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","format","from","fx","fy","g1","g2","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","glyphRef","gradientTransform","gradientUnits","hanging","height","horizAdvX","horizOriginX","ideographic","imageRendering","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","kerning","keyPoints","keySplines","keyTimes","lengthAdjust","letterSpacing","lightingColor","limitingConeAngle","local","markerEnd","markerHeight","markerMid","markerStart","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mode","numOctaves","offset","opacity","operator","order","orient","orientation","origin","overflow","overlinePosition","overlineThickness","paintOrder","panose1","pathLength","patternContentUnits","patternTransform","patternUnits","pointerEvents","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","r","radius","refX","refY","renderingIntent","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","result","rotate","rx","ry","scale","seed","shapeRendering","slope","spacing","specularConstant","specularExponent","speed","spreadMethod","startOffset","stdDeviation","stemh","stemv","stitchTiles","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","string","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","surfaceScale","systemLanguage","tableValues","targetX","targetY","textAnchor","textDecoration","textLength","textRendering","to","transform","u1","u2","underlinePosition","underlineThickness","unicode","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","values","vectorEffect","version","vertAdvY","vertOriginX","vertOriginY","viewBox","viewTarget","visibility","width","widths","wordSpacing","writingMode","x","x1","x2","xChannelSelector","xHeight","xlinkActuate","xlinkArcrole","xlinkHref","xlinkRole","xlinkShow","xlinkTitle","xlinkType","xmlBase","xmlLang","xmlSpace","xmlns","xmlnsXlink","y","y1","y2","yChannelSelector","z","zoomAndPan"],Ne={html:["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","math","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","slot","small","source","span","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"],svg:["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hkern","image","line","linearGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","svg","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"]},He={a:O,abbr:R,applet:M,area:F,audio:_,base:B,basefont:N,bdo:H,blockquote:U,button:Z,canvas:G,col:Y,colgroup:V,data:K,del:J,details:$,dfn:Q,dialog:X,embed:ee,fieldset:oe,font:ne,form:ae,frame:te,frameset:se,head:ie,hr:re,html:le,iframe:ce,img:ue,input:pe,ins:de,keygen:me,label:he,li:ge,link:ye,map:fe,meta:be,meter:ve,object:we,ol:ke,optgroup:qe,option:je,output:xe,param:Se,pre:Te,progress:Ce,q:Pe,script:De,select:Ie,slot:ze,source:Ee,style:Ae,table:Le,td:We,textarea:Oe,th:Re,track:Me,ul:Fe,video:_e,svg:Be,elements:Ne,"*":["about","acceptCharset","accessKey","allowFullScreen","allowTransparency","autoComplete","autoFocus","autoPlay","capture","cellPadding","cellSpacing","charSet","classID","className","colSpan","contentEditable","contextMenu","crossOrigin","dangerouslySetInnerHTML","datatype","dateTime","dir","draggable","encType","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","hidden","hrefLang","htmlFor","httpEquiv","icon","id","inlist","inputMode","is","itemID","itemProp","itemRef","itemScope","itemType","keyParams","keyType","lang","marginHeight","marginWidth","maxLength","mediaGroup","minLength","noValidate","prefix","property","radioGroup","readOnly","resource","role","rowSpan","scoped","seamless","security","spellCheck","srcDoc","srcLang","srcSet","style","suppressContentEditableWarning","tabIndex","title","typeof","unselectable","useMap","vocab","wmode"]},Ue=Object.freeze({a:O,abbr:R,applet:M,area:F,audio:_,base:B,basefont:N,bdo:H,blockquote:U,button:Z,canvas:G,col:Y,colgroup:V,data:K,del:J,details:$,dfn:Q,dialog:X,embed:ee,fieldset:oe,font:ne,form:ae,frame:te,frameset:se,head:ie,hr:re,html:le,iframe:ce,img:ue,input:pe,ins:de,keygen:me,label:he,li:ge,link:ye,map:fe,meta:be,meter:ve,object:we,ol:ke,optgroup:qe,option:je,output:xe,param:Se,pre:Te,progress:Ce,q:Pe,script:De,select:Ie,slot:ze,source:Ee,style:Ae,table:Le,td:We,textarea:Oe,th:Re,track:Me,ul:Fe,video:_e,svg:Be,elements:Ne,default:He}),Ze=Ue&&He||Ue,Ge=function(e,o){return o={exports:{}},e(o,o.exports),o.exports}(function(e,o){Object.defineProperty(o,"__esModule",{value:!0}),o.default=Ze,e.exports=Ze}),Ye=function(e){return e&&e.__esModule?e.default:e}(Ge),Ve=["children","dangerouslySetInnerHTML","key","ref","autoFocus","defaultValue","valueLink","defaultChecked","checkedLink","innerHTML","suppressContentEditableWarning","onFocusIn","onFocusOut","className","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onSubmit","onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onScroll","onWheel","onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onError","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting","onLoad","onAnimationStart","onAnimationEnd","onAnimationIteration","onTransitionEnd","onCopyCapture","onCutCapture","onPasteCapture","onCompositionEndCapture","onCompositionStartCapture","onCompositionUpdateCapture","onKeyDownCapture","onKeyPressCapture","onKeyUpCapture","onFocusCapture","onBlurCapture","onChangeCapture","onInputCapture","onSubmitCapture","onClickCapture","onContextMenuCapture","onDoubleClickCapture","onDragCapture","onDragEndCapture","onDragEnterCapture","onDragExitCapture","onDragLeaveCapture","onDragOverCapture","onDragStartCapture","onDropCapture","onMouseDownCapture","onMouseEnterCapture","onMouseLeaveCapture","onMouseMoveCapture","onMouseOutCapture","onMouseOverCapture","onMouseUpCapture","onSelectCapture","onTouchCancelCapture","onTouchEndCapture","onTouchMoveCapture","onTouchStartCapture","onScrollCapture","onWheelCapture","onAbortCapture","onCanPlayCapture","onCanPlayThroughCapture","onDurationChangeCapture","onEmptiedCapture","onEncryptedCapture","onEndedCapture","onErrorCapture","onLoadedDataCapture","onLoadedMetadataCapture","onLoadStartCapture","onPauseCapture","onPlayCapture","onPlayingCapture","onProgressCapture","onRateChangeCapture","onSeekedCapture","onSeekingCapture","onStalledCapture","onSuspendCapture","onTimeUpdateCapture","onVolumeChangeCapture","onWaitingCapture","onLoadCapture","onAnimationStartCapture","onAnimationEndCapture","onAnimationIterationCapture","onTransitionEndCapture"],Ke=Ye["*"],Je=Ye.elements.svg,$e=Ye.elements.html,Qe=["color","height","width"],Xe=RegExp.prototype.test.bind(new RegExp("^(data|aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$")),eo=function(e){return"svg"===e||-1===$e.indexOf(e)&&-1!==Je.indexOf(e)},oo=function(e,o){var n=void 0;return n=eo(o)?Ye.svg:Ye[o]||[],-1!==Ke.indexOf(e)||-1!==n.indexOf(e)},no=function(e){return-1!==Qe.indexOf(e)},ao=function(e){return-1!==Ve.indexOf(e)},to=function(e,o){return"string"!==typeof e||(oo(o,e)||ao(o)||Xe(o.toLowerCase()))&&(!no(o)||eo(e))},so=function(e,o){var n=o&&o.cache?o.cache:W,a=o&&o.serializer?o.serializer:h;return(o&&o.strategy?o.strategy:m)(e,{cache:n,serializer:a})}(to),io=function(e){function o(t){function s(){function s(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return o(e,D({forwardProps:h.forwardProps},n))(h.styles)}for(var i=arguments.length,p=Array(i),m=0;m<i;m++)p[m]=arguments[m];var h=a(function(n,a){var t=e(n,h),s=t.toForward,i=t.cssOverrides,l=t.cssProp,u=n.theme,p=r({styles:h.styles,props:n,cssOverrides:i,cssProp:l,theme:u,context:a}),d=o.config.useDisplayNameInClassName?c(h.displayName):"",m=(p+" "+d).trim();return v.a.createElement(h.comp,D({ref:n.innerRef},s,{className:m}))},{noWarn:!0,createElement:!1});return h.propTypes={className:S.string,cssOverrides:S.object,theme:S.object,innerRef:S.func,glam:S.object},Object.assign(h,n({comp:t,styles:p,rootEl:l,forwardProps:d,displayName:u}),{withComponent:s,isGlamorousComponent:!0}),h}var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=i.rootEl,u=i.displayName,p=i.forwardProps,d=void 0===p?[]:p;return s}function n(e){var o=e.comp,n=e.styles,a=e.rootEl,i=e.forwardProps,r=e.displayName,l=o.comp?o.comp:o;return{styles:t(o.styles,n),comp:l,rootEl:a||l,forwardProps:t(o.forwardProps,i),displayName:r||"glamorous("+s(o)+")"}}function t(e,o){return e?e.concat(o):o}function s(e){return"string"===typeof e?e:e.displayName||e.name||"unknown"}return o.config={useDisplayNameInClassName:!1},o}(y);Object.assign(io,j.reduce(function(e,o){return e[o]=io(o),e},{})),Object.assign(io,j.reduce(function(e,o){var n=f(o);return e[n]=io[o](),e[n].displayName="glamorous."+n,e[n].propsAreCssOverrides=!0,e},{})),io.default=io,o.a=io;io.A,io.Abbr,io.Acronym,io.Address,io.Applet,io.Area,io.Article,io.Aside,io.Audio,io.B,io.Base,io.Basefont,io.Bdi,io.Bdo,io.Bgsound,io.Big,io.Blink,io.Blockquote,io.Body,io.Br,io.Button,io.Canvas,io.Caption,io.Center,io.Cite,io.Code,io.Col,io.Colgroup,io.Command,io.Content,io.Data,io.Datalist,io.Dd,io.Del,io.Details,io.Dfn,io.Dialog,io.Dir,io.Div,io.Dl,io.Dt,io.Element,io.Em,io.Embed,io.Fieldset,io.Figcaption,io.Figure,io.Font,io.Footer,io.Form,io.Frame,io.Frameset,io.H1,io.H2,io.H3,io.H4,io.H5,io.H6,io.Head,io.Header,io.Hgroup,io.Hr,io.Html,io.I,io.Iframe,io.Image,io.Img,io.Input,io.Ins,io.Isindex,io.Kbd,io.Keygen,io.Label,io.Legend,io.Li,io.Link,io.Listing,io.Main,io.Map,io.Mark,io.Marquee,io.Math,io.Menu,io.Menuitem,io.Meta,io.Meter,io.Multicol,io.Nav,io.Nextid,io.Nobr,io.Noembed,io.Noframes,io.Noscript,io.Object,io.Ol,io.Optgroup,io.Option,io.Output,io.P,io.Param,io.Picture,io.Plaintext,io.Pre,io.Progress,io.Q,io.Rb,io.Rbc,io.Rp,io.Rt,io.Rtc,io.Ruby,io.S,io.Samp,io.Script,io.Section,io.Select,io.Shadow,io.Slot,io.Small,io.Source,io.Spacer,io.Span,io.Strike,io.Strong,io.Style,io.Sub,io.Summary,io.Sup,io.Svg,io.Table,io.Tbody,io.Td,io.Template,io.Textarea,io.Tfoot,io.Th,io.Thead,io.Time,io.Title,io.Tr,io.Track,io.Tt,io.U,io.Ul,io.Var,io.Video,io.Wbr,io.Xmp,io.AltGlyph,io.AltGlyphDef,io.AltGlyphItem,io.Animate,io.AnimateColor,io.AnimateMotion,io.AnimateTransform,io.Animation,io.Circle,io.ClipPath,io["Color-profile"],io.Cursor,io.Defs,io.Desc,io.Discard,io.Ellipse,io.FeBlend,io.FeColorMatrix,io.FeComponentTransfer,io.FeComposite,io.FeConvolveMatrix,io.FeDiffuseLighting,io.FeDisplacementMap,io.FeDistantLight,io.FeDropShadow,io.FeFlood,io.FeFuncA,io.FeFuncB,io.FeFuncG,io.FeFuncR,io.FeGaussianBlur,io.FeImage,io.FeMerge,io.FeMergeNode,io.FeMorphology,io.FeOffset,io.FePointLight,io.FeSpecularLighting,io.FeSpotLight,io.FeTile,io.FeTurbulence,io.Filter,io["Font-face"],io["Font-face-format"],io["Font-face-name"],io["Font-face-src"],io["Font-face-uri"],io.ForeignObject,io.G,io.Glyph,io.GlyphRef,io.Handler,io.Hatch,io.Hatchpath,io.Hkern,io.Line,io.LinearGradient,io.Listener,io.Marker,io.Mask,io.Mesh,io.Meshgradient,io.Meshpatch,io.Meshrow,io.Metadata,io["Missing-glyph"],io.Mpath,io.Path,io.Pattern,io.Polygon,io.Polyline,io.Prefetch,io.RadialGradient,io.Rect,io.Set,io.SolidColor,io.Solidcolor,io.Stop,io.Switch,io.Symbol,io.Tbreak,io.Text,io.TextArea,io.TextPath,io.Tref,io.Tspan,io.Unknown,io.Use,io.View,io.Vkern},function(e,o,n){"use strict";var a=n(4),t=a;e.exports=t},function(e,o,n){"use strict";function a(e){return void 0!==e.ref}function t(e){return void 0!==e.key}var s=n(2),i=n(26),r=(n(6),n(29),Object.prototype.hasOwnProperty),l=n(27),c={key:!0,ref:!0,__self:!0,__source:!0},u=function(e,o,n,a,t,s,i){var r={$$typeof:l,type:e,key:o,ref:n,props:i,_owner:s};return r};u.createElement=function(e,o,n){var s,l={},p=null,d=null;if(null!=o){a(o)&&(d=o.ref),t(o)&&(p=""+o.key),void 0===o.__self?null:o.__self,void 0===o.__source?null:o.__source;for(s in o)r.call(o,s)&&!c.hasOwnProperty(s)&&(l[s]=o[s])}var m=arguments.length-2;if(1===m)l.children=n;else if(m>1){for(var h=Array(m),g=0;g<m;g++)h[g]=arguments[g+2];l.children=h}if(e&&e.defaultProps){var y=e.defaultProps;for(s in y)void 0===l[s]&&(l[s]=y[s])}return u(e,p,d,0,0,i.current,l)},u.createFactory=function(e){var o=u.createElement.bind(null,e);return o.type=e,o},u.cloneAndReplaceKey=function(e,o){return u(e.type,o,e.ref,e._self,e._source,e._owner,e.props)},u.cloneElement=function(e,o,n){var l,p=s({},e.props),d=e.key,m=e.ref,h=(e._self,e._source,e._owner);if(null!=o){a(o)&&(m=o.ref,h=i.current),t(o)&&(d=""+o.key);var g;e.type&&e.type.defaultProps&&(g=e.type.defaultProps);for(l in o)r.call(o,l)&&!c.hasOwnProperty(l)&&(void 0===o[l]&&void 0!==g?p[l]=g[l]:p[l]=o[l])}var y=arguments.length-2;if(1===y)p.children=n;else if(y>1){for(var f=Array(y),b=0;b<y;b++)f[b]=arguments[b+2];p.children=f}return u(e.type,d,m,0,0,h,p)},u.isValidElement=function(e){return"object"===typeof e&&null!==e&&e.$$typeof===l},e.exports=u},function(e,o,n){"use strict";function a(e){return"string"===typeof e&&t.test(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=/-webkit-|-moz-|-ms-/;e.exports=o.default},function(e,o,n){"use strict";var a=n(5),t=a.a.div({display:"flex",flexDirection:"column"});o.a=t},function(e,o,n){"use strict";var a={};e.exports=a},function(e,o,n){"use strict";function a(e){for(var o=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,a=0;a<o;a++)n+="&args[]="+encodeURIComponent(arguments[a+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var t=new Error(n);throw t.name="Invariant Violation",t.framesToPop=1,t}e.exports=a},function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var a=n(36),t=n(170),s=n(169),i=n(168),r=n(35);n(37);n.d(o,"createStore",function(){return a.b}),n.d(o,"combineReducers",function(){return t.a}),n.d(o,"bindActionCreators",function(){return s.a}),n.d(o,"applyMiddleware",function(){return i.a}),n.d(o,"compose",function(){return r.a})},function(e,o,n){"use strict";n.d(o,"b",function(){return t});var a=function(e){return{type:t,payload:e}},t="INITIALIZE_FROM_HUGO";o.a=a},function(e,o,n){"use strict";function a(e){if(!n.i(i.a)(e)||n.i(t.a)(e)!=r)return!1;var o=n.i(s.a)(e);if(null===o)return!0;var a=p.call(o,"constructor")&&o.constructor;return"function"==typeof a&&a instanceof a&&u.call(a)==d}var t=n(122),s=n(124),i=n(129),r="[object Object]",l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=u.call(Object);o.a=a},function(e,o,n){"use strict";function a(e){"undefined"!==typeof console&&"function"===typeof console.error&&console.error(e);try{throw new Error(e)}catch(e){}}o.a=a},function(e,o){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"===typeof window&&(n=window)}e.exports=n},function(e,o,n){"use strict";n.d(o,"b",function(){return t});var a=function(e){return{type:t,payload:e}},t="UPDATE_LIST_ITEM_FROM_HUGO";o.a=a},function(e,o,n){"use strict";var a=n(5),t=a.a.div({display:"flex",flexDirection:"row"});o.a=t},function(e,o,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function t(e,o){var n="";for(var a in e){var t=0===a.indexOf("--");if(e.hasOwnProperty(a)&&"label"!==a){var s=e[a];null!=s&&(t?n+=a+":"+s+";":(n+=m(a)+":",n+=(0,r.default)(a,s,o)+";"))}}return n||null}Object.defineProperty(o,"__esModule",{value:!0}),o.processStyleName=void 0,o.createMarkupForStyles=t;var s=n(88),i=(a(s),n(99)),r=a(i),l=n(93),c=a(l),u=n(96),p=a(u),d=n(6),m=(a(d),o.processStyleName=(0,p.default)(c.default))},function(e,o,n){"use strict";function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a,e.exports=o.default},function(e,o,n){"use strict";var a=n(128),t=a.a.Symbol;o.a=t},function(e,o){},function(e,o,n){(function(e){!function(o,n){e.exports=n()}(0,function(){"use strict";function o(){return ka.apply(null,arguments)}function a(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function t(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){var o;for(o in e)return!1;return!0}function i(e){return void 0===e}function r(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function c(e,o){var n,a=[];for(n=0;n<e.length;++n)a.push(o(e[n],n));return a}function u(e,o){return Object.prototype.hasOwnProperty.call(e,o)}function p(e,o){for(var n in o)u(o,n)&&(e[n]=o[n]);return u(o,"toString")&&(e.toString=o.toString),u(o,"valueOf")&&(e.valueOf=o.valueOf),e}function d(e,o,n,a){return wo(e,o,n,a,!0).utc()}function m(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function h(e){return null==e._pf&&(e._pf=m()),e._pf}function g(e){if(null==e._isValid){var o=h(e),n=ja.call(o.parsedDateParts,function(e){return null!=e}),a=!isNaN(e._d.getTime())&&o.overflow<0&&!o.empty&&!o.invalidMonth&&!o.invalidWeekday&&!o.nullInput&&!o.invalidFormat&&!o.userInvalidated&&(!o.meridiem||o.meridiem&&n);if(e._strict&&(a=a&&0===o.charsLeftOver&&0===o.unusedTokens.length&&void 0===o.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function y(e){var o=d(NaN);return null!=e?p(h(o),e):h(o).userInvalidated=!0,o}function f(e,o){var n,a,t;if(i(o._isAMomentObject)||(e._isAMomentObject=o._isAMomentObject),i(o._i)||(e._i=o._i),i(o._f)||(e._f=o._f),i(o._l)||(e._l=o._l),i(o._strict)||(e._strict=o._strict),i(o._tzm)||(e._tzm=o._tzm),i(o._isUTC)||(e._isUTC=o._isUTC),i(o._offset)||(e._offset=o._offset),i(o._pf)||(e._pf=h(o)),i(o._locale)||(e._locale=o._locale),xa.length>0)for(n=0;n<xa.length;n++)a=xa[n],t=o[a],i(t)||(e[a]=t);return e}function b(e){f(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===Sa&&(Sa=!0,o.updateOffset(this),Sa=!1)}function v(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function w(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function k(e){var o=+e,n=0;return 0!==o&&isFinite(o)&&(n=w(o)),n}function q(e,o,n){var a,t=Math.min(e.length,o.length),s=Math.abs(e.length-o.length),i=0;for(a=0;a<t;a++)(n&&e[a]!==o[a]||!n&&k(e[a])!==k(o[a]))&&i++;return i+s}function j(e){!1===o.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function x(e,n){var a=!0;return p(function(){if(null!=o.deprecationHandler&&o.deprecationHandler(null,e),a){for(var t,s=[],i=0;i<arguments.length;i++){if(t="","object"==typeof arguments[i]){t+="\n["+i+"] ";for(var r in arguments[0])t+=r+": "+arguments[0][r]+", ";t=t.slice(0,-2)}else t=arguments[i];s.push(t)}j(e+"\nArguments: "+Array.prototype.slice.call(s).join("")+"\n"+(new Error).stack),a=!1}return n.apply(this,arguments)},n)}function S(e,n){null!=o.deprecationHandler&&o.deprecationHandler(e,n),Ta[e]||(j(n),Ta[e]=!0)}function T(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function C(e){var o,n;for(n in e)o=e[n],T(o)?this[n]=o:this["_"+n]=o;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function P(e,o){var n,a=p({},e);for(n in o)u(o,n)&&(t(e[n])&&t(o[n])?(a[n]={},p(a[n],e[n]),p(a[n],o[n])):null!=o[n]?a[n]=o[n]:delete a[n]);for(n in e)u(e,n)&&!u(o,n)&&t(e[n])&&(a[n]=p({},a[n]));return a}function D(e){null!=e&&this.set(e)}function I(e,o,n){var a=this._calendar[e]||this._calendar.sameElse;return T(a)?a.call(o,n):a}function z(e){var o=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return o||!n?o:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function E(){return this._invalidDate}function A(e){return this._ordinal.replace("%d",e)}function L(e,o,n,a){var t=this._relativeTime[n];return T(t)?t(e,o,n,a):t.replace(/%d/i,e)}function W(e,o){var n=this._relativeTime[e>0?"future":"past"];return T(n)?n(o):n.replace(/%s/i,o)}function O(e,o){var n=e.toLowerCase();La[n]=La[n+"s"]=La[o]=e}function R(e){return"string"==typeof e?La[e]||La[e.toLowerCase()]:void 0}function M(e){var o,n,a={};for(n in e)u(e,n)&&(o=R(n))&&(a[o]=e[n]);return a}function F(e,o){Wa[e]=o}function _(e){var o=[];for(var n in e)o.push({unit:n,priority:Wa[n]});return o.sort(function(e,o){return e.priority-o.priority}),o}function B(e,n){return function(a){return null!=a?(H(this,e,a),o.updateOffset(this,n),this):N(this,e)}}function N(e,o){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+o]():NaN}function H(e,o,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+o](n)}function U(e){return e=R(e),T(this[e])?this[e]():this}function Z(e,o){if("object"==typeof e){e=M(e);for(var n=_(e),a=0;a<n.length;a++)this[n[a].unit](e[n[a].unit])}else if(e=R(e),T(this[e]))return this[e](o);return this}function G(e,o,n){var a=""+Math.abs(e),t=o-a.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,t)).toString().substr(1)+a}function Y(e,o,n,a){var t=a;"string"==typeof a&&(t=function(){return this[a]()}),e&&(Fa[e]=t),o&&(Fa[o[0]]=function(){return G(t.apply(this,arguments),o[1],o[2])}),n&&(Fa[n]=function(){return this.localeData().ordinal(t.apply(this,arguments),e)})}function V(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function K(e){var o,n,a=e.match(Oa);for(o=0,n=a.length;o<n;o++)Fa[a[o]]?a[o]=Fa[a[o]]:a[o]=V(a[o]);return function(o){var t,s="";for(t=0;t<n;t++)s+=T(a[t])?a[t].call(o,e):a[t];return s}}function J(e,o){return e.isValid()?(o=$(o,e.localeData()),Ma[o]=Ma[o]||K(o),Ma[o](e)):e.localeData().invalidDate()}function $(e,o){function n(e){return o.longDateFormat(e)||e}var a=5;for(Ra.lastIndex=0;a>=0&&Ra.test(e);)e=e.replace(Ra,n),Ra.lastIndex=0,a-=1;return e}function Q(e,o,n){at[e]=T(o)?o:function(e,a){return e&&n?n:o}}function X(e,o){return u(at,e)?at[e](o._strict,o._locale):new RegExp(ee(e))}function ee(e){return oe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,o,n,a,t){return o||n||a||t}))}function oe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ne(e,o){var n,a=o;for("string"==typeof e&&(e=[e]),r(o)&&(a=function(e,n){n[o]=k(e)}),n=0;n<e.length;n++)tt[e[n]]=a}function ae(e,o){ne(e,function(e,n,a,t){a._w=a._w||{},o(e,a._w,a,t)})}function te(e,o,n){null!=o&&u(tt,e)&&tt[e](o,n._a,n,e)}function se(e,o){return new Date(Date.UTC(e,o+1,0)).getUTCDate()}function ie(e,o){return e?a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||gt).test(o)?"format":"standalone"][e.month()]:a(this._months)?this._months:this._months.standalone}function re(e,o){return e?a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[gt.test(o)?"format":"standalone"][e.month()]:a(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function le(e,o,n){var a,t,s,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)s=d([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(s,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(s,"").toLocaleLowerCase();return n?"MMM"===o?(t=ht.call(this._shortMonthsParse,i),-1!==t?t:null):(t=ht.call(this._longMonthsParse,i),-1!==t?t:null):"MMM"===o?(t=ht.call(this._shortMonthsParse,i),-1!==t?t:(t=ht.call(this._longMonthsParse,i),-1!==t?t:null)):(t=ht.call(this._longMonthsParse,i),-1!==t?t:(t=ht.call(this._shortMonthsParse,i),-1!==t?t:null))}function ce(e,o,n){var a,t,s;if(this._monthsParseExact)return le.call(this,e,o,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(t=d([2e3,a]),n&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(t,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(t,"").replace(".","")+"$","i")),n||this._monthsParse[a]||(s="^"+this.months(t,"")+"|^"+this.monthsShort(t,""),this._monthsParse[a]=new RegExp(s.replace(".",""),"i")),n&&"MMMM"===o&&this._longMonthsParse[a].test(e))return a;if(n&&"MMM"===o&&this._shortMonthsParse[a].test(e))return a;if(!n&&this._monthsParse[a].test(e))return a}}function ue(e,o){var n;if(!e.isValid())return e;if("string"==typeof o)if(/^\d+$/.test(o))o=k(o);else if(o=e.localeData().monthsParse(o),!r(o))return e;return n=Math.min(e.date(),se(e.year(),o)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](o,n),e}function pe(e){return null!=e?(ue(this,e),o.updateOffset(this,!0),this):N(this,"Month")}function de(){return se(this.year(),this.month())}function me(e){return this._monthsParseExact?(u(this,"_monthsRegex")||ge.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(u(this,"_monthsShortRegex")||(this._monthsShortRegex=bt),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function he(e){return this._monthsParseExact?(u(this,"_monthsRegex")||ge.call(this),e?this._monthsStrictRegex:this._monthsRegex):(u(this,"_monthsRegex")||(this._monthsRegex=vt),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function ge(){function e(e,o){return o.length-e.length}var o,n,a=[],t=[],s=[];for(o=0;o<12;o++)n=d([2e3,o]),a.push(this.monthsShort(n,"")),t.push(this.months(n,"")),s.push(this.months(n,"")),s.push(this.monthsShort(n,""));for(a.sort(e),t.sort(e),s.sort(e),o=0;o<12;o++)a[o]=oe(a[o]),t[o]=oe(t[o]);for(o=0;o<24;o++)s[o]=oe(s[o]);this._monthsRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+t.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+a.join("|")+")","i")}function ye(e){return fe(e)?366:365}function fe(e){return e%4===0&&e%100!==0||e%400===0}function be(){return fe(this.year())}function ve(e,o,n,a,t,s,i){var r=new Date(e,o,n,a,t,s,i);return e<100&&e>=0&&isFinite(r.getFullYear())&&r.setFullYear(e),r}function we(e){var o=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(o.getUTCFullYear())&&o.setUTCFullYear(e),o}function ke(e,o,n){var a=7+o-n;return-(7+we(e,0,a).getUTCDay()-o)%7+a-1}function qe(e,o,n,a,t){var s,i,r=(7+n-a)%7,l=ke(e,a,t),c=1+7*(o-1)+r+l;return c<=0?(s=e-1,i=ye(s)+c):c>ye(e)?(s=e+1,i=c-ye(e)):(s=e,i=c),{year:s,dayOfYear:i}}function je(e,o,n){var a,t,s=ke(e.year(),o,n),i=Math.floor((e.dayOfYear()-s-1)/7)+1;return i<1?(t=e.year()-1,a=i+xe(t,o,n)):i>xe(e.year(),o,n)?(a=i-xe(e.year(),o,n),t=e.year()+1):(t=e.year(),a=i),{week:a,year:t}}function xe(e,o,n){var a=ke(e,o,n),t=ke(e+1,o,n);return(ye(e)-a+t)/7}function Se(e){return je(e,this._week.dow,this._week.doy).week}function Te(){return this._week.dow}function Ce(){return this._week.doy}function Pe(e){var o=this.localeData().week(this);return null==e?o:this.add(7*(e-o),"d")}function De(e){var o=je(this,1,4).week;return null==e?o:this.add(7*(e-o),"d")}function Ie(e,o){return"string"!=typeof e?e:isNaN(e)?(e=o.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function ze(e,o){return"string"==typeof e?o.weekdaysParse(e)%7||7:isNaN(e)?null:e}function Ee(e,o){return e?a(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(o)?"format":"standalone"][e.day()]:a(this._weekdays)?this._weekdays:this._weekdays.standalone}function Ae(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Le(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function We(e,o,n){var a,t,s,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)s=d([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(s,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(s,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(s,"").toLocaleLowerCase();return n?"dddd"===o?(t=ht.call(this._weekdaysParse,i),-1!==t?t:null):"ddd"===o?(t=ht.call(this._shortWeekdaysParse,i),-1!==t?t:null):(t=ht.call(this._minWeekdaysParse,i),-1!==t?t:null):"dddd"===o?(t=ht.call(this._weekdaysParse,i),-1!==t?t:(t=ht.call(this._shortWeekdaysParse,i),-1!==t?t:(t=ht.call(this._minWeekdaysParse,i),-1!==t?t:null))):"ddd"===o?(t=ht.call(this._shortWeekdaysParse,i),-1!==t?t:(t=ht.call(this._weekdaysParse,i),-1!==t?t:(t=ht.call(this._minWeekdaysParse,i),-1!==t?t:null))):(t=ht.call(this._minWeekdaysParse,i),-1!==t?t:(t=ht.call(this._weekdaysParse,i),-1!==t?t:(t=ht.call(this._shortWeekdaysParse,i),-1!==t?t:null)))}function Oe(e,o,n){var a,t,s;if(this._weekdaysParseExact)return We.call(this,e,o,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(t=d([2e3,1]).day(a),n&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(t,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(t,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(t,"").replace(".",".?")+"$","i")),this._weekdaysParse[a]||(s="^"+this.weekdays(t,"")+"|^"+this.weekdaysShort(t,"")+"|^"+this.weekdaysMin(t,""),this._weekdaysParse[a]=new RegExp(s.replace(".",""),"i")),n&&"dddd"===o&&this._fullWeekdaysParse[a].test(e))return a;if(n&&"ddd"===o&&this._shortWeekdaysParse[a].test(e))return a;if(n&&"dd"===o&&this._minWeekdaysParse[a].test(e))return a;if(!n&&this._weekdaysParse[a].test(e))return a}}function Re(e){if(!this.isValid())return null!=e?this:NaN;var o=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Ie(e,this.localeData()),this.add(e-o,"d")):o}function Me(e){if(!this.isValid())return null!=e?this:NaN;var o=(this.day()+7-this.localeData()._week.dow)%7;return null==e?o:this.add(e-o,"d")}function Fe(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var o=ze(e,this.localeData());return this.day(this.day()%7?o:o-7)}return this.day()||7}function _e(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||He.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(u(this,"_weekdaysRegex")||(this._weekdaysRegex=St),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function Be(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||He.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(u(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Tt),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Ne(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||He.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(u(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ct),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function He(){function e(e,o){return o.length-e.length}var o,n,a,t,s,i=[],r=[],l=[],c=[];for(o=0;o<7;o++)n=d([2e3,1]).day(o),a=this.weekdaysMin(n,""),t=this.weekdaysShort(n,""),s=this.weekdays(n,""),i.push(a),r.push(t),l.push(s),c.push(a),c.push(t),c.push(s);for(i.sort(e),r.sort(e),l.sort(e),c.sort(e),o=0;o<7;o++)r[o]=oe(r[o]),l[o]=oe(l[o]),c[o]=oe(c[o]);this._weekdaysRegex=new RegExp("^("+c.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function Ue(){return this.hours()%12||12}function Ze(){return this.hours()||24}function Ge(e,o){Y(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),o)})}function Ye(e,o){return o._meridiemParse}function Ve(e){return"p"===(e+"").toLowerCase().charAt(0)}function Ke(e,o,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Je(e){return e?e.toLowerCase().replace("_","-"):e}function $e(e){for(var o,n,a,t,s=0;s<e.length;){for(t=Je(e[s]).split("-"),o=t.length,n=Je(e[s+1]),n=n?n.split("-"):null;o>0;){if(a=Qe(t.slice(0,o).join("-")))return a;if(n&&n.length>=o&&q(t,n,!0)>=o-1)break;o--}s++}return null}function Qe(o){var a=null;if(!Et[o]&&"undefined"!=typeof e&&e&&e.exports)try{a=Pt._abbr,n(130)("./"+o),Xe(a)}catch(o){}return Et[o]}function Xe(e,o){var n;return e&&(n=i(o)?no(e):eo(e,o))&&(Pt=n),Pt._abbr}function eo(e,o){if(null!==o){var n=zt;if(o.abbr=e,null!=Et[e])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=Et[e]._config;else if(null!=o.parentLocale){if(null==Et[o.parentLocale])return At[o.parentLocale]||(At[o.parentLocale]=[]),At[o.parentLocale].push({name:e,config:o}),null;n=Et[o.parentLocale]._config}return Et[e]=new D(P(n,o)),At[e]&&At[e].forEach(function(e){eo(e.name,e.config)}),Xe(e),Et[e]}return delete Et[e],null}function oo(e,o){if(null!=o){var n,a=zt;null!=Et[e]&&(a=Et[e]._config),o=P(a,o),n=new D(o),n.parentLocale=Et[e],Et[e]=n,Xe(e)}else null!=Et[e]&&(null!=Et[e].parentLocale?Et[e]=Et[e].parentLocale:null!=Et[e]&&delete Et[e]);return Et[e]}function no(e){var o;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Pt;if(!a(e)){if(o=Qe(e))return o;e=[e]}return $e(e)}function ao(){return Da(Et)}function to(e){var o,n=e._a;return n&&-2===h(e).overflow&&(o=n[it]<0||n[it]>11?it:n[rt]<1||n[rt]>se(n[st],n[it])?rt:n[lt]<0||n[lt]>24||24===n[lt]&&(0!==n[ct]||0!==n[ut]||0!==n[pt])?lt:n[ct]<0||n[ct]>59?ct:n[ut]<0||n[ut]>59?ut:n[pt]<0||n[pt]>999?pt:-1,h(e)._overflowDayOfYear&&(o<st||o>rt)&&(o=rt),h(e)._overflowWeeks&&-1===o&&(o=dt),h(e)._overflowWeekday&&-1===o&&(o=mt),h(e).overflow=o),e}function so(e){var o,n,a,t,s,i,r=e._i,l=Lt.exec(r)||Wt.exec(r);if(l){for(h(e).iso=!0,o=0,n=Rt.length;o<n;o++)if(Rt[o][1].exec(l[1])){t=Rt[o][0],a=!1!==Rt[o][2];break}if(null==t)return void(e._isValid=!1);if(l[3]){for(o=0,n=Mt.length;o<n;o++)if(Mt[o][1].exec(l[3])){s=(l[2]||" ")+Mt[o][0];break}if(null==s)return void(e._isValid=!1)}if(!a&&null!=s)return void(e._isValid=!1);if(l[4]){if(!Ot.exec(l[4]))return void(e._isValid=!1);i="Z"}e._f=t+(s||"")+(i||""),mo(e)}else e._isValid=!1}function io(e){var o,n,a,t,s,i,r,l,c={" GMT":" +0000"," EDT":" -0400"," EST":" -0500"," CDT":" -0500"," CST":" -0600"," MDT":" -0600"," MST":" -0700"," PDT":" -0700"," PST":" -0800"};if(o=e._i.replace(/\([^\)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s|\s$/g,""),n=_t.exec(o)){if(a=n[1]?"ddd"+(5===n[1].length?", ":" "):"",t="D MMM "+(n[2].length>10?"YYYY ":"YY "),s="HH:mm"+(n[4]?":ss":""),n[1]){var u=new Date(n[2]),p=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][u.getDay()];if(n[1].substr(0,3)!==p)return h(e).weekdayMismatch=!0,void(e._isValid=!1)}switch(n[5].length){case 2:0===l?r=" +0000":(l="YXWVUTSRQPONZABCDEFGHIKLM".indexOf(n[5][1].toUpperCase())-12,r=(l<0?" -":" +")+(""+l).replace(/^-?/,"0").match(/..$/)[0]+"00");break;case 4:r=c[n[5]];break;default:r=c[" GMT"]}n[5]=r,e._i=n.splice(1).join(""),i=" ZZ",e._f=a+t+s+i,mo(e),h(e).rfc2822=!0}else e._isValid=!1}function ro(e){var n=Ft.exec(e._i);return null!==n?void(e._d=new Date(+n[1])):(so(e),void(!1===e._isValid&&(delete e._isValid,io(e),!1===e._isValid&&(delete e._isValid,o.createFromInputFallback(e)))))}function lo(e,o,n){return null!=e?e:null!=o?o:n}function co(e){var n=new Date(o.now());return e._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function uo(e){var o,n,a,t,s=[];if(!e._d){for(a=co(e),e._w&&null==e._a[rt]&&null==e._a[it]&&po(e),null!=e._dayOfYear&&(t=lo(e._a[st],a[st]),(e._dayOfYear>ye(t)||0===e._dayOfYear)&&(h(e)._overflowDayOfYear=!0),n=we(t,0,e._dayOfYear),e._a[it]=n.getUTCMonth(),e._a[rt]=n.getUTCDate()),o=0;o<3&&null==e._a[o];++o)e._a[o]=s[o]=a[o];for(;o<7;o++)e._a[o]=s[o]=null==e._a[o]?2===o?1:0:e._a[o];24===e._a[lt]&&0===e._a[ct]&&0===e._a[ut]&&0===e._a[pt]&&(e._nextDay=!0,e._a[lt]=0),e._d=(e._useUTC?we:ve).apply(null,s),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[lt]=24)}}function po(e){var o,n,a,t,s,i,r,l;if(o=e._w,null!=o.GG||null!=o.W||null!=o.E)s=1,i=4,n=lo(o.GG,e._a[st],je(ko(),1,4).year),a=lo(o.W,1),((t=lo(o.E,1))<1||t>7)&&(l=!0);else{s=e._locale._week.dow,i=e._locale._week.doy;var c=je(ko(),s,i);n=lo(o.gg,e._a[st],c.year),a=lo(o.w,c.week),null!=o.d?((t=o.d)<0||t>6)&&(l=!0):null!=o.e?(t=o.e+s,(o.e<0||o.e>6)&&(l=!0)):t=s}a<1||a>xe(n,s,i)?h(e)._overflowWeeks=!0:null!=l?h(e)._overflowWeekday=!0:(r=qe(n,a,t,s,i),e._a[st]=r.year,e._dayOfYear=r.dayOfYear)}function mo(e){if(e._f===o.ISO_8601)return void so(e);if(e._f===o.RFC_2822)return void io(e);e._a=[],h(e).empty=!0;var n,a,t,s,i,r=""+e._i,l=r.length,c=0;for(t=$(e._f,e._locale).match(Oa)||[],n=0;n<t.length;n++)s=t[n],a=(r.match(X(s,e))||[])[0],a&&(i=r.substr(0,r.indexOf(a)),i.length>0&&h(e).unusedInput.push(i),r=r.slice(r.indexOf(a)+a.length),c+=a.length),Fa[s]?(a?h(e).empty=!1:h(e).unusedTokens.push(s),te(s,a,e)):e._strict&&!a&&h(e).unusedTokens.push(s);h(e).charsLeftOver=l-c,r.length>0&&h(e).unusedInput.push(r),e._a[lt]<=12&&!0===h(e).bigHour&&e._a[lt]>0&&(h(e).bigHour=void 0),h(e).parsedDateParts=e._a.slice(0),h(e).meridiem=e._meridiem,e._a[lt]=ho(e._locale,e._a[lt],e._meridiem),uo(e),to(e)}function ho(e,o,n){var a;return null==n?o:null!=e.meridiemHour?e.meridiemHour(o,n):null!=e.isPM?(a=e.isPM(n),a&&o<12&&(o+=12),a||12!==o||(o=0),o):o}function go(e){var o,n,a,t,s;if(0===e._f.length)return h(e).invalidFormat=!0,void(e._d=new Date(NaN));for(t=0;t<e._f.length;t++)s=0,o=f({},e),null!=e._useUTC&&(o._useUTC=e._useUTC),o._f=e._f[t],mo(o),g(o)&&(s+=h(o).charsLeftOver,s+=10*h(o).unusedTokens.length,h(o).score=s,(null==a||s<a)&&(a=s,n=o));p(e,n||o)}function yo(e){if(!e._d){var o=M(e._i);e._a=c([o.year,o.month,o.day||o.date,o.hour,o.minute,o.second,o.millisecond],function(e){return e&&parseInt(e,10)}),uo(e)}}function fo(e){var o=new b(to(bo(e)));return o._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function bo(e){var o=e._i,n=e._f;return e._locale=e._locale||no(e._l),null===o||void 0===n&&""===o?y({nullInput:!0}):("string"==typeof o&&(e._i=o=e._locale.preparse(o)),v(o)?new b(to(o)):(l(o)?e._d=o:a(n)?go(e):n?mo(e):vo(e),g(e)||(e._d=null),e))}function vo(e){var n=e._i;i(n)?e._d=new Date(o.now()):l(n)?e._d=new Date(n.valueOf()):"string"==typeof n?ro(e):a(n)?(e._a=c(n.slice(0),function(e){return parseInt(e,10)}),uo(e)):t(n)?yo(e):r(n)?e._d=new Date(n):o.createFromInputFallback(e)}function wo(e,o,n,i,r){var l={};return!0!==n&&!1!==n||(i=n,n=void 0),(t(e)&&s(e)||a(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=r,l._l=n,l._i=e,l._f=o,l._strict=i,fo(l)}function ko(e,o,n,a){return wo(e,o,n,a,!1)}function qo(e,o){var n,t;if(1===o.length&&a(o[0])&&(o=o[0]),!o.length)return ko();for(n=o[0],t=1;t<o.length;++t)o[t].isValid()&&!o[t][e](n)||(n=o[t]);return n}function jo(){return qo("isBefore",[].slice.call(arguments,0))}function xo(){return qo("isAfter",[].slice.call(arguments,0))}function So(e){for(var o in e)if(-1===Ut.indexOf(o)||null!=e[o]&&isNaN(e[o]))return!1;for(var n=!1,a=0;a<Ut.length;++a)if(e[Ut[a]]){if(n)return!1;parseFloat(e[Ut[a]])!==k(e[Ut[a]])&&(n=!0)}return!0}function To(){return this._isValid}function Co(){return Go(NaN)}function Po(e){var o=M(e),n=o.year||0,a=o.quarter||0,t=o.month||0,s=o.week||0,i=o.day||0,r=o.hour||0,l=o.minute||0,c=o.second||0,u=o.millisecond||0;this._isValid=So(o),this._milliseconds=+u+1e3*c+6e4*l+1e3*r*60*60,this._days=+i+7*s,this._months=+t+3*a+12*n,this._data={},this._locale=no(),this._bubble()}function Do(e){return e instanceof Po}function Io(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function zo(e,o){Y(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+G(~~(e/60),2)+o+G(~~e%60,2)})}function Eo(e,o){var n=(o||"").match(e);if(null===n)return null;var a=n[n.length-1]||[],t=(a+"").match(Zt)||["-",0,0],s=60*t[1]+k(t[2]);return 0===s?0:"+"===t[0]?s:-s}function Ao(e,n){var a,t;return n._isUTC?(a=n.clone(),t=(v(e)||l(e)?e.valueOf():ko(e).valueOf())-a.valueOf(),a._d.setTime(a._d.valueOf()+t),o.updateOffset(a,!1),a):ko(e).local()}function Lo(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Wo(e,n,a){var t,s=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Eo(et,e)))return this}else Math.abs(e)<16&&!a&&(e*=60);return!this._isUTC&&n&&(t=Lo(this)),this._offset=e,this._isUTC=!0,null!=t&&this.add(t,"m"),s!==e&&(!n||this._changeInProgress?$o(this,Go(e-s,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,o.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?s:Lo(this)}function Oo(e,o){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,o),this):-this.utcOffset()}function Ro(e){return this.utcOffset(0,e)}function Mo(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Lo(this),"m")),this}function Fo(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Eo(Xa,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this}function _o(e){return!!this.isValid()&&(e=e?ko(e).utcOffset():0,(this.utcOffset()-e)%60===0)}function Bo(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function No(){if(!i(this._isDSTShifted))return this._isDSTShifted;var e={};if(f(e,this),e=bo(e),e._a){var o=e._isUTC?d(e._a):ko(e._a);this._isDSTShifted=this.isValid()&&q(e._a,o.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Ho(){return!!this.isValid()&&!this._isUTC}function Uo(){return!!this.isValid()&&this._isUTC}function Zo(){return!!this.isValid()&&this._isUTC&&0===this._offset}function Go(e,o){var n,a,t,s=e,i=null;return Do(e)?s={ms:e._milliseconds,d:e._days,M:e._months}:r(e)?(s={},o?s[o]=e:s.milliseconds=e):(i=Gt.exec(e))?(n="-"===i[1]?-1:1,s={y:0,d:k(i[rt])*n,h:k(i[lt])*n,m:k(i[ct])*n,s:k(i[ut])*n,ms:k(Io(1e3*i[pt]))*n}):(i=Yt.exec(e))?(n="-"===i[1]?-1:1,s={y:Yo(i[2],n),M:Yo(i[3],n),w:Yo(i[4],n),d:Yo(i[5],n),h:Yo(i[6],n),m:Yo(i[7],n),s:Yo(i[8],n)}):null==s?s={}:"object"==typeof s&&("from"in s||"to"in s)&&(t=Ko(ko(s.from),ko(s.to)),s={},s.ms=t.milliseconds,s.M=t.months),a=new Po(s),Do(e)&&u(e,"_locale")&&(a._locale=e._locale),a}function Yo(e,o){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*o}function Vo(e,o){var n={milliseconds:0,months:0};return n.months=o.month()-e.month()+12*(o.year()-e.year()),e.clone().add(n.months,"M").isAfter(o)&&--n.months,n.milliseconds=+o-+e.clone().add(n.months,"M"),n}function Ko(e,o){var n;return e.isValid()&&o.isValid()?(o=Ao(o,e),e.isBefore(o)?n=Vo(e,o):(n=Vo(o,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function Jo(e,o){return function(n,a){var t,s;return null===a||isNaN(+a)||(S(o,"moment()."+o+"(period, number) is deprecated. Please use moment()."+o+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),s=n,n=a,a=s),n="string"==typeof n?+n:n,t=Go(n,a),$o(this,t,e),this}}function $o(e,n,a,t){var s=n._milliseconds,i=Io(n._days),r=Io(n._months);e.isValid()&&(t=null==t||t,s&&e._d.setTime(e._d.valueOf()+s*a),i&&H(e,"Date",N(e,"Date")+i*a),r&&ue(e,N(e,"Month")+r*a),t&&o.updateOffset(e,i||r))}function Qo(e,o){var n=e.diff(o,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"}function Xo(e,n){var a=e||ko(),t=Ao(a,this).startOf("day"),s=o.calendarFormat(this,t)||"sameElse",i=n&&(T(n[s])?n[s].call(this,a):n[s]);return this.format(i||this.localeData().calendar(s,this,ko(a)))}function en(){return new b(this)}function on(e,o){var n=v(e)?e:ko(e);return!(!this.isValid()||!n.isValid())&&(o=R(i(o)?"millisecond":o),"millisecond"===o?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(o).valueOf())}function nn(e,o){var n=v(e)?e:ko(e);return!(!this.isValid()||!n.isValid())&&(o=R(i(o)?"millisecond":o),"millisecond"===o?this.valueOf()<n.valueOf():this.clone().endOf(o).valueOf()<n.valueOf())}function an(e,o,n,a){return a=a||"()",("("===a[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===a[1]?this.isBefore(o,n):!this.isAfter(o,n))}function tn(e,o){var n,a=v(e)?e:ko(e);return!(!this.isValid()||!a.isValid())&&(o=R(o||"millisecond"),"millisecond"===o?this.valueOf()===a.valueOf():(n=a.valueOf(),this.clone().startOf(o).valueOf()<=n&&n<=this.clone().endOf(o).valueOf()))}function sn(e,o){return this.isSame(e,o)||this.isAfter(e,o)}function rn(e,o){return this.isSame(e,o)||this.isBefore(e,o)}function ln(e,o,n){var a,t,s,i;return this.isValid()?(a=Ao(e,this),a.isValid()?(t=6e4*(a.utcOffset()-this.utcOffset()),o=R(o),"year"===o||"month"===o||"quarter"===o?(i=cn(this,a),"quarter"===o?i/=3:"year"===o&&(i/=12)):(s=this-a,i="second"===o?s/1e3:"minute"===o?s/6e4:"hour"===o?s/36e5:"day"===o?(s-t)/864e5:"week"===o?(s-t)/6048e5:s),n?i:w(i)):NaN):NaN}function cn(e,o){var n,a,t=12*(o.year()-e.year())+(o.month()-e.month()),s=e.clone().add(t,"months");return o-s<0?(n=e.clone().add(t-1,"months"),a=(o-s)/(s-n)):(n=e.clone().add(t+1,"months"),a=(o-s)/(n-s)),-(t+a)||0}function un(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function pn(){if(!this.isValid())return null;var e=this.clone().utc();return e.year()<0||e.year()>9999?J(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):T(Date.prototype.toISOString)?this.toDate().toISOString():J(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function dn(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",o="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",o="Z");var n="["+e+'("]',a=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",t=o+'[")]';return this.format(n+a+"-MM-DD[T]HH:mm:ss.SSS"+t)}function mn(e){e||(e=this.isUtc()?o.defaultFormatUtc:o.defaultFormat);var n=J(this,e);return this.localeData().postformat(n)}function hn(e,o){return this.isValid()&&(v(e)&&e.isValid()||ko(e).isValid())?Go({to:this,from:e}).locale(this.locale()).humanize(!o):this.localeData().invalidDate()}function gn(e){return this.from(ko(),e)}function yn(e,o){return this.isValid()&&(v(e)&&e.isValid()||ko(e).isValid())?Go({from:this,to:e}).locale(this.locale()).humanize(!o):this.localeData().invalidDate()}function fn(e){return this.to(ko(),e)}function bn(e){var o;return void 0===e?this._locale._abbr:(o=no(e),null!=o&&(this._locale=o),this)}function vn(){return this._locale}function wn(e){switch(e=R(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function kn(e){return e=R(e),void 0===e||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function qn(){return this._d.valueOf()-6e4*(this._offset||0)}function jn(){return Math.floor(this.valueOf()/1e3)}function xn(){return new Date(this.valueOf())}function Sn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Tn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Cn(){return this.isValid()?this.toISOString():null}function Pn(){return g(this)}function Dn(){return p({},h(this))}function In(){return h(this).overflow}function zn(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function En(e,o){Y(0,[e,e.length],0,o)}function An(e){return Rn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Ln(e){return Rn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Wn(){return xe(this.year(),1,4)}function On(){var e=this.localeData()._week;return xe(this.year(),e.dow,e.doy)}function Rn(e,o,n,a,t){var s;return null==e?je(this,a,t).year:(s=xe(e,a,t),o>s&&(o=s),Mn.call(this,e,o,n,a,t))}function Mn(e,o,n,a,t){var s=qe(e,o,n,a,t),i=we(s.year,0,s.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}function Fn(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function _n(e){var o=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?o:this.add(e-o,"d")}function Bn(e,o){o[pt]=k(1e3*("0."+e))}function Nn(){return this._isUTC?"UTC":""}function Hn(){return this._isUTC?"Coordinated Universal Time":""}function Un(e){return ko(1e3*e)}function Zn(){return ko.apply(null,arguments).parseZone()}function Gn(e){return e}function Yn(e,o,n,a){var t=no(),s=d().set(a,o);return t[n](s,e)}function Vn(e,o,n){if(r(e)&&(o=e,e=void 0),e=e||"",null!=o)return Yn(e,o,n,"month");var a,t=[];for(a=0;a<12;a++)t[a]=Yn(e,a,n,"month");return t}function Kn(e,o,n,a){"boolean"==typeof e?(r(o)&&(n=o,o=void 0),o=o||""):(o=e,n=o,e=!1,r(o)&&(n=o,o=void 0),o=o||"");var t=no(),s=e?t._week.dow:0;if(null!=n)return Yn(o,(n+s)%7,a,"day");var i,l=[];for(i=0;i<7;i++)l[i]=Yn(o,(i+s)%7,a,"day");return l}function Jn(e,o){return Vn(e,o,"months")}function $n(e,o){return Vn(e,o,"monthsShort")}function Qn(e,o,n){return Kn(e,o,n,"weekdays")}function Xn(e,o,n){return Kn(e,o,n,"weekdaysShort")}function ea(e,o,n){return Kn(e,o,n,"weekdaysMin")}function oa(){var e=this._data;return this._milliseconds=ts(this._milliseconds),this._days=ts(this._days),this._months=ts(this._months),e.milliseconds=ts(e.milliseconds),e.seconds=ts(e.seconds),e.minutes=ts(e.minutes),e.hours=ts(e.hours),e.months=ts(e.months),e.years=ts(e.years),this}function na(e,o,n,a){var t=Go(o,n);return e._milliseconds+=a*t._milliseconds,e._days+=a*t._days,e._months+=a*t._months,e._bubble()}function aa(e,o){return na(this,e,o,1)}function ta(e,o){return na(this,e,o,-1)}function sa(e){return e<0?Math.floor(e):Math.ceil(e)}function ia(){var e,o,n,a,t,s=this._milliseconds,i=this._days,r=this._months,l=this._data;return s>=0&&i>=0&&r>=0||s<=0&&i<=0&&r<=0||(s+=864e5*sa(la(r)+i),i=0,r=0),l.milliseconds=s%1e3,e=w(s/1e3),l.seconds=e%60,o=w(e/60),l.minutes=o%60,n=w(o/60),l.hours=n%24,i+=w(n/24),t=w(ra(i)),r+=t,i-=sa(la(t)),a=w(r/12),r%=12,l.days=i,l.months=r,l.years=a,this}function ra(e){return 4800*e/146097}function la(e){return 146097*e/4800}function ca(e){if(!this.isValid())return NaN;var o,n,a=this._milliseconds;if("month"===(e=R(e))||"year"===e)return o=this._days+a/864e5,n=this._months+ra(o),"month"===e?n:n/12;switch(o=this._days+Math.round(la(this._months)),e){case"week":return o/7+a/6048e5;case"day":return o+a/864e5;case"hour":return 24*o+a/36e5;case"minute":return 1440*o+a/6e4;case"second":return 86400*o+a/1e3;case"millisecond":return Math.floor(864e5*o)+a;default:throw new Error("Unknown unit "+e)}}function ua(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12):NaN}function pa(e){return function(){return this.as(e)}}function da(e){return e=R(e),this.isValid()?this[e+"s"]():NaN}function ma(e){return function(){return this.isValid()?this._data[e]:NaN}}function ha(){return w(this.days()/7)}function ga(e,o,n,a,t){return t.relativeTime(o||1,!!n,e,a)}function ya(e,o,n){var a=Go(e).abs(),t=ws(a.as("s")),s=ws(a.as("m")),i=ws(a.as("h")),r=ws(a.as("d")),l=ws(a.as("M")),c=ws(a.as("y")),u=t<=ks.ss&&["s",t]||t<ks.s&&["ss",t]||s<=1&&["m"]||s<ks.m&&["mm",s]||i<=1&&["h"]||i<ks.h&&["hh",i]||r<=1&&["d"]||r<ks.d&&["dd",r]||l<=1&&["M"]||l<ks.M&&["MM",l]||c<=1&&["y"]||["yy",c];return u[2]=o,u[3]=+e>0,u[4]=n,ga.apply(null,u)}function fa(e){return void 0===e?ws:"function"==typeof e&&(ws=e,!0)}function ba(e,o){return void 0!==ks[e]&&(void 0===o?ks[e]:(ks[e]=o,"s"===e&&(ks.ss=o-1),!0))}function va(e){if(!this.isValid())return this.localeData().invalidDate();var o=this.localeData(),n=ya(this,!e,o);return e&&(n=o.pastFuture(+this,n)),o.postformat(n)}function wa(){if(!this.isValid())return this.localeData().invalidDate();var e,o,n,a=qs(this._milliseconds)/1e3,t=qs(this._days),s=qs(this._months);e=w(a/60),o=w(e/60),a%=60,e%=60,n=w(s/12),s%=12;var i=n,r=s,l=t,c=o,u=e,p=a,d=this.asSeconds();return d?(d<0?"-":"")+"P"+(i?i+"Y":"")+(r?r+"M":"")+(l?l+"D":"")+(c||u||p?"T":"")+(c?c+"H":"")+(u?u+"M":"")+(p?p+"S":""):"P0D"}var ka,qa;qa=Array.prototype.some?Array.prototype.some:function(e){for(var o=Object(this),n=o.length>>>0,a=0;a<n;a++)if(a in o&&e.call(this,o[a],a,o))return!0;return!1};var ja=qa,xa=o.momentProperties=[],Sa=!1,Ta={};o.suppressDeprecationWarnings=!1,o.deprecationHandler=null;var Ca;Ca=Object.keys?Object.keys:function(e){var o,n=[];for(o in e)u(e,o)&&n.push(o);return n};var Pa,Da=Ca,Ia={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},za={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Ea=/\d{1,2}/,Aa={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},La={},Wa={},Oa=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Ra=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Ma={},Fa={},_a=/\d/,Ba=/\d\d/,Na=/\d{3}/,Ha=/\d{4}/,Ua=/[+-]?\d{6}/,Za=/\d\d?/,Ga=/\d\d\d\d?/,Ya=/\d\d\d\d\d\d?/,Va=/\d{1,3}/,Ka=/\d{1,4}/,Ja=/[+-]?\d{1,6}/,$a=/\d+/,Qa=/[+-]?\d+/,Xa=/Z|[+-]\d\d:?\d\d/gi,et=/Z|[+-]\d\d(?::?\d\d)?/gi,ot=/[+-]?\d+(\.\d{1,3})?/,nt=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,at={},tt={},st=0,it=1,rt=2,lt=3,ct=4,ut=5,pt=6,dt=7,mt=8;Pa=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var o;for(o=0;o<this.length;++o)if(this[o]===e)return o;return-1};var ht=Pa;Y("M",["MM",2],"Mo",function(){return this.month()+1}),Y("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),Y("MMMM",0,0,function(e){return this.localeData().months(this,e)}),O("month","M"),F("month",8),Q("M",Za),Q("MM",Za,Ba),Q("MMM",function(e,o){return o.monthsShortRegex(e)}),Q("MMMM",function(e,o){return o.monthsRegex(e)}),ne(["M","MM"],function(e,o){o[it]=k(e)-1}),ne(["MMM","MMMM"],function(e,o,n,a){var t=n._locale.monthsParse(e,a,n._strict);null!=t?o[it]=t:h(n).invalidMonth=e});var gt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,yt="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ft="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),bt=nt,vt=nt;Y("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),Y(0,["YY",2],0,function(){return this.year()%100}),Y(0,["YYYY",4],0,"year"),Y(0,["YYYYY",5],0,"year"),Y(0,["YYYYYY",6,!0],0,"year"),O("year","y"),F("year",1),Q("Y",Qa),Q("YY",Za,Ba),Q("YYYY",Ka,Ha),Q("YYYYY",Ja,Ua),Q("YYYYYY",Ja,Ua),ne(["YYYYY","YYYYYY"],st),ne("YYYY",function(e,n){n[st]=2===e.length?o.parseTwoDigitYear(e):k(e)}),ne("YY",function(e,n){n[st]=o.parseTwoDigitYear(e)}),ne("Y",function(e,o){o[st]=parseInt(e,10)}),o.parseTwoDigitYear=function(e){return k(e)+(k(e)>68?1900:2e3)};var wt=B("FullYear",!0);Y("w",["ww",2],"wo","week"),Y("W",["WW",2],"Wo","isoWeek"),O("week","w"),O("isoWeek","W"),F("week",5),F("isoWeek",5),Q("w",Za),Q("ww",Za,Ba),Q("W",Za),Q("WW",Za,Ba),ae(["w","ww","W","WW"],function(e,o,n,a){o[a.substr(0,1)]=k(e)});var kt={dow:0,doy:6};Y("d",0,"do","day"),Y("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),Y("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),Y("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),Y("e",0,0,"weekday"),Y("E",0,0,"isoWeekday"),O("day","d"),O("weekday","e"),O("isoWeekday","E"),F("day",11),F("weekday",11),F("isoWeekday",11),Q("d",Za),Q("e",Za),Q("E",Za),Q("dd",function(e,o){return o.weekdaysMinRegex(e)}),Q("ddd",function(e,o){return o.weekdaysShortRegex(e)}),Q("dddd",function(e,o){return o.weekdaysRegex(e)}),ae(["dd","ddd","dddd"],function(e,o,n,a){var t=n._locale.weekdaysParse(e,a,n._strict);null!=t?o.d=t:h(n).invalidWeekday=e}),ae(["d","e","E"],function(e,o,n,a){o[a]=k(e)});var qt="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),jt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),xt="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),St=nt,Tt=nt,Ct=nt;Y("H",["HH",2],0,"hour"),Y("h",["hh",2],0,Ue),Y("k",["kk",2],0,Ze),Y("hmm",0,0,function(){return""+Ue.apply(this)+G(this.minutes(),2)}),Y("hmmss",0,0,function(){return""+Ue.apply(this)+G(this.minutes(),2)+G(this.seconds(),2)}),Y("Hmm",0,0,function(){return""+this.hours()+G(this.minutes(),2)}),Y("Hmmss",0,0,function(){return""+this.hours()+G(this.minutes(),2)+G(this.seconds(),2)}),Ge("a",!0),Ge("A",!1),O("hour","h"),F("hour",13),Q("a",Ye),Q("A",Ye),Q("H",Za),Q("h",Za),Q("k",Za),Q("HH",Za,Ba),Q("hh",Za,Ba),Q("kk",Za,Ba),Q("hmm",Ga),Q("hmmss",Ya),Q("Hmm",Ga),Q("Hmmss",Ya),ne(["H","HH"],lt),ne(["k","kk"],function(e,o,n){var a=k(e);o[lt]=24===a?0:a}),ne(["a","A"],function(e,o,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ne(["h","hh"],function(e,o,n){o[lt]=k(e),h(n).bigHour=!0}),ne("hmm",function(e,o,n){var a=e.length-2;o[lt]=k(e.substr(0,a)),o[ct]=k(e.substr(a)),h(n).bigHour=!0}),ne("hmmss",function(e,o,n){var a=e.length-4,t=e.length-2;o[lt]=k(e.substr(0,a)),o[ct]=k(e.substr(a,2)),o[ut]=k(e.substr(t)),h(n).bigHour=!0}),ne("Hmm",function(e,o,n){var a=e.length-2;o[lt]=k(e.substr(0,a)),o[ct]=k(e.substr(a))}),ne("Hmmss",function(e,o,n){var a=e.length-4,t=e.length-2;o[lt]=k(e.substr(0,a)),o[ct]=k(e.substr(a,2)),o[ut]=k(e.substr(t))});var Pt,Dt=/[ap]\.?m?\.?/i,It=B("Hours",!0),zt={calendar:Ia,longDateFormat:za,invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:Ea,relativeTime:Aa,months:yt,monthsShort:ft,week:kt,weekdays:qt,weekdaysMin:xt,weekdaysShort:jt,meridiemParse:Dt},Et={},At={},Lt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Wt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ot=/Z|[+-]\d\d(?::?\d\d)?/,Rt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Mt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ft=/^\/?Date\((\-?\d+)/i,_t=/^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;o.createFromInputFallback=x("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),o.ISO_8601=function(){},o.RFC_2822=function(){};var Bt=x("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=ko.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:y()}),Nt=x("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=ko.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:y()}),Ht=function(){return Date.now?Date.now():+new Date},Ut=["year","quarter","month","week","day","hour","minute","second","millisecond"];zo("Z",":"),zo("ZZ",""),Q("Z",et),Q("ZZ",et),ne(["Z","ZZ"],function(e,o,n){n._useUTC=!0,n._tzm=Eo(et,e)});var Zt=/([\+\-]|\d\d)/gi;o.updateOffset=function(){};var Gt=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Yt=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Go.fn=Po.prototype,Go.invalid=Co;var Vt=Jo(1,"add"),Kt=Jo(-1,"subtract");o.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",o.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Jt=x("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});Y(0,["gg",2],0,function(){return this.weekYear()%100}),Y(0,["GG",2],0,function(){return this.isoWeekYear()%100}),En("gggg","weekYear"),En("ggggg","weekYear"),En("GGGG","isoWeekYear"),En("GGGGG","isoWeekYear"),O("weekYear","gg"),O("isoWeekYear","GG"),F("weekYear",1),F("isoWeekYear",1),Q("G",Qa),Q("g",Qa),Q("GG",Za,Ba),Q("gg",Za,Ba),Q("GGGG",Ka,Ha),Q("gggg",Ka,Ha),Q("GGGGG",Ja,Ua),Q("ggggg",Ja,Ua),ae(["gggg","ggggg","GGGG","GGGGG"],function(e,o,n,a){o[a.substr(0,2)]=k(e)}),ae(["gg","GG"],function(e,n,a,t){n[t]=o.parseTwoDigitYear(e)}),Y("Q",0,"Qo","quarter"),O("quarter","Q"),F("quarter",7),Q("Q",_a),ne("Q",function(e,o){o[it]=3*(k(e)-1)}),Y("D",["DD",2],"Do","date"),O("date","D"),F("date",9),Q("D",Za),Q("DD",Za,Ba),Q("Do",function(e,o){return e?o._dayOfMonthOrdinalParse||o._ordinalParse:o._dayOfMonthOrdinalParseLenient}),ne(["D","DD"],rt),ne("Do",function(e,o){o[rt]=k(e.match(Za)[0],10)});var $t=B("Date",!0);Y("DDD",["DDDD",3],"DDDo","dayOfYear"),O("dayOfYear","DDD"),F("dayOfYear",4),Q("DDD",Va),Q("DDDD",Na),ne(["DDD","DDDD"],function(e,o,n){n._dayOfYear=k(e)}),Y("m",["mm",2],0,"minute"),O("minute","m"),F("minute",14),Q("m",Za),Q("mm",Za,Ba),ne(["m","mm"],ct);var Qt=B("Minutes",!1);Y("s",["ss",2],0,"second"),O("second","s"),F("second",15),Q("s",Za),Q("ss",Za,Ba),ne(["s","ss"],ut);var Xt=B("Seconds",!1);Y("S",0,0,function(){return~~(this.millisecond()/100)}),Y(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),Y(0,["SSS",3],0,"millisecond"),Y(0,["SSSS",4],0,function(){return 10*this.millisecond()}),Y(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),Y(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),Y(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),Y(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),Y(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),O("millisecond","ms"),F("millisecond",16),Q("S",Va,_a),Q("SS",Va,Ba),Q("SSS",Va,Na);var es;for(es="SSSS";es.length<=9;es+="S")Q(es,$a);for(es="S";es.length<=9;es+="S")ne(es,Bn);var os=B("Milliseconds",!1);Y("z",0,0,"zoneAbbr"),Y("zz",0,0,"zoneName");var ns=b.prototype;ns.add=Vt,ns.calendar=Xo,ns.clone=en,ns.diff=ln,ns.endOf=kn,ns.format=mn,ns.from=hn,ns.fromNow=gn,ns.to=yn,ns.toNow=fn,ns.get=U,ns.invalidAt=In,ns.isAfter=on,ns.isBefore=nn,ns.isBetween=an,ns.isSame=tn,ns.isSameOrAfter=sn,ns.isSameOrBefore=rn,ns.isValid=Pn,ns.lang=Jt,ns.locale=bn,ns.localeData=vn,ns.max=Nt,ns.min=Bt,ns.parsingFlags=Dn,ns.set=Z,ns.startOf=wn,ns.subtract=Kt,ns.toArray=Sn,ns.toObject=Tn,ns.toDate=xn,ns.toISOString=pn,ns.inspect=dn,ns.toJSON=Cn,ns.toString=un,ns.unix=jn,ns.valueOf=qn,ns.creationData=zn,ns.year=wt,ns.isLeapYear=be,ns.weekYear=An,ns.isoWeekYear=Ln,ns.quarter=ns.quarters=Fn,ns.month=pe,ns.daysInMonth=de,ns.week=ns.weeks=Pe,ns.isoWeek=ns.isoWeeks=De,ns.weeksInYear=On,ns.isoWeeksInYear=Wn,ns.date=$t,ns.day=ns.days=Re,ns.weekday=Me,ns.isoWeekday=Fe,ns.dayOfYear=_n,ns.hour=ns.hours=It,ns.minute=ns.minutes=Qt,ns.second=ns.seconds=Xt,ns.millisecond=ns.milliseconds=os,ns.utcOffset=Wo,ns.utc=Ro,ns.local=Mo,ns.parseZone=Fo,ns.hasAlignedHourOffset=_o,ns.isDST=Bo,ns.isLocal=Ho,ns.isUtcOffset=Uo,ns.isUtc=Zo,ns.isUTC=Zo,ns.zoneAbbr=Nn,ns.zoneName=Hn,ns.dates=x("dates accessor is deprecated. Use date instead.",$t),ns.months=x("months accessor is deprecated. Use month instead",pe),ns.years=x("years accessor is deprecated. Use year instead",wt),ns.zone=x("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Oo),ns.isDSTShifted=x("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",No);var as=D.prototype;as.calendar=I,as.longDateFormat=z,as.invalidDate=E,as.ordinal=A,as.preparse=Gn,as.postformat=Gn,as.relativeTime=L,as.pastFuture=W,as.set=C,as.months=ie,as.monthsShort=re,as.monthsParse=ce,as.monthsRegex=he,as.monthsShortRegex=me,as.week=Se,as.firstDayOfYear=Ce,as.firstDayOfWeek=Te,as.weekdays=Ee,as.weekdaysMin=Le,as.weekdaysShort=Ae,as.weekdaysParse=Oe,as.weekdaysRegex=_e,as.weekdaysShortRegex=Be,as.weekdaysMinRegex=Ne,as.isPM=Ve,as.meridiem=Ke,Xe("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var o=e%10;return e+(1===k(e%100/10)?"th":1===o?"st":2===o?"nd":3===o?"rd":"th")}}),o.lang=x("moment.lang is deprecated. Use moment.locale instead.",Xe),o.langData=x("moment.langData is deprecated. Use moment.localeData instead.",no);var ts=Math.abs,ss=pa("ms"),is=pa("s"),rs=pa("m"),ls=pa("h"),cs=pa("d"),us=pa("w"),ps=pa("M"),ds=pa("y"),ms=ma("milliseconds"),hs=ma("seconds"),gs=ma("minutes"),ys=ma("hours"),fs=ma("days"),bs=ma("months"),vs=ma("years"),ws=Math.round,ks={ss:44,s:45,m:45,h:22,d:26,M:11},qs=Math.abs,js=Po.prototype;return js.isValid=To,js.abs=oa,js.add=aa,js.subtract=ta,js.as=ca,js.asMilliseconds=ss,js.asSeconds=is,js.asMinutes=rs,js.asHours=ls,js.asDays=cs,js.asWeeks=us,js.asMonths=ps,js.asYears=ds,js.valueOf=ua,js._bubble=ia,js.get=da,js.milliseconds=ms,js.seconds=hs,js.minutes=gs,js.hours=ys,js.days=fs,js.weeks=ha,js.months=bs,js.years=vs,js.humanize=va,js.toISOString=wa,js.toString=wa,js.toJSON=wa,js.locale=bn,js.localeData=vn,js.toIsoString=x("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",wa),js.lang=Jt,Y("X",0,0,"unix"),Y("x",0,0,"valueOf"),Q("x",Qa),Q("X",ot),ne("X",function(e,o,n){n._d=new Date(1e3*parseFloat(e,10))}),ne("x",function(e,o,n){n._d=new Date(k(e))}),o.version="2.18.1",function(e){ka=e}(ko),o.fn=ns,o.min=jo,o.max=xo,o.now=Ht,o.utc=d,o.unix=Un,o.months=Jn,o.isDate=l,o.locale=Xe,o.invalid=y,o.duration=Go,o.isMoment=v,o.weekdays=Qn,o.parseZone=Zn,o.localeData=no,o.isDuration=Do,o.monthsShort=$n,o.weekdaysMin=ea,o.defineLocale=eo,o.updateLocale=oo,o.locales=ao,o.weekdaysShort=Xn,o.normalizeUnits=R,o.relativeTimeRounding=fa,o.relativeTimeThreshold=ba,o.calendarFormat=Qo,o.prototype=ns,o})}).call(o,n(38)(e))},function(e,o,n){"use strict";function a(){}function t(e){try{return e.then}catch(e){return f=e,b}}function s(e,o){try{return e(o)}catch(e){return f=e,b}}function i(e,o,n){try{e(o,n)}catch(e){return f=e,b}}function r(e){if("object"!==typeof this)throw new TypeError("Promises must be constructed via new");if("function"!==typeof e)throw new TypeError("not a function");this._45=0,this._81=0,this._65=null,this._54=null,e!==a&&g(e,this)}function l(e,o,n){return new e.constructor(function(t,s){var i=new r(a);i.then(t,s),c(e,new h(o,n,i))})}function c(e,o){for(;3===e._81;)e=e._65;if(r._10&&r._10(e),0===e._81)return 0===e._45?(e._45=1,void(e._54=o)):1===e._45?(e._45=2,void(e._54=[e._54,o])):void e._54.push(o);u(e,o)}function u(e,o){y(function(){var n=1===e._81?o.onFulfilled:o.onRejected;if(null===n)return void(1===e._81?p(o.promise,e._65):d(o.promise,e._65));var a=s(n,e._65);a===b?d(o.promise,f):p(o.promise,a)})}function p(e,o){if(o===e)return d(e,new TypeError("A promise cannot be resolved with itself."));if(o&&("object"===typeof o||"function"===typeof o)){var n=t(o);if(n===b)return d(e,f);if(n===e.then&&o instanceof r)return e._81=3,e._65=o,void m(e);if("function"===typeof n)return void g(n.bind(o),e)}e._81=1,e._65=o,m(e)}function d(e,o){e._81=2,e._65=o,r._97&&r._97(e,o),m(e)}function m(e){if(1===e._45&&(c(e,e._54),e._54=null),2===e._45){for(var o=0;o<e._54.length;o++)c(e,e._54[o]);e._54=null}}function h(e,o,n){this.onFulfilled="function"===typeof e?e:null,this.onRejected="function"===typeof o?o:null,this.promise=n}function g(e,o){var n=!1,a=i(e,function(e){n||(n=!0,p(o,e))},function(e){n||(n=!0,d(o,e))});n||a!==b||(n=!0,d(o,f))}var y=n(41),f=null,b={};e.exports=r,r._10=null,r._97=null,r._61=a,r.prototype.then=function(e,o){if(this.constructor!==r)return l(this,e,o);var n=new r(a);return c(this,new h(e,o,n)),n}},function(e,o,n){"use strict";function a(e,o,n){this.props=e,this.context=o,this.refs=c,this.updater=n||l}function t(e,o,n){this.props=e,this.context=o,this.refs=c,this.updater=n||l}function s(){}var i=n(11),r=n(2),l=n(28),c=(n(29),n(10));n(1),n(149);a.prototype.isReactComponent={},a.prototype.setState=function(e,o){"object"!==typeof e&&"function"!==typeof e&&null!=e&&i("85"),this.updater.enqueueSetState(this,e),o&&this.updater.enqueueCallback(this,o,"setState")},a.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")};s.prototype=a.prototype,t.prototype=new s,t.prototype.constructor=t,r(t.prototype,a.prototype),t.prototype.isPureReactComponent=!0,e.exports={Component:a,PureComponent:t}},function(e,o,n){"use strict";var a={current:null};e.exports=a},function(e,o,n){"use strict";var a="function"===typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=a},function(e,o,n){"use strict";var a=(n(6),{isMounted:function(e){return!1},enqueueCallback:function(e,o){},enqueueForceUpdate:function(e){},enqueueReplaceState:function(e,o){},enqueueSetState:function(e,o){}});e.exports=a},function(e,o,n){"use strict";var a=!1;e.exports=a},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}function i(e,o){var n={};for(var a in e)o.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}function r(){}function l(e,o){var n={run:function(a){try{var t=e(o.getState(),a);(t!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=t,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}function c(e){var o,c,u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},d=u.getDisplayName,w=void 0===d?function(e){return"ConnectAdvanced("+e+")"}:d,k=u.methodName,q=void 0===k?"connectAdvanced":k,j=u.renderCountProp,x=void 0===j?void 0:j,S=u.shouldHandleStateChanges,T=void 0===S||S,C=u.storeKey,P=void 0===C?"store":C,D=u.withRef,I=void 0!==D&&D,z=i(u,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),E=P+"Subscription",A=b++,L=(o={},o[P]=y.a,o[E]=y.b,o),W=(c={},c[E]=y.b,c);return function(o){m()("function"==typeof o,"You must pass a component to the function returned by connect. Instead received "+JSON.stringify(o));var i=o.displayName||o.name||"Component",c=w(i),u=f({},z,{getDisplayName:w,methodName:q,renderCountProp:x,shouldHandleStateChanges:T,storeKey:P,withRef:I,displayName:c,wrappedComponentName:i,WrappedComponent:o}),d=function(i){function p(e,o){a(this,p);var n=t(this,i.call(this,e,o));return n.version=A,n.state={},n.renderCount=0,n.store=e[P]||o[P],n.propsMode=Boolean(e[P]),n.setWrappedInstance=n.setWrappedInstance.bind(n),m()(n.store,'Could not find "'+P+'" in either the context or props of "'+c+'". Either wrap the root component in a <Provider>, or explicitly pass "'+P+'" as a prop to "'+c+'".'),n.initSelector(),n.initSubscription(),n}return s(p,i),p.prototype.getChildContext=function(){var e,o=this.propsMode?null:this.subscription;return e={},e[E]=o||this.context[E],e},p.prototype.componentDidMount=function(){T&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},p.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},p.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},p.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=r,this.store=null,this.selector.run=r,this.selector.shouldComponentUpdate=!1},p.prototype.getWrappedInstance=function(){return m()(I,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+q+"() call."),this.wrappedInstance},p.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},p.prototype.initSelector=function(){var o=e(this.store.dispatch,u);this.selector=l(o,this.store),this.selector.run(this.props)},p.prototype.initSubscription=function(){if(T){var e=(this.propsMode?this.props:this.context)[E];this.subscription=new g.a(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},p.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(v)):this.notifyNestedSubs()},p.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},p.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},p.prototype.addExtraProps=function(e){if(!I&&!x&&(!this.propsMode||!this.subscription))return e;var o=f({},e);return I&&(o.ref=this.setWrappedInstance),x&&(o[x]=this.renderCount++),this.propsMode&&this.subscription&&(o[E]=this.subscription),o},p.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return n.i(h.createElement)(o,this.addExtraProps(e.props))},p}(h.Component);return d.WrappedComponent=o,d.displayName=c,d.childContextTypes=W,d.contextTypes=L,d.propTypes=L,p()(d,o)}}o.a=c;var u=n(106),p=n.n(u),d=n(121),m=n.n(d),h=n(0),g=(n.n(h),n(162)),y=n(32),f=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},b=0,v={}},function(e,o,n){"use strict";function a(e){return function(o,n){function a(){return t}var t=e(o,n);return a.dependsOnOwnProps=!1,a}}function t(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function s(e,o){return function(o,n){var a=(n.displayName,function(e,o){return a.dependsOnOwnProps?a.mapToProps(e,o):a.mapToProps(e)});return a.dependsOnOwnProps=!0,a.mapToProps=function(o,n){a.mapToProps=e,a.dependsOnOwnProps=t(e);var s=a(o,n);return"function"===typeof s&&(a.mapToProps=s,a.dependsOnOwnProps=t(s),s=a(o,n)),s},a}}o.b=a,o.a=s;n(33)},function(e,o,n){"use strict";n.d(o,"b",function(){return s}),n.d(o,"a",function(){return i});var a=n(34),t=n.n(a),s=t.a.shape({trySubscribe:t.a.func.isRequired,tryUnsubscribe:t.a.func.isRequired,notifyNestedSubs:t.a.func.isRequired,isSubscribed:t.a.func.isRequired}),i=t.a.shape({subscribe:t.a.func.isRequired,dispatch:t.a.func.isRequired,getState:t.a.func.isRequired})},function(e,o,n){"use strict";n(14),n(15)},function(e,o,n){e.exports=n(164)()},function(e,o,n){"use strict";function a(){for(var e=arguments.length,o=Array(e),n=0;n<e;n++)o[n]=arguments[n];return 0===o.length?function(e){return e}:1===o.length?o[0]:o.reduce(function(e,o){return function(){return e(o.apply(void 0,arguments))}})}o.a=a},function(e,o,n){"use strict";function a(e,o,s){function l(){b===f&&(b=f.slice())}function c(){return y}function u(e){if("function"!==typeof e)throw new Error("Expected listener to be a function.");var o=!0;return l(),b.push(e),function(){if(o){o=!1,l();var n=b.indexOf(e);b.splice(n,1)}}}function p(e){if(!n.i(t.a)(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if("undefined"===typeof e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(v)throw new Error("Reducers may not dispatch actions.");try{v=!0,y=g(y,e)}finally{v=!1}for(var o=f=b,a=0;a<o.length;a++){(0,o[a])()}return e}function d(e){if("function"!==typeof e)throw new Error("Expected the nextReducer to be a function.");g=e,p({type:r.INIT})}function m(){var e,o=u;return e={subscribe:function(e){function n(){e.next&&e.next(c())}if("object"!==typeof e)throw new TypeError("Expected the observer to be an object.");return n(),{unsubscribe:o(n)}}},e[i.a]=function(){return this},e}var h;if("function"===typeof o&&"undefined"===typeof s&&(s=o,o=void 0),"undefined"!==typeof s){if("function"!==typeof s)throw new Error("Expected the enhancer to be a function.");return s(a)(e,o)}if("function"!==typeof e)throw new Error("Expected the reducer to be a function.");var g=e,y=o,f=[],b=f,v=!1;return p({type:r.INIT}),h={dispatch:p,subscribe:u,getState:c,replaceReducer:d},h[i.a]=m,h}n.d(o,"a",function(){return r}),o.b=a;var t=n(14),s=n(171),i=n.n(s),r={INIT:"@@redux/INIT"}},function(e,o,n){"use strict"},function(e,o){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var a=n(0),t=n.n(a),s=n(154),i=n.n(s),r=n(3),l=n(80),c=n(74),u=n(63),p=n(58),d=n(84),m=(n.n(d),n(83)),h=(n.n(m),n(13)),g=n(17),y=n(59),f=n.i(l.a)();window.loadApp=function(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"root",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.a;console.log("received from hugo",{appData:e}),i.a.render(t.a.createElement(r.a,{store:f},t.a.createElement(a,{app:e})),document.getElementById(o)),f.dispatch(n.i(h.a)(n.i(y.a)(e)))},window.loadListItem=function(e,o){var a=o.permalink;console.log("list item received from hugo",{index:e,permalink:a}),f.dispatch(n.i(g.a)({index:e,permalink:a}))},n.i(u.a)(),window.multiple=function(){window.module=n(175)},window.single=function(){window.module=n(177)},window.page=function(){window.module=n(176)},p.a.isDevelopment()&&(window.location.href.match(/single/)?window.single():window.location.href.match(/page/)?window.page():window.multiple(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"./fixtures/index.data.json";console.log("loading from",{path:e}),window.loadApp(window.module)}())},function(e,o,n){"use strict";"undefined"===typeof Promise&&(n(132).enable(),window.Promise=n(131)),n(174),Object.assign=n(2)},function(e,o,n){"use strict";(function(o){function n(e){i.length||(s(),r=!0),i[i.length]=e}function a(){for(;l<i.length;){var e=l;if(l+=1,i[e].call(),l>c){for(var o=0,n=i.length-l;o<n;o++)i[o]=i[o+l];i.length-=l,l=0}}i.length=0,l=0,r=!1}function t(e){return function(){function o(){clearTimeout(n),clearInterval(a),e()}var n=setTimeout(o,0),a=setInterval(o,50)}}e.exports=n;var s,i=[],r=!1,l=0,c=1024,u="undefined"!==typeof o?o:self,p=u.MutationObserver||u.WebKitMutationObserver;s="function"===typeof p?function(e){var o=1,n=new p(e),a=document.createTextNode("");return n.observe(a,{characterData:!0}),function(){o=-o,a.data=o}}(a):t(a),n.requestFlush=s,n.makeRequestCallFromTimer=t}).call(o,n(16))},function(e,o,n){"use strict";function a(e){var o=e.item,n=void 0===o?i:o,a=n.title,t=n.content;return s.a.createElement("article",null,s.a.createElement("header",null,s.a.createElement("h1",null,a)),s.a.createElement("section",{dangerouslySetInnerHTML:{__html:t}}),s.a.createElement("footer",null))}o.a=a;var t=n(0),s=n.n(t),i={}},function(e,o,n){"use strict";var a=n(3),t=n(42);o.a=n.i(a.b)(function(e){return{item:e.content.current}},null)(t.a)},function(e,o,n){"use strict";var a=n(43);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";var a=n(0),t=n.n(a),s=n(53),i=n(57),r=function(e){return e.isOne?t.a.createElement(i.a,null):t.a.createElement(s.a,null)};o.a=r},function(e,o,n){"use strict";var a=n(3),t=n(45);o.a=n.i(a.b)(function(e){return{isOne:0===e.content.all.length}},null)(t.a)},function(e,o,n){"use strict";function a(e){var o=e.shortname,n=e.identifier;return o&&n?s.a.createElement(r.a,{shortname:o,identifier:n}):null}o.a=a;var t=n(0),s=n.n(t),i=n(135),r=n.n(i)},function(e,o,n){"use strict";var a=n(3),t=n(47);o.a=n.i(a.b)(function(e){return{shortname:e.meta.disqusShortname}},null)(t.a)},function(e,o,n){"use strict";var a=n(48);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";var a=n(46);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=n.n(i),l=n(54),c=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),u=function(e){function o(){return a(this,o),t(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return s(o,e),c(o,[{key:"render",value:function(){return this.props.items.map(function(e,o){return r.a.createElement(l.a,{key:o,item:e})})}}]),o}(i.PureComponent);o.a=u},function(e,o,n){"use strict";var a=n(3),t=n(51);o.a=n.i(a.b)(function(e){return{items:e.content.all}},null)(t.a)},function(e,o,n){"use strict";var a=n(52);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=n.n(i),l=n(23),c=n.n(l),u=n(9),p=n(18),d=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),m=function(e){function o(){return a(this,o),t(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return s(o,e),d(o,[{key:"render",value:function(){var e=this.props.item;return r.a.createElement(u.a,null,r.a.createElement("time",{dateTime:e.creationDate},c()(e.creationDate).format("MMMM d, Y")),r.a.createElement("h3",null,r.a.createElement("a",{title:e.title,href:e.permalink},e.title)),r.a.createElement(p.a,null,r.a.createElement("i",null,"(Reading time: ",e.readingTime,", Words: ",e.wordCount,")")),r.a.createElement("hr",null))}}]),o}(i.PureComponent);o.a=m},function(e,o,n){"use strict";function a(e){var o=e.item,n=void 0===o?c:o,a=n.title,t=n.content,i=n.creationDate,u=n.permalink;return s.a.createElement("article",null,s.a.createElement("header",null,s.a.createElement("h1",null,a)),s.a.createElement("section",{dangerouslySetInnerHTML:{__html:t}}),s.a.createElement("footer",null,s.a.createElement("time",{dateTime:i},r()(i).format("MMMM Do, Y")),s.a.createElement(l.a,{identifier:u})))}o.a=a;var t=n(0),s=n.n(t),i=n(23),r=n.n(i),l=n(49),c={}},function(e,o,n){"use strict";var a=n(3),t=n(55);o.a=n.i(a.b)(function(e){return{item:e.content.current}},null)(t.a)},function(e,o,n){"use strict";var a=n(56);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";o.a={isDevelopment:function(){return!1}}},function(e,o,n){"use strict";function a(e){var o=e.app,n=o.Data,a=o.Layout,s=e.site,i=s.Title,r=s.RSSLink,l=s.Params,c=l.disqusShortname,u=l.description;return{title:i,items:n&&n.Pages?n.Pages.map(t):[],item:n?void 0:t(e.app),rss:r,description:u,layout:a,disqusShortname:c}}o.a=a;var t=function(e){var o=e.Date,n=e.Lastmod,a=e.URL,t=e.Permalink,s=e.Content,i=e.Title,r=e.ReadingTime,l=e.WordCount;return{creationDate:o,updateDate:n,publishDate:e.PublishDate,url:a,permalink:t,content:s,title:i,readingTime:r,summary:e.Summary,wordCount:l}}},function(e,o,n){"use strict";function a(e){if(Array.isArray(e)){for(var o=0,n=Array(e.length);o<e.length;o++)n[o]=e[o];return n}return Array.from(e)}function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r,o=arguments[1],n=o.type,t=o.payload;switch(n){case s.b:return{all:[].concat(a(t.items)),current:t.item};case i.b:var l=t.index,c=t.permalink;return Object.assign({},e,{all:e.all.map(function(e,o){return o===l?Object.assign({},e,{permalink:c}):Object.assign({},e)})});default:return Object.assign({},e)}}o.a=t;var s=n(13),i=n(17),r={all:[]}},function(e,o,n){"use strict";var a=n(12),t=n(60),s=n(62),i=n.i(a.combineReducers)({content:t.a,meta:s.a});o.a=i},function(e,o,n){"use strict";function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,o=arguments[1],n=o.type,a=o.payload;switch(n){case t.b:var i=a.title,r=a.rss,l=a.disqusShortname;return{title:i,description:a.description,layout:a.layout,links:{rss:r},disqusShortname:l};default:return Object.assign({},e)}}o.a=a;var t=n(13),s={links:{}}},function(e,o,n){"use strict";function a(){if("serviceWorker"in navigator){if(new URL("",window.location).origin!==window.location.origin)return;window.addEventListener("load",function(){var e="/service-worker.js";i?s(e):t(e)})}}function t(e){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var o=e.installing;o.onstatechange=function(){"installed"===o.state&&(navigator.serviceWorker.controller?console.log("New content is available; please refresh."):console.log("Content is cached for offline use."))}}}).catch(function(e){console.error("Error during service worker registration:",e)})}function s(e){fetch(e).then(function(o){404===o.status||-1===o.headers.get("content-type").indexOf("javascript")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):t(e)}).catch(function(){console.log("No internet connection found. App is running in offline mode.")})}o.a=a;var i=Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/))},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=n.n(i),l=n(5),c=n(50),u=n(44),p=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),d=l.a.main({margin:20,backgroundColor:"white",padding:20}),m=function(e){function o(){return a(this,o),t(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return s(o,e),p(o,[{key:"render",value:function(){var e=this.props.isPage;return r.a.createElement(d,null,e?r.a.createElement(u.a,null):r.a.createElement(c.a,null))}}]),o}(i.PureComponent);o.a=m},function(e,o,n){"use strict";var a=n(3),t=n(64);o.a=n.i(a.b)(function(e){return{isPage:"page"===e.meta.layout}},null)(t.a)},function(e,o,n){"use strict";var a=n(65);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=n.n(i),l=n(5),c=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),u=l.a.footer({margin:"auto",color:"white"}),p=function(e){function o(){return a(this,o),t(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return s(o,e),c(o,[{key:"render",value:function(){return r.a.createElement(u,null,"Created using Hugo + React. WIP. By nicosommi.")}}]),o}(i.PureComponent);o.a=p},function(e,o,n){"use strict";var a=n(3),t=n(67);o.a=n.i(a.b)(function(e){return{type:"post"}},null)(t.a)},function(e,o,n){"use strict";var a=n(68);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=n.n(i),l=n(5),c=n(9),u=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),p=l.a.header({textAlign:"center",backgroundColor:"white"}),d=function(e){function o(){return a(this,o),t(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return s(o,e),u(o,[{key:"render",value:function(){var e=this.props,o=e.title,n=e.description;return r.a.createElement(p,null,r.a.createElement(c.a,null,r.a.createElement("h1",null,o),n))}}]),o}(i.PureComponent);o.a=d},function(e,o,n){"use strict";var a=n(3),t=n(70);o.a=n.i(a.b)(function(e){return{title:e.meta.title,description:e.meta.description}},null)(t.a)},function(e,o,n){"use strict";var a=n(71);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=n.n(i),l=n(5),c=n(72),u=n(77),p=n(66),d=n(69),m=n(9),h=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),g=n.i(l.a)(m.a)({backgroundColor:"rgb(21,27,31)"}),y=function(e){function o(){return a(this,o),t(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return s(o,e),h(o,[{key:"render",value:function(){return r.a.createElement(g,null,r.a.createElement(c.a,null),r.a.createElement(u.a,null),r.a.createElement(p.a,null),r.a.createElement(d.a,null))}}]),o}(i.PureComponent);o.a=y},function(e,o,n){"use strict";var a=n(73);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=n.n(i),l=n(5),c=n(18),u=n(79),p=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),d=n.i(l.a)(c.a)({justifyContent:"space-around",flexWrap:"wrap",backgroundColor:"rgb(21,27,31)"}),m=function(e){function o(){return a(this,o),t(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return s(o,e),p(o,[{key:"render",value:function(){var e=this.props.rssLink;return r.a.createElement(d,null,r.a.createElement(u.a,{link:"/",icon:"icon-hand-grab-o"},"Home"),r.a.createElement(u.a,{link:"/post",icon:"icon-doc"},"Posts"),r.a.createElement(u.a,{link:"/slide",icon:"icon-chat"},"Slides"),r.a.createElement(u.a,{link:"/resume",icon:"icon-user-outline"},"About"),r.a.createElement(u.a,{link:e,icon:"fa icon-rss"},"RSS"))}}]),o}(i.PureComponent);o.a=m},function(e,o,n){"use strict";var a=n(3),t=n(75);o.a=n.i(a.b)(function(e){return{rssLink:e.meta.links.rss}},null)(t.a)},function(e,o,n){"use strict";var a=n(76);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=n.n(i),l=n(5),c=n(9),u=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),p=l.a.div({width:"100px",border:"0px",height:"100px",display:"flex",justifyContent:"center",alignItems:"center",color:"white",textAlign:"center",":hover,:active,:focus":{cursor:"pointer",backgroundColor:"rgb(17, 133, 151)"}}),d=l.a.i({fontSize:"3em"}),m=function(e){function o(){return a(this,o),t(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return s(o,e),u(o,[{key:"goto",value:function(e){window.location.href=e}},{key:"render",value:function(){var e=this,o=this.props,n=o.link,a=o.icon;return r.a.createElement(p,{onClick:function(){return e.goto(n)}},r.a.createElement(c.a,null,r.a.createElement(d,{className:a}),this.props.children))}}]),o}(i.PureComponent);o.a=m},function(e,o,n){"use strict";var a=n(78);n.d(o,"a",function(){return a.a})},function(e,o,n){"use strict";var a=n(12),t=n(61),s=n(167),i=(n.n(s),function(){var e=n.i(a.createStore)(t.a,n.i(s.composeWithDevTools)());return e});o.a=i},function(e,o,n){"use strict";function a(e){return e}function t(e,o,n){function t(e,o){var n=b.hasOwnProperty(o)?b[o]:null;q.hasOwnProperty(o)&&r("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",o),e&&r("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",o)}function c(e,n){if(n){r("function"!==typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),r(!o(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var a=e.prototype,s=a.__reactAutoBindPairs;n.hasOwnProperty(l)&&v.mixins(e,n.mixins);for(var i in n)if(n.hasOwnProperty(i)&&i!==l){var c=n[i],u=a.hasOwnProperty(i);if(t(u,i),v.hasOwnProperty(i))v[i](e,c);else{var p=b.hasOwnProperty(i),h="function"===typeof c,g=h&&!p&&!u&&!1!==n.autobind;if(g)s.push(i,c),a[i]=c;else if(u){var y=b[i];r(p&&("DEFINE_MANY_MERGED"===y||"DEFINE_MANY"===y),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",y,i),"DEFINE_MANY_MERGED"===y?a[i]=d(a[i],c):"DEFINE_MANY"===y&&(a[i]=m(a[i],c))}else a[i]=c}}}else;}function u(e,o){if(o)for(var n in o){var a=o[n];if(o.hasOwnProperty(n)){var t=n in v;r(!t,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n);var s=n in e;r(!s,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),e[n]=a}}}function p(e,o){r(e&&o&&"object"===typeof e&&"object"===typeof o,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");for(var n in o)o.hasOwnProperty(n)&&(r(void 0===e[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),e[n]=o[n]);return e}function d(e,o){return function(){var n=e.apply(this,arguments),a=o.apply(this,arguments);if(null==n)return a;if(null==a)return n;var t={};return p(t,n),p(t,a),t}}function m(e,o){return function(){e.apply(this,arguments),o.apply(this,arguments)}}function h(e,o){var n=o.bind(e);return n}function g(e){for(var o=e.__reactAutoBindPairs,n=0;n<o.length;n+=2){var a=o[n],t=o[n+1];e[a]=h(e,t)}}function y(e){var o=a(function(e,a,t){this.__reactAutoBindPairs.length&&g(this),this.props=e,this.context=a,this.refs=i,this.updater=t||n,this.state=null;var s=this.getInitialState?this.getInitialState():null;r("object"===typeof s&&!Array.isArray(s),"%s.getInitialState(): must return an object or null",o.displayName||"ReactCompositeComponent"),this.state=s});o.prototype=new j,o.prototype.constructor=o,o.prototype.__reactAutoBindPairs=[],f.forEach(c.bind(null,o)),c(o,w),c(o,e),c(o,k),o.getDefaultProps&&(o.defaultProps=o.getDefaultProps()),r(o.prototype.render,"createClass(...): Class specification must implement a `render` method.");for(var t in b)o.prototype[t]||(o.prototype[t]=null);return o}var f=[],b={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},v={displayName:function(e,o){e.displayName=o},mixins:function(e,o){if(o)for(var n=0;n<o.length;n++)c(e,o[n])},childContextTypes:function(e,o){e.childContextTypes=s({},e.childContextTypes,o)},contextTypes:function(e,o){e.contextTypes=s({},e.contextTypes,o)},getDefaultProps:function(e,o){e.getDefaultProps?e.getDefaultProps=d(e.getDefaultProps,o):e.getDefaultProps=o},propTypes:function(e,o){e.propTypes=s({},e.propTypes,o)},statics:function(e,o){u(e,o)},autobind:function(){}},w={componentDidMount:function(){this.__isMounted=!0}},k={componentWillUnmount:function(){this.__isMounted=!1}},q={replaceState:function(e,o){this.updater.enqueueReplaceState(this,e,o)},isMounted:function(){return!!this.__isMounted}},j=function(){};return s(j.prototype,e.prototype,q),y}var s=n(2),i=n(10),r=n(1),l="mixins";e.exports=t},function(e,o,n){"use strict";function a(e){return(0,s.default)(e)}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=n(107),s=function(e){return e&&e.__esModule?e:{default:e}}(t);e.exports=o.default},function(e,o){},function(e,o){},function(e,o,n){"use strict";var a=n(4),t={listen:function(e,o,n){return e.addEventListener?(e.addEventListener(o,n,!1),{remove:function(){e.removeEventListener(o,n,!1)}}):e.attachEvent?(e.attachEvent("on"+o,n),{remove:function(){e.detachEvent("on"+o,n)}}):void 0},capture:function(e,o,n){return e.addEventListener?(e.addEventListener(o,n,!0),{remove:function(){e.removeEventListener(o,n,!0)}}):{remove:a}},registerDefault:function(){}};e.exports=t},function(e,o,n){"use strict";var a=!("undefined"===typeof window||!window.document||!window.document.createElement),t={canUseDOM:a,canUseWorkers:"undefined"!==typeof Worker,canUseEventListeners:a&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:a&&!!window.screen,isInWorker:!a};e.exports=t},function(e,o,n){"use strict";function a(e){return e.replace(t,function(e,o){return o.toUpperCase()})}var t=/-(.)/g;e.exports=a},function(e,o,n){"use strict";function a(e){return t(e.replace(s,"ms-"))}var t=n(87),s=/^-ms-/;e.exports=a},function(e,o,n){"use strict";function a(e,o){return!(!e||!o)&&(e===o||!t(e)&&(t(o)?a(e,o.parentNode):"contains"in e?e.contains(o):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(o))))}var t=n(95);e.exports=a},function(e,o,n){"use strict";function a(e){try{e.focus()}catch(e){}}e.exports=a},function(e,o,n){"use strict";function a(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(o){return e.body}}e.exports=a},function(e,o,n){"use strict";function a(e){return e.replace(t,"-$1").toLowerCase()}var t=/([A-Z])/g;e.exports=a},function(e,o,n){"use strict";function a(e){return t(e).replace(s,"-ms-")}var t=n(92),s=/^ms-/;e.exports=a},function(e,o,n){"use strict";function a(e){var o=e?e.ownerDocument||e:document,n=o.defaultView||window;return!(!e||!("function"===typeof n.Node?e instanceof n.Node:"object"===typeof e&&"number"===typeof e.nodeType&&"string"===typeof e.nodeName))}e.exports=a},function(e,o,n){"use strict";function a(e){return t(e)&&3==e.nodeType}var t=n(94);e.exports=a},function(e,o,n){"use strict";function a(e){var o={};return function(n){return o.hasOwnProperty(n)||(o[n]=e.call(this,n)),o[n]}}e.exports=a},function(e,o,n){"use strict";function a(e,o){return e===o?0!==e||0!==o||1/e===1/o:e!==e&&o!==o}function t(e,o){if(a(e,o))return!0;if("object"!==typeof e||null===e||"object"!==typeof o||null===o)return!1;var n=Object.keys(e),t=Object.keys(o);if(n.length!==t.length)return!1;for(var i=0;i<n.length;i++)if(!s.call(o,n[i])||!a(e[n[i]],o[n[i]]))return!1;return!0}var s=Object.prototype.hasOwnProperty;e.exports=t},function(e,o,n){"use strict";function a(e,o){return e+o.charAt(0).toUpperCase()+o.substring(1)}Object.defineProperty(o,"__esModule",{value:!0});var t={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowStart:!0,gridRowEnd:!0,gridColumn:!0,gridColumnStart:!0,gridColumnEnd:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},s=["Webkit","ms","Moz","O"];Object.keys(t).forEach(function(e){s.forEach(function(o){t[a(o,e)]=t[e]})});var i={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},r={isUnitlessNumber:t,shorthandPropertyExpansions:i};o.default=r},function(e,o,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function t(e,o,n){if(null==o||"boolean"===typeof o||""===o)return"";if(isNaN(o)||0===o||l.hasOwnProperty(e)&&l[e])return""+o;if("string"===typeof o){o=o.trim()}return o+"px"}Object.defineProperty(o,"__esModule",{value:!0});var s=n(98),i=a(s),r=n(6),l=(a(r),i.default.isUnitlessNumber);o.default=t},function(e,o,n){"use strict";function a(e){return null===e||void 0===e||!1===e||"object"===("undefined"===typeof e?"undefined":r(e))&&0===Object.keys(e).length}function t(e){if(a(e))return null;if("object"!==("undefined"===typeof e?"undefined":r(e)))return e;for(var o={},n=Object.keys(e),t=!1,s=0;s<n.length;s++){var l=e[n[s]],c=i(l);null!==c&&c===l||(t=!0),null!==c&&(o[n[s]]=c)}return 0===Object.keys(o).length?null:t?o:e}function s(e){var o=!1,n=[];return e.forEach(function(e){var a=i(e);null!==a&&a===e||(o=!0),null!==a&&n.push(a)}),0==n.length?null:o?n:e}function i(e){return Array.isArray(e)?s(e):t(e)}Object.defineProperty(o,"__esModule",{value:!0});var r="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};o.default=i},function(e,o,n){"use strict";function a(e,o){for(var n=1540483477,a=o^e.length,r=e.length,l=0;r>=4;){var c=t(e,l);c=i(c,n),c^=c>>>24,c=i(c,n),a=i(a,n),a^=c,l+=4,r-=4}switch(r){case 3:a^=s(e,l),a^=e.charCodeAt(l+2)<<16,a=i(a,n);break;case 2:a^=s(e,l),a=i(a,n);break;case 1:a^=e.charCodeAt(l),a=i(a,n)}return a^=a>>>13,a=i(a,n),(a^=a>>>15)>>>0}function t(e,o){return e.charCodeAt(o++)+(e.charCodeAt(o++)<<8)+(e.charCodeAt(o++)<<16)+(e.charCodeAt(o)<<24)}function s(e,o){return e.charCodeAt(o++)+(e.charCodeAt(o++)<<8)}function i(e,o){return e|=0,o|=0,(65535&e)*o+(((e>>>16)*o&65535)<<16)|0}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a},function(e,o,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function t(e){if(Array.isArray(e)){for(var o=0,n=Array(e.length);o<e.length;o++)n[o]=e[o];return n}return Array.from(e)}function s(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function i(e){return Ze.speedy(e)}function r(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];Ke=!!e}function l(){for(var e=arguments.length,o=Array(e),n=0;n<e;n++)o[n]=arguments[n];return o=(0,Be.default)(o),o?Ke?o.reduce(function(e,o){return e["data-simulate-"+u(o)]="",e},{}):(Je||(console.warn("can't simulate without once calling simulations(true)"),Je=!0),Ye||Ve||$e||(console.warn("don't use simulation outside dev"),$e=!0),{}):{}}function c(e){Qe=!!e}function u(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e.toLowerCase().replace(/[^a-z0-9]/g,o)}function p(e){var o=JSON.stringify(e),n=(0,Ue.default)(o).toString(36);return e.label&&e.label.length>0&&Ye?u(e.label.join("."),"-")+"-"+n:n}function d(e){var o=Object.keys(e).filter(function(e){return"toString"!==e});return 1===o.length&&!!/data\-css\-([a-zA-Z0-9\-_]+)/.exec(o[0])}function m(e){var o=Object.keys(e).filter(function(e){return"toString"!==e});if(1!==o.length)throw new Error("not a rule");var n=/data\-css\-([a-zA-Z0-9\-_]+)/,a=n.exec(o[0]);if(!a)throw new Error("not a rule");return a[1]}function h(e){if(-1===e.indexOf(","))return[e];for(var o,n=[],a=[],t=0;o=Xe.exec(e);)switch(o[0]){case"(":t++;break;case")":t--;break;case",":if(t)break;n.push(o.index)}for(o=n.length;o--;)a.unshift(e.slice(n[o]+1)),e=e.slice(0,n[o]);return a.unshift(e),a}function g(e,o){if(!e)return o.replace(/\&/g,"");if(!o)return".css-"+e+",[data-css-"+e+"]";var n=h(o).map(function(o){return o.indexOf("&")>=0?[o.replace(/\&/gm,".css-"+e),o.replace(/\&/gm,"[data-css-"+e+"]")].join(","):".css-"+e+o+",[data-css-"+e+"]"+o}).join(",");return Ke&&/^\&\:/.exec(o)&&!/\s/.exec(o)&&(n+=",.css-"+e+"[data-simulate-"+u(o)+"],[data-css-"+e+"][data-simulate-"+u(o)+"]"),n}function y(e){var o=e.selector,n=e.style,a=Ge.transform({selector:o,style:n});return a.selector+"{"+(0,Fe.createMarkupForStyles)(a.style)+"}"}function f(e){var o=void 0,n=void 0,a=void 0,t=void 0;return Object.keys(e).forEach(function(s){s.indexOf("&")>=0?(n=n||{},n[s]=e[s]):0===s.indexOf("@media")?(a=a||{},a[s]=f(e[s])):0===s.indexOf("@supports")?(t=t||{},t[s]=f(e[s])):"label"===s?e.label.length>0&&(o=o||{},o.label=Qe?e.label.join("."):""):(o=o||{},o[s]=e[s])}),{plain:o,selects:n,medias:a,supports:t}}function b(e,o){var n=[],a=o.plain,t=o.selects,s=o.medias,i=o.supports;return a&&n.push(y({style:a,selector:g(e)})),t&&Object.keys(t).forEach(function(o){return n.push(y({style:t[o],selector:g(e,o)}))}),s&&Object.keys(s).forEach(function(o){return n.push(o+"{"+b(e,s[o]).join("")+"}")}),i&&Object.keys(i).forEach(function(o){return n.push(o+"{"+b(e,i[o]).join("")+"}")}),n}function v(e){if(!eo[e.id]){eo[e.id]=!0;var o=f(e.style);b(e.id,o).map(function(e){return Ze.insert(e)})}}function w(e){oo[e.id]||(oo[e.id]=e)}function k(e){if(d(e)){var o=oo[m(e)];if(null==o)throw new Error("[glamor] an unexpected rule cache miss occurred. This is probably a sign of multiple glamor instances in your app. See https://github.com/threepointone/glamor/issues/79");return o}return e}function q(e){if(w(e),v(e),no[e.id])return no[e.id];var o=s({},"data-css-"+e.id,Qe?e.label||"":"");return Object.defineProperty(o,"toString",{enumerable:!1,value:function(){return"css-"+e.id}}),no[e.id]=o,o}function j(e){for(var o=[":",".","[",">"," "],n=!1,a=e.charAt(0),t=0;t<o.length;t++)if(a===o[t]){n=!0;break}return n||e.indexOf("&")>=0}function x(e,o){var n=h(e).map(function(e){return e.indexOf("&")>=0?e:"&"+e});return h(o).map(function(e){return e.indexOf("&")>=0?e:"&"+e}).reduce(function(e,o){return e.concat(n.map(function(e){return o.replace(/\&/g,e)}))},[]).join(",")}function S(e,o){return e?"@media "+e.substring(6)+" and "+o.substring(6):o}function T(e){return 0===e.indexOf("@media")}function C(e){return 0===e.indexOf("@supports")}function P(e,o){return e?"@supports "+e.substring(9)+" and "+o.substring(9):o}function D(e){for(var o=[],n=0;n<e.length;n++)o=Array.isArray(e[n])?o.concat(D(e[n])):o.concat(e[n]);return o}function I(e,o){var n=o.selector,a=void 0===n?"":n,t=o.mq,s=void 0===t?"":t,i=o.supp,r=void 0===i?"":i,l=o.src,c=void 0===l?{}:l;Array.isArray(c)||(c=[c]),c=D(c),c.forEach(function(o){if(d(o)){var n=k(o);if("css"!==n.type)throw new Error("cannot merge this rule");o=n.style}o=(0,Be.default)(o),o&&o.composes&&I(e,{selector:a,mq:s,supp:r,src:o.composes}),Object.keys(o||{}).forEach(function(n){if(j(n))ao[n]&&ao[n].forEach(function(t){return I(e,{selector:x(a,t),mq:s,supp:r,src:o[n]})}),I(e,{selector:x(a,n),mq:s,supp:r,src:o[n]});else if(T(n))I(e,{selector:a,mq:S(s,n),supp:r,src:o[n]});else if(C(n))I(e,{selector:a,mq:s,supp:P(r,n),src:o[n]});else if("composes"===n);else{var t=e;r&&(t[r]=t[r]||{},t=t[r]),s&&(t[s]=t[s]||{},t=t[s]),a&&(t[a]=t[a]||{},t=t[a]),"label"===n?Qe&&(e.label=e.label.concat(o.label)):t[n]=o[n]}})})}function z(e){var o={label:[]};return I(o,{src:e}),q({id:p(o),style:o,label:Qe?o.label.join("."):"",type:"css"})}function E(){for(var e=arguments.length,o=Array(e),n=0;n<e;n++)o[n]=arguments[n];if(o[0]&&o[0].length&&o[0].raw)throw new Error("you forgot to include glamor/babel in your babel plugins.");return o=(0,Be.default)(o),o?ro(o):to}function A(e){if(!eo[e.id]){var o=Object.keys(e.keyframes).map(function(o){var n=Ge.keyframes.transform({id:e.id,name:o,style:e.keyframes[o]});return n.name+"{"+(0,Fe.createMarkupForStyles)(n.style)+"}"}).join("");["-webkit-","-moz-","-o-",""].forEach(function(n){return Ze.insert("@"+n+"keyframes "+e.name+"_"+e.id+"{"+o+"}")}),eo[e.id]=!0}}function L(e){eo[e.id]||(Ze.insert("@font-face{"+(0,Fe.createMarkupForStyles)(e.font)+"}"),eo[e.id]=!0)}function W(e){(0,Re.default)(eo,e.reduce(function(e,o){return e[o]=!0,e},{}))}function O(){eo=Ze.inserted={},oo=Ze.registered={},no={},Ze.flush(),Ze.inject()}function R(e){for(var o=arguments.length,n=Array(o>1?o-1:0),a=1;a<o;a++)n[a-1]=arguments[a];return e?E(s({},e,n)):lo(n)}function M(e){for(var o=arguments.length,n=Array(o>1?o-1:0),a=1;a<o;a++)n[a-1]=arguments[a];return E(s({},e+" &",n))}function F(e){for(var o=arguments.length,n=Array(o>1?o-1:0),a=1;a<o;a++)n[a-1]=arguments[a];return E(s({},"@media "+e,n))}function _(e){for(var o=arguments.length,n=Array(o>1?o-1:0),a=1;a<o;a++)n[a-1]=arguments[a];return E(s({},e,n))}function B(e){return _(":active",e)}function N(e){return _(":any",e)}function H(e){return _(":checked",e)}function U(e){return _(":disabled",e)}function Z(e){return _(":empty",e)}function G(e){return _(":enabled",e)}function Y(e){return _(":default",e)}function V(e){return _(":first",e)}function K(e){return _(":first-child",e)}function J(e){return _(":first-of-type",e)}function $(e){return _(":fullscreen",e)}function Q(e){return _(":focus",e)}function X(e){return _(":hover",e)}function ee(e){return _(":indeterminate",e)}function oe(e){return _(":in-range",e)}function ne(e){return _(":invalid",e)}function ae(e){return _(":last-child",e)}function te(e){return _(":last-of-type",e)}function se(e){return _(":left",e)}function ie(e){return _(":link",e)}function re(e){return _(":only-child",e)}function le(e){return _(":only-of-type",e)}function ce(e){return _(":optional",e)}function ue(e){return _(":out-of-range",e)}function pe(e){return _(":read-only",e)}function de(e){return _(":read-write",e)}function me(e){return _(":required",e)}function he(e){return _(":right",e)}function ge(e){return _(":root",e)}function ye(e){return _(":scope",e)}function fe(e){return _(":target",e)}function be(e){return _(":valid",e)}function ve(e){return _(":visited",e)}function we(e,o){return _(":dir("+e+")",o)}function ke(e,o){return _(":lang("+e+")",o)}function qe(e,o){var n=e.split(",").map(function(e){return e.trim()}).map(function(e){return":not("+e+")"});return 1===n.length?_(":not("+e+")",o):R(n.join(""),o)}function je(e,o){return _(":nth-child("+e+")",o)}function xe(e,o){return _(":nth-last-child("+e+")",o)}function Se(e,o){return _(":nth-last-of-type("+e+")",o)}function Te(e,o){return _(":nth-of-type("+e+")",o)}function Ce(e){return _("::after",e)}function Pe(e){return _("::before",e)}function De(e){return _("::first-letter",e)}function Ie(e){return _("::first-line",e)}function ze(e){return _("::selection",e)}function Ee(e){return _("::backdrop",e)}function Ae(e){return E({"::placeholder":e})}function Le(){for(var e=arguments.length,o=Array(e),n=0;n<e;n++)o[n]=arguments[n];return o=(0,Be.default)(o),o?o.map(function(e){var o={label:[]};return I(o,{src:e}),b(p(o),f(o)).join("")}).join(""):""}function We(){for(var e=arguments.length,o=Array(e),n=0;n<e;n++)o[n]=arguments[n];return o=(0,Be.default)(o),o?o.map(function(e){m(e);var o=Object.keys(e)[0];return o+'="'+(e[o]||"")+'"'}).join(" "):""}Object.defineProperty(o,"__esModule",{value:!0}),o.compose=o.merge=o.$=o.style=o.presets=o.keyframes=o.fontFace=o.insertGlobal=o.insertRule=o.plugins=o.styleSheet=void 0,o.speedy=i,o.simulations=r,o.simulate=l,o.cssLabels=c,o.isLikeRule=d,o.idFor=m,o.css=E,o.rehydrate=W,o.flush=O,o.select=R,o.parent=M,o.media=F,o.pseudo=_,o.active=B,o.any=N,o.checked=H,o.disabled=U,o.empty=Z,o.enabled=G,o._default=Y,o.first=V,o.firstChild=K,o.firstOfType=J,o.fullscreen=$,o.focus=Q,o.hover=X,o.indeterminate=ee,o.inRange=oe,o.invalid=ne,o.lastChild=ae,o.lastOfType=te,o.left=se,o.link=ie,o.onlyChild=re,o.onlyOfType=le,o.optional=ce,o.outOfRange=ue,o.readOnly=pe,o.readWrite=de,o.required=me,o.right=he,o.root=ge,o.scope=ye,o.target=fe,o.valid=be,o.visited=ve,o.dir=we,o.lang=ke,o.not=qe,o.nthChild=je,o.nthLastChild=xe,o.nthLastOfType=Se,o.nthOfType=Te,o.after=Ce,o.before=Pe,o.firstLetter=De,o.firstLine=Ie,o.selection=ze,o.backdrop=Ee,o.placeholder=Ae,o.cssFor=Le,o.attribsFor=We;var Oe=n(2),Re=a(Oe),Me=n(105),Fe=n(19),_e=n(100),Be=a(_e),Ne=n(103),He=n(101),Ue=a(He),Ze=o.styleSheet=new Me.StyleSheet;Ze.inject();var Ge=o.plugins=Ze.plugins=new Ne.PluginSet([Ne.prefixes,Ne.contentWrap,Ne.fallbacks]);Ge.media=new Ne.PluginSet,Ge.fontFace=new Ne.PluginSet,Ge.keyframes=new Ne.PluginSet([Ne.prefixes,Ne.fallbacks]);var Ye=!1,Ve=!1,Ke=Ye,Je=!1,$e=!1,Qe=Ye,Xe=/[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g,eo=Ze.inserted={},oo=Ze.registered={},no={},ao={"::placeholder":["::-webkit-input-placeholder","::-moz-placeholder","::-ms-input-placeholder"],":fullscreen":[":-webkit-full-screen",":-moz-full-screen",":-ms-fullscreen"]},to={};Object.defineProperty(to,"toString",{enumerable:!1,value:function(){return"css-nil"}});var so="undefined"!==typeof WeakMap?[to,new WeakMap,new WeakMap,new WeakMap]:[to],io=!1,ro="undefined"!==typeof WeakMap?function(e){return function(o){if(so[o.length]){for(var n=so[o.length],a=0;a<o.length-1;)n.has(o[a])||n.set(o[a],new WeakMap),n=n.get(o[a]),a++;if(n.has(o[o.length-1])){var s=n.get(o[a]);if(oo[s.toString().substring(4)])return s}}var i=e(o);if(so[o.length]){for(var r=0,l=so[o.length];r<o.length-1;)l=l.get(o[r]),r++;try{l.set(o[r],i)}catch(e){if(Ye&&!io){var c;io=!0,(c=console).warn.apply(c,["failed setting the WeakMap cache for args:"].concat(t(o))),console.warn("this should NOT happen, please file a bug on the github repo.")}}}return i}}(z):z;E.insert=function(e){var o={id:p(e),css:e,type:"raw"};w(o),eo[o.id]||(Ze.insert(o.css),eo[o.id]=!0)};o.insertRule=E.insert;E.global=function(e,o){if(o=(0,Be.default)(o))return E.insert(y({selector:e,style:o}))};o.insertGlobal=E.global;E.keyframes=function(e,o){o||(o=e,e="animation"),o=(0,Be.default)(o)||{};var n={id:p({name:e,kfs:o}),type:"keyframes",name:e,keyframes:o};return w(n),A(n),e+"_"+n.id},E.fontFace=function(e){e=(0,Be.default)(e);var o={id:p(e),type:"font-face",font:e};return w(o),L(o),e.fontFamily};var lo=(o.fontFace=E.fontFace,o.keyframes=E.keyframes,o.presets={mobile:"(min-width: 400px)",Mobile:"@media (min-width: 400px)",phablet:"(min-width: 550px)",Phablet:"@media (min-width: 550px)",tablet:"(min-width: 750px)",Tablet:"@media (min-width: 750px)",desktop:"(min-width: 1000px)",Desktop:"@media (min-width: 1000px)",hd:"(min-width: 1200px)",Hd:"@media (min-width: 1200px)"},o.style=E);o.$=R,o.merge=E,o.compose=E},function(e,o,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function t(e){this.fns=e||[]}function s(e){if(Object.keys(e.style).map(function(o){return Array.isArray(e.style[o])}).indexOf(!0)>=0){var o=e.style,n=Object.keys(o).reduce(function(e,n){return e[n]=Array.isArray(o[n])?o[n].join("; "+(0,p.processStyleName)(n)+": "):o[n],e},{});return(0,u.default)({},e,{style:n})}return e}function i(e){if(e.style.content){var o=e.style.content;return h.indexOf(o)>=0?e:o.indexOf("url(")>=0?e:o.charAt(0)!==o.charAt(o.length-1)||'"'!==o.charAt(0)&&"'"!==o.charAt(0)?l({},e,{style:l({},e.style,{content:'"'+o+'"'})}):e}return e}function r(e){return(0,u.default)({},e,{style:(0,m.default)(l({},e.style))})}Object.defineProperty(o,"__esModule",{value:!0});var l=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};o.PluginSet=t,o.fallbacks=s,o.contentWrap=i,o.prefixes=r;var c=n(2),u=a(c),p=n(19),d=n(104),m=a(d);(0,u.default)(t.prototype,{add:function(){for(var e=this,o=arguments.length,n=Array(o),a=0;a<o;a++)n[a]=arguments[a];n.forEach(function(o){e.fns.indexOf(o)>=0||(e.fns=[o].concat(e.fns))})},remove:function(e){this.fns=this.fns.filter(function(o){return o!==e})},clear:function(){this.fns=[]},transform:function(e){return this.fns.reduce(function(e,o){return o(e)},e)}});var h=["normal","none","counter","open-quote","close-quote","no-open-quote","no-close-quote","initial","inherit"]},function(e,o,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function t(e){for(var o in e){var n=e[o],a=(0,u.default)(z,o,n,e,E);a&&(e[o]=a),(0,l.default)(E,o,e)}return e}Object.defineProperty(o,"__esModule",{value:!0}),o.default=t;var s=n(118),i=a(s),r=n(119),l=a(r),c=n(120),u=a(c),p=n(109),d=a(p),m=n(108),h=a(m),g=n(110),y=a(g),f=n(111),b=a(f),v=n(112),w=a(v),k=n(113),q=a(k),j=n(114),x=a(j),S=n(115),T=a(S),C=n(116),P=a(C),D=n(117),I=a(D),z=[h.default,d.default,y.default,w.default,q.default,x.default,T.default,P.default,I.default,b.default],E=i.default.prefixMap},function(e,o,n){"use strict";function a(e){if(Array.isArray(e)){for(var o=0,n=Array(e.length);o<e.length;o++)n[o]=e[o];return n}return Array.from(e)}function t(e){return e[e.length-1]}function s(e){if(e.sheet)return e.sheet;for(var o=0;o<document.styleSheets.length;o++)if(document.styleSheets[o].ownerNode===e)return document.styleSheets[o]}function i(){var e=document.createElement("style");return e.type="text/css",e.setAttribute("data-glamor",""),e.appendChild(document.createTextNode("")),(document.head||document.getElementsByTagName("head")[0]).appendChild(e),e}function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.speedy,n=void 0===o?!p&&!d:o,a=e.maxLength,t=void 0===a?u&&m?4e3:65e3:a;this.isSpeedy=n,this.sheet=void 0,this.tags=[],this.maxLength=t,this.ctr=0}Object.defineProperty(o,"__esModule",{value:!0}),o.StyleSheet=r;var l=n(2),c=function(e){return e&&e.__esModule?e:{default:e}}(l),u="undefined"!==typeof window,p=!1,d=!1,m=function(){if(u){var e=document.createElement("div");return e.innerHTML="\x3c!--[if lt IE 10]><i></i><![endif]--\x3e",1===e.getElementsByTagName("i").length}}();(0,c.default)(r.prototype,{getSheet:function(){return s(t(this.tags))},inject:function(){var e=this;if(this.injected)throw new Error("already injected stylesheet!");u?this.tags[0]=i():this.sheet={cssRules:[],insertRule:function(o){e.sheet.cssRules.push({cssText:o})}},this.injected=!0},speedy:function(e){if(0!==this.ctr)throw new Error("cannot change speedy mode after inserting any rule to sheet. Either call speedy("+e+") earlier in your app, or call flush() before speedy("+e+")");this.isSpeedy=!!e},_insert:function(e){try{var o=this.getSheet();o.insertRule(e,-1!==e.indexOf("@import")?0:o.cssRules.length)}catch(o){p&&console.warn("whoops, illegal rule inserted",e)}},insert:function(e){if(u)if(this.isSpeedy&&this.getSheet().insertRule)this._insert(e);else if(-1!==e.indexOf("@import")){var o=t(this.tags);o.insertBefore(document.createTextNode(e),o.firstChild)}else t(this.tags).appendChild(document.createTextNode(e));else this.sheet.insertRule(e,-1!==e.indexOf("@import")?0:this.sheet.cssRules.length);return this.ctr++,u&&this.ctr%this.maxLength===0&&this.tags.push(i()),this.ctr-1},delete:function(e){return this.replace(e,"")},flush:function(){u?(this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.sheet=null,this.ctr=0):this.sheet.cssRules=[],this.injected=!1},rules:function(){if(!u)return this.sheet.cssRules;var e=[];return this.tags.forEach(function(o){return e.splice.apply(e,[e.length,0].concat(a(Array.from(s(o).cssRules))))}),e}})},function(e,o,n){"use strict";var a={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,arguments:!0,arity:!0},s="function"===typeof Object.getOwnPropertySymbols;e.exports=function(e,o,n){if("string"!==typeof o){var i=Object.getOwnPropertyNames(o);s&&(i=i.concat(Object.getOwnPropertySymbols(o)));for(var r=0;r<i.length;++r)if(!a[i[r]]&&!t[i[r]]&&(!n||!n[i[r]]))try{e[i[r]]=o[i[r]]}catch(e){}}return e}},function(e,o,n){"use strict";function a(e){return e in i?i[e]:i[e]=e.replace(t,"-$&").toLowerCase().replace(s,"-ms-")}var t=/[A-Z]/g,s=/^ms-/,i={};e.exports=a},function(e,o,n){"use strict";function a(e,o){if("string"===typeof o&&!(0,s.default)(o)&&o.indexOf("cross-fade(")>-1)return i.map(function(e){return o.replace(/cross-fade\(/g,e+"cross-fade(")})}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=n(8),s=function(e){return e&&e.__esModule?e:{default:e}}(t),i=["-webkit-",""];e.exports=o.default},function(e,o,n){"use strict";function a(e,o){if("cursor"===e&&s.hasOwnProperty(o))return t.map(function(e){return e+o})}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=["-webkit-","-moz-",""],s={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0};e.exports=o.default},function(e,o,n){"use strict";function a(e,o){if("string"===typeof o&&!(0,s.default)(o)&&o.indexOf("filter(")>-1)return i.map(function(e){return o.replace(/filter\(/g,e+"filter(")})}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=n(8),s=function(e){return e&&e.__esModule?e:{default:e}}(t),i=["-webkit-",""];e.exports=o.default},function(e,o,n){"use strict";function a(e,o){if("display"===e&&t.hasOwnProperty(o))return t[o]}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]};e.exports=o.default},function(e,o,n){"use strict";function a(e,o,n){"flexDirection"===e&&"string"===typeof o&&(o.indexOf("column")>-1?n.WebkitBoxOrient="vertical":n.WebkitBoxOrient="horizontal",o.indexOf("reverse")>-1?n.WebkitBoxDirection="reverse":n.WebkitBoxDirection="normal"),s.hasOwnProperty(e)&&(n[s[e]]=t[o]||o)}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},s={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines"};e.exports=o.default},function(e,o,n){"use strict";function a(e,o){if("string"===typeof o&&!(0,s.default)(o)&&r.test(o))return i.map(function(e){return e+o})}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=n(8),s=function(e){return e&&e.__esModule?e:{default:e}}(t),i=["-webkit-","-moz-",""],r=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;e.exports=o.default},function(e,o,n){"use strict";function a(e,o){if("string"===typeof o&&!(0,s.default)(o)&&o.indexOf("image-set(")>-1)return i.map(function(e){return o.replace(/image-set\(/g,e+"image-set(")})}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=n(8),s=function(e){return e&&e.__esModule?e:{default:e}}(t),i=["-webkit-",""];e.exports=o.default},function(e,o,n){"use strict";function a(e,o){if("position"===e&&"sticky"===o)return["-webkit-sticky","sticky"]}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a,e.exports=o.default},function(e,o,n){"use strict";function a(e,o){if(s.hasOwnProperty(e)&&i.hasOwnProperty(o))return t.map(function(e){return e+o})}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=["-webkit-","-moz-",""],s={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},i={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=o.default},function(e,o,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function t(e,o){if((0,c.default)(e))return e;for(var n=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),a=0,t=n.length;a<t;++a){var s=n[a],i=[s];for(var l in o){var u=(0,r.default)(l);if(s.indexOf(u)>-1&&"order"!==u)for(var p=o[l],d=0,h=p.length;d<h;++d)i.unshift(s.replace(u,m[p[d]]+u))}n[a]=i.join(",")}return n.join(",")}function s(e,o,n,a){if("string"===typeof o&&d.hasOwnProperty(e)){var s=t(o,a),i=s.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-moz-|-ms-/.test(e)}).join(",");if(e.indexOf("Webkit")>-1)return i;var r=s.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-webkit-|-ms-/.test(e)}).join(",");return e.indexOf("Moz")>-1?r:(n["Webkit"+(0,p.default)(e)]=i,n["Moz"+(0,p.default)(e)]=r,s)}}Object.defineProperty(o,"__esModule",{value:!0}),o.default=s;var i=n(82),r=a(i),l=n(8),c=a(l),u=n(20),p=a(u),d={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},m={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"};e.exports=o.default},function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var a=["Webkit"],t=["Moz"],s=["ms"],i=["Webkit","Moz"],r=["Webkit","ms"],l=["Webkit","Moz","ms"];o.default={plugins:[],prefixMap:{appearance:i,userSelect:l,textEmphasisPosition:a,textEmphasis:a,textEmphasisStyle:a,textEmphasisColor:a,boxDecorationBreak:a,clipPath:a,maskImage:a,maskMode:a,maskRepeat:a,maskPosition:a,maskClip:a,maskOrigin:a,maskSize:a,maskComposite:a,mask:a,maskBorderSource:a,maskBorderMode:a,maskBorderSlice:a,maskBorderWidth:a,maskBorderOutset:a,maskBorderRepeat:a,maskBorder:a,maskType:a,textDecorationStyle:a,textDecorationSkip:a,textDecorationLine:a,textDecorationColor:a,filter:a,fontFeatureSettings:a,breakAfter:l,breakBefore:l,breakInside:l,columnCount:i,columnFill:i,columnGap:i,columnRule:i,columnRuleColor:i,columnRuleStyle:i,columnRuleWidth:i,columns:i,columnSpan:i,columnWidth:i,flex:a,flexBasis:a,flexDirection:a,flexGrow:a,flexFlow:a,flexShrink:a,flexWrap:a,alignContent:a,alignItems:a,alignSelf:a,justifyContent:a,order:a,transform:a,transformOrigin:a,transformOriginX:a,transformOriginY:a,backfaceVisibility:a,perspective:a,perspectiveOrigin:a,transformStyle:a,transformOriginZ:a,animation:a,animationDelay:a,animationDirection:a,animationFillMode:a,animationDuration:a,animationIterationCount:a,animationName:a,animationPlayState:a,animationTimingFunction:a,backdropFilter:a,fontKerning:a,scrollSnapType:r,scrollSnapPointsX:r,scrollSnapPointsY:r,scrollSnapDestination:r,scrollSnapCoordinate:r,shapeImageThreshold:a,shapeImageMargin:a,shapeImageOutside:a,hyphens:l,flowInto:r,flowFrom:r,regionFragment:r,textAlignLast:t,tabSize:t,wrapFlow:s,wrapThrough:s,wrapMargin:s,gridTemplateColumns:s,gridTemplateRows:s,gridTemplateAreas:s,gridTemplate:s,gridAutoColumns:s,gridAutoRows:s,gridAutoFlow:s,grid:s,gridRowStart:s,gridColumnStart:s,gridRowEnd:s,gridRow:s,gridColumn:s,gridColumnEnd:s,gridColumnGap:s,gridRowGap:s,gridArea:s,gridGap:s,textSizeAdjust:r,borderImage:a,borderImageOutset:a,borderImageRepeat:a,borderImageSlice:a,borderImageSource:a,borderImageWidth:a,transitionDelay:a,transitionDuration:a,transitionProperty:a,transitionTimingFunction:a}},e.exports=o.default},function(e,o,n){"use strict";function a(e,o,n){if(e.hasOwnProperty(o))for(var a=e[o],t=0,i=a.length;t<i;++t)n[a[t]+(0,s.default)(o)]=n[o]}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a;var t=n(20),s=function(e){return e&&e.__esModule?e:{default:e}}(t);e.exports=o.default},function(e,o,n){"use strict";function a(e,o,n,a,t){for(var s=0,i=e.length;s<i;++s){var r=e[s](o,n,a,t);if(r)return r}}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a,e.exports=o.default},function(e,o,n){"use strict";var a=function(e,o,n,a,t,s,i,r){if(!e){var l;if(void 0===o)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,a,t,s,i,r],u=0;l=new Error(o.replace(/%s/g,function(){return c[u++]})),l.name="Invariant Violation"}throw l.framesToPop=1,l}};e.exports=a},function(e,o,n){"use strict";function a(e){return null==e?void 0===e?l:r:c&&c in Object(e)?n.i(s.a)(e):n.i(i.a)(e)}var t=n(21),s=n(125),i=n(126),r="[object Null]",l="[object Undefined]",c=t.a?t.a.toStringTag:void 0;o.a=a},function(e,o,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;o.a=n}).call(o,n(16))},function(e,o,n){"use strict";var a=n(127),t=n.i(a.a)(Object.getPrototypeOf,Object);o.a=t},function(e,o,n){"use strict";function a(e){var o=i.call(e,l),n=e[l];try{e[l]=void 0;var a=!0}catch(e){}var t=r.call(e);return a&&(o?e[l]=n:delete e[l]),t}var t=n(21),s=Object.prototype,i=s.hasOwnProperty,r=s.toString,l=t.a?t.a.toStringTag:void 0;o.a=a},function(e,o,n){"use strict";function a(e){return s.call(e)}var t=Object.prototype,s=t.toString;o.a=a},function(e,o,n){"use strict";function a(e,o){return function(n){return e(o(n))}}o.a=a},function(e,o,n){"use strict";var a=n(123),t="object"==typeof self&&self&&self.Object===Object&&self,s=a.a||t||Function("return this")();o.a=s},function(e,o,n){"use strict";function a(e){return null!=e&&"object"==typeof e}o.a=a},function(e,o,n){function a(e){return n(t(e))}function t(e){var o=s[e];if(!(o+1))throw new Error("Cannot find module '"+e+"'.");return o}var s={"./locale":22,"./locale.js":22};a.keys=function(){return Object.keys(s)},a.resolve=t,e.exports=a,a.id=130},function(e,o,n){"use strict";function a(e){var o=new t(t._61);return o._81=1,o._65=e,o}var t=n(24);e.exports=t;var s=a(!0),i=a(!1),r=a(null),l=a(void 0),c=a(0),u=a("");t.resolve=function(e){if(e instanceof t)return e;if(null===e)return r;if(void 0===e)return l;if(!0===e)return s;if(!1===e)return i;if(0===e)return c;if(""===e)return u;if("object"===typeof e||"function"===typeof e)try{var o=e.then;if("function"===typeof o)return new t(o.bind(e))}catch(e){return new t(function(o,n){n(e)})}return a(e)},t.all=function(e){var o=Array.prototype.slice.call(e);return new t(function(e,n){function a(i,r){if(r&&("object"===typeof r||"function"===typeof r)){if(r instanceof t&&r.then===t.prototype.then){for(;3===r._81;)r=r._65;return 1===r._81?a(i,r._65):(2===r._81&&n(r._65),void r.then(function(e){a(i,e)},n))}var l=r.then;if("function"===typeof l){return void new t(l.bind(r)).then(function(e){a(i,e)},n)}}o[i]=r,0===--s&&e(o)}if(0===o.length)return e([]);for(var s=o.length,i=0;i<o.length;i++)a(i,o[i])})},t.reject=function(e){return new t(function(o,n){n(e)})},t.race=function(e){return new t(function(o,n){e.forEach(function(e){t.resolve(e).then(o,n)})})},t.prototype.catch=function(e){return this.then(null,e)}},function(e,o,n){"use strict";function a(){c=!1,r._10=null,r._97=null}function t(e){function o(o){(e.allRejections||i(p[o].error,e.whitelist||l))&&(p[o].displayId=u++,e.onUnhandled?(p[o].logged=!0,e.onUnhandled(p[o].displayId,p[o].error)):(p[o].logged=!0,s(p[o].displayId,p[o].error)))}function n(o){p[o].logged&&(e.onHandled?e.onHandled(p[o].displayId,p[o].error):p[o].onUnhandled||(console.warn("Promise Rejection Handled (id: "+p[o].displayId+"):"),console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id '+p[o].displayId+".")))}e=e||{},c&&a(),c=!0;var t=0,u=0,p={};r._10=function(e){2===e._81&&p[e._72]&&(p[e._72].logged?n(e._72):clearTimeout(p[e._72].timeout),delete p[e._72])},r._97=function(e,n){0===e._45&&(e._72=t++,p[e._72]={displayId:null,error:n,timeout:setTimeout(o.bind(null,e._72),i(n,l)?100:2e3),logged:!1})}}function s(e,o){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((o&&(o.stack||o))+"").split("\n").forEach(function(e){console.warn("  "+e)})}function i(e,o){return o.some(function(o){return e instanceof o})}var r=n(24),l=[ReferenceError,TypeError,RangeError],c=!1;o.disable=a,o.enable=t},function(e,o,n){"use strict";var a=n(4),t=n(1);e.exports=function(){function e(){t(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/prop-types-in-prod")}function o(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:o,element:e,instanceOf:o,node:e,objectOf:o,oneOf:o,oneOfType:o,shape:o};return n.checkPropTypes=a,n.PropTypes=n,n}},function(e,o,n){e.exports=n(133)()},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}Object.defineProperty(o,"__esModule",{value:!0});var i=function(){function e(e,o){for(var n=0;n<o.length;n++){var a=o[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,n,a){return n&&e(o.prototype,n),a&&e(o,a),o}}(),r=n(152),l=function(e){return e&&e.__esModule?e:{default:e}}(r),c=function(e){function o(){return a(this,o),t(this,Object.getPrototypeOf(o).apply(this,arguments))}return s(o,e),i(o,[{key:"componentDidMount",value:function(){this.embedDisqus()}},{key:"render",value:function(){return l.default.createElement("div",null,l.default.createElement("div",{id:"disqus_thread"},l.default.createElement("noscript",null,l.default.createElement("span",null,"Please enable JavaScript to view the",l.default.createElement("a",{href:"http://disqus.com/?ref_noscript"},"comments powered by Disqus.")))))}},{key:"embedDisqus",value:function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src="http://"+this.props.shortname+".disqus.com/embed.js",(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(e)}}]),o}(l.default.Component);c.propTypes={shortname:l.default.PropTypes.string.isRequired,pageurl:l.default.PropTypes.string,identifier:l.default.PropTypes.string},c.defaultProps={shortname:null,pageurl:window.location.href,identifier:null},o.default=c},function(e,o,n){"use strict";function a(e,o,n,a,t){}e.exports=a},function(e,o,n){"use strict";var a=n(138);e.exports=function(e){return a(e,!1)}},function(e,o,n){"use strict";var a=n(4),t=n(1),s=n(6),i=n(139),r=n(136);e.exports=function(e,o){function n(e){var o=e&&(x&&e[x]||e[S]);if("function"===typeof o)return o}function l(e,o){return e===o?0!==e||1/e===1/o:e!==e&&o!==o}function c(e){this.message=e,this.stack=""}function u(e){function n(n,a,s,r,l,u,p){if(r=r||T,u=u||s,p!==i)if(o)t(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else;return null==a[s]?n?new c(null===a[s]?"The "+l+" `"+u+"` is marked as required in `"+r+"`, but its value is `null`.":"The "+l+" `"+u+"` is marked as required in `"+r+"`, but its value is `undefined`."):null:e(a,s,r,l,u)}var a=n.bind(null,!1);return a.isRequired=n.bind(null,!0),a}function p(e){function o(o,n,a,t,s,i){var r=o[n];if(w(r)!==e)return new c("Invalid "+t+" `"+s+"` of type `"+k(r)+"` supplied to `"+a+"`, expected `"+e+"`.");return null}return u(o)}function d(e){function o(o,n,a,t,s){if("function"!==typeof e)return new c("Property `"+s+"` of component `"+a+"` has invalid PropType notation inside arrayOf.");var r=o[n];if(!Array.isArray(r)){return new c("Invalid "+t+" `"+s+"` of type `"+w(r)+"` supplied to `"+a+"`, expected an array.")}for(var l=0;l<r.length;l++){var u=e(r,l,a,t,s+"["+l+"]",i);if(u instanceof Error)return u}return null}return u(o)}function m(e){function o(o,n,a,t,s){if(!(o[n]instanceof e)){var i=e.name||T;return new c("Invalid "+t+" `"+s+"` of type `"+j(o[n])+"` supplied to `"+a+"`, expected instance of `"+i+"`.")}return null}return u(o)}function h(e){function o(o,n,a,t,s){for(var i=o[n],r=0;r<e.length;r++)if(l(i,e[r]))return null;return new c("Invalid "+t+" `"+s+"` of value `"+i+"` supplied to `"+a+"`, expected one of "+JSON.stringify(e)+".")}return Array.isArray(e)?u(o):a.thatReturnsNull}function g(e){function o(o,n,a,t,s){if("function"!==typeof e)return new c("Property `"+s+"` of component `"+a+"` has invalid PropType notation inside objectOf.");var r=o[n],l=w(r);if("object"!==l)return new c("Invalid "+t+" `"+s+"` of type `"+l+"` supplied to `"+a+"`, expected an object.");for(var u in r)if(r.hasOwnProperty(u)){var p=e(r,u,a,t,s+"."+u,i);if(p instanceof Error)return p}return null}return u(o)}function y(e){function o(o,n,a,t,s){for(var r=0;r<e.length;r++){if(null==(0,e[r])(o,n,a,t,s,i))return null}return new c("Invalid "+t+" `"+s+"` supplied to `"+a+"`.")}if(!Array.isArray(e))return a.thatReturnsNull;for(var n=0;n<e.length;n++){var t=e[n];if("function"!==typeof t)return s(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",q(t),n),a.thatReturnsNull}return u(o)}function f(e){function o(o,n,a,t,s){var r=o[n],l=w(r);if("object"!==l)return new c("Invalid "+t+" `"+s+"` of type `"+l+"` supplied to `"+a+"`, expected `object`.");for(var u in e){var p=e[u];if(p){var d=p(r,u,a,t,s+"."+u,i);if(d)return d}}return null}return u(o)}function b(o){switch(typeof o){case"number":case"string":case"undefined":return!0;case"boolean":return!o;case"object":if(Array.isArray(o))return o.every(b);if(null===o||e(o))return!0;var a=n(o);if(!a)return!1;var t,s=a.call(o);if(a!==o.entries){for(;!(t=s.next()).done;)if(!b(t.value))return!1}else for(;!(t=s.next()).done;){var i=t.value;if(i&&!b(i[1]))return!1}return!0;default:return!1}}function v(e,o){return"symbol"===e||("Symbol"===o["@@toStringTag"]||"function"===typeof Symbol&&o instanceof Symbol)}function w(e){var o=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":v(o,e)?"symbol":o}function k(e){if("undefined"===typeof e||null===e)return""+e;var o=w(e);if("object"===o){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return o}function q(e){var o=k(e);switch(o){case"array":case"object":return"an "+o;case"boolean":case"date":case"regexp":return"a "+o;default:return o}}function j(e){return e.constructor&&e.constructor.name?e.constructor.name:T}var x="function"===typeof Symbol&&Symbol.iterator,S="@@iterator",T="<<anonymous>>",C={array:p("array"),bool:p("boolean"),func:p("function"),number:p("number"),object:p("object"),string:p("string"),symbol:p("symbol"),any:function(){return u(a.thatReturnsNull)}(),arrayOf:d,element:function(){function o(o,n,a,t,s){var i=o[n];if(!e(i)){return new c("Invalid "+t+" `"+s+"` of type `"+w(i)+"` supplied to `"+a+"`, expected a single ReactElement.")}return null}return u(o)}(),instanceOf:m,node:function(){function e(e,o,n,a,t){return b(e[o])?null:new c("Invalid "+a+" `"+t+"` supplied to `"+n+"`, expected a ReactNode.")}return u(e)}(),objectOf:g,oneOf:h,oneOfType:y,shape:f};return c.prototype=Error.prototype,C.checkPropTypes=r,C.PropTypes=C,C}},function(e,o,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,o,n){"use strict";function a(e){var o={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return o[e]})}function t(e){var o=/(=0|=2)/g,n={"=0":"=","=2":":"};return(""+("."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1))).replace(o,function(e){return n[e]})}var s={escape:a,unescape:t};e.exports=s},function(e,o,n){"use strict";var a=n(11),t=(n(1),function(e){var o=this;if(o.instancePool.length){var n=o.instancePool.pop();return o.call(n,e),n}return new o(e)}),s=function(e,o){var n=this;if(n.instancePool.length){var a=n.instancePool.pop();return n.call(a,e,o),a}return new n(e,o)},i=function(e,o,n){var a=this;if(a.instancePool.length){var t=a.instancePool.pop();return a.call(t,e,o,n),t}return new a(e,o,n)},r=function(e,o,n,a){var t=this;if(t.instancePool.length){var s=t.instancePool.pop();return t.call(s,e,o,n,a),s}return new t(e,o,n,a)},l=function(e){var o=this;e instanceof o||a("25"),e.destructor(),o.instancePool.length<o.poolSize&&o.instancePool.push(e)},c=t,u=function(e,o){var n=e;return n.instancePool=[],n.getPooled=o||c,n.poolSize||(n.poolSize=10),n.release=l,n},p={addPoolingTo:u,oneArgumentPooler:t,twoArgumentPooler:s,threeArgumentPooler:i,fourArgumentPooler:r};e.exports=p},function(e,o,n){"use strict";var a=n(2),t=n(25),s=n(143),i=n(144),r=n(7),l=n(145),c=n(146),u=n(147),p=n(150),d=r.createElement,m=r.createFactory,h=r.cloneElement,g=a,y=function(e){return e},f={Children:{map:s.map,forEach:s.forEach,count:s.count,toArray:s.toArray,only:p},Component:t.Component,PureComponent:t.PureComponent,createElement:d,cloneElement:h,isValidElement:r.isValidElement,PropTypes:l,createClass:u,createFactory:m,createMixin:y,DOM:i,version:c,__spread:g};e.exports=f},function(e,o,n){"use strict";function a(e){return(""+e).replace(w,"$&/")}function t(e,o){this.func=e,this.context=o,this.count=0}function s(e,o,n){var a=e.func,t=e.context;a.call(t,o,e.count++)}function i(e,o,n){if(null==e)return e;var a=t.getPooled(o,n);f(e,s,a),t.release(a)}function r(e,o,n,a){this.result=e,this.keyPrefix=o,this.func=n,this.context=a,this.count=0}function l(e,o,n){var t=e.result,s=e.keyPrefix,i=e.func,r=e.context,l=i.call(r,o,e.count++);Array.isArray(l)?c(l,t,n,y.thatReturnsArgument):null!=l&&(g.isValidElement(l)&&(l=g.cloneAndReplaceKey(l,s+(!l.key||o&&o.key===l.key?"":a(l.key)+"/")+n)),t.push(l))}function c(e,o,n,t,s){var i="";null!=n&&(i=a(n)+"/");var c=r.getPooled(o,i,t,s);f(e,l,c),r.release(c)}function u(e,o,n){if(null==e)return e;var a=[];return c(e,a,null,o,n),a}function p(e,o,n){return null}function d(e,o){return f(e,p,null)}function m(e){var o=[];return c(e,o,null,y.thatReturnsArgument),o}var h=n(141),g=n(7),y=n(4),f=n(151),b=h.twoArgumentPooler,v=h.fourArgumentPooler,w=/\/+/g;t.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},h.addPoolingTo(t,b),r.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},h.addPoolingTo(r,v);var k={forEach:i,map:u,mapIntoWithKeyPrefixInternal:c,count:d,toArray:m};e.exports=k},function(e,o,n){"use strict";var a=n(7),t=a.createFactory,s={a:t("a"),abbr:t("abbr"),address:t("address"),area:t("area"),article:t("article"),aside:t("aside"),audio:t("audio"),b:t("b"),base:t("base"),bdi:t("bdi"),bdo:t("bdo"),big:t("big"),blockquote:t("blockquote"),body:t("body"),br:t("br"),button:t("button"),canvas:t("canvas"),caption:t("caption"),cite:t("cite"),code:t("code"),col:t("col"),colgroup:t("colgroup"),data:t("data"),datalist:t("datalist"),dd:t("dd"),del:t("del"),details:t("details"),dfn:t("dfn"),dialog:t("dialog"),div:t("div"),dl:t("dl"),dt:t("dt"),em:t("em"),embed:t("embed"),fieldset:t("fieldset"),figcaption:t("figcaption"),figure:t("figure"),footer:t("footer"),form:t("form"),h1:t("h1"),h2:t("h2"),h3:t("h3"),h4:t("h4"),h5:t("h5"),h6:t("h6"),head:t("head"),header:t("header"),hgroup:t("hgroup"),hr:t("hr"),html:t("html"),i:t("i"),iframe:t("iframe"),img:t("img"),input:t("input"),ins:t("ins"),kbd:t("kbd"),keygen:t("keygen"),label:t("label"),legend:t("legend"),li:t("li"),link:t("link"),main:t("main"),map:t("map"),mark:t("mark"),menu:t("menu"),menuitem:t("menuitem"),meta:t("meta"),meter:t("meter"),nav:t("nav"),noscript:t("noscript"),object:t("object"),ol:t("ol"),optgroup:t("optgroup"),option:t("option"),output:t("output"),p:t("p"),param:t("param"),picture:t("picture"),pre:t("pre"),progress:t("progress"),q:t("q"),rp:t("rp"),rt:t("rt"),ruby:t("ruby"),s:t("s"),samp:t("samp"),script:t("script"),section:t("section"),select:t("select"),small:t("small"),source:t("source"),span:t("span"),strong:t("strong"),style:t("style"),sub:t("sub"),summary:t("summary"),sup:t("sup"),table:t("table"),tbody:t("tbody"),td:t("td"),textarea:t("textarea"),tfoot:t("tfoot"),th:t("th"),thead:t("thead"),time:t("time"),title:t("title"),tr:t("tr"),track:t("track"),u:t("u"),ul:t("ul"),var:t("var"),video:t("video"),wbr:t("wbr"),circle:t("circle"),clipPath:t("clipPath"),defs:t("defs"),ellipse:t("ellipse"),g:t("g"),image:t("image"),line:t("line"),linearGradient:t("linearGradient"),mask:t("mask"),path:t("path"),pattern:t("pattern"),polygon:t("polygon"),polyline:t("polyline"),radialGradient:t("radialGradient"),rect:t("rect"),stop:t("stop"),svg:t("svg"),text:t("text"),tspan:t("tspan")};e.exports=s},function(e,o,n){"use strict";var a=n(7),t=a.isValidElement,s=n(137);e.exports=s(t)},function(e,o,n){"use strict";e.exports="15.6.1"},function(e,o,n){"use strict";var a=n(25),t=a.Component,s=n(7),i=s.isValidElement,r=n(28),l=n(81);e.exports=l(t,i,r)},function(e,o,n){"use strict";function a(e){var o=e&&(t&&e[t]||e[s]);if("function"===typeof o)return o}var t="function"===typeof Symbol&&Symbol.iterator,s="@@iterator";e.exports=a},function(e,o,n){"use strict";var a=function(){};e.exports=a},function(e,o,n){"use strict";function a(e){return s.isValidElement(e)||t("143"),e}var t=n(11),s=n(7);n(1);e.exports=a},function(e,o,n){"use strict";function a(e,o){return e&&"object"===typeof e&&null!=e.key?c.escape(e.key):o.toString(36)}function t(e,o,n,s){var d=typeof e;if("undefined"!==d&&"boolean"!==d||(e=null),null===e||"string"===d||"number"===d||"object"===d&&e.$$typeof===r)return n(s,e,""===o?u+a(e,0):o),1;var m,h,g=0,y=""===o?u:o+p;if(Array.isArray(e))for(var f=0;f<e.length;f++)m=e[f],h=y+a(m,f),g+=t(m,h,n,s);else{var b=l(e);if(b){var v,w=b.call(e);if(b!==e.entries)for(var k=0;!(v=w.next()).done;)m=v.value,h=y+a(m,k++),g+=t(m,h,n,s);else for(;!(v=w.next()).done;){var q=v.value;q&&(m=q[1],h=y+c.escape(q[0])+p+a(m,0),g+=t(m,h,n,s))}}else if("object"===d){var j="",x=String(e);i("31","[object Object]"===x?"object with keys {"+Object.keys(e).join(", ")+"}":x,j)}}return g}function s(e,o,n){return null==e?0:t(e,"",o,n)}var i=n(11),r=(n(26),n(27)),l=n(148),c=(n(1),n(140)),u=(n(6),"."),p=":";e.exports=s},function(e,o,n){"use strict";e.exports=n(142)},function(e,o,n){"use strict";function a(e){for(var o=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,a=0;a<o;a++)n+="&args[]="+encodeURIComponent(arguments[a+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var t=new Error(n);throw t.name="Invariant Violation",t.framesToPop=1,t}function t(){if(Wn)for(var e in On){var o=On[e],n=Wn.indexOf(e);if(n>-1||Ln("96",e),!Rn.plugins[n]){o.extractEvents||Ln("97",e),Rn.plugins[n]=o;var a=o.eventTypes;for(var t in a)s(a[t],o,t)||Ln("98",t,e)}}}function s(e,o,n){Rn.eventNameDispatchConfigs.hasOwnProperty(n)&&Ln("99",n),Rn.eventNameDispatchConfigs[n]=e;var a=e.phasedRegistrationNames;if(a){for(var t in a)if(a.hasOwnProperty(t)){var s=a[t];i(s,o,n)}return!0}return!!e.registrationName&&(i(e.registrationName,o,n),!0)}function i(e,o,n){Rn.registrationNameModules[e]&&Ln("100",e),Rn.registrationNameModules[e]=o,Rn.registrationNameDependencies[e]=o.eventTypes[n].dependencies}function r(e,o){return(e&o)===o}function l(e,o){return e.nodeType===sa&&e.getAttribute(ra)===""+o||e.nodeType===ia&&e.nodeValue===" react-text: "+o+" "||e.nodeType===ia&&e.nodeValue===" react-empty: "+o+" "}function c(e){for(var o;o=e._renderedComponent;)e=o;return e}function u(e,o){var n=c(e);n._hostNode=o,o[ua]=n}function p(e,o){o[ua]=e}function d(e){var o=e._hostNode;o&&(delete o[ua],e._hostNode=null)}function m(e,o){if(!(e._flags&la.hasCachedChildNodes)){var n=e._renderedChildren,a=o.firstChild;e:for(var t in n)if(n.hasOwnProperty(t)){var s=n[t],i=c(s)._domID;if(0!==i){for(;null!==a;a=a.nextSibling)if(l(a,i)){u(s,a);continue e}Ln("32",i)}}e._flags|=la.hasCachedChildNodes}}function h(e){if(e[ua])return e[ua];for(var o=[];!e[ua];){if(o.push(e),!e.parentNode)return null;e=e.parentNode}var n,a=e[ua];if(a.tag===aa||a.tag===ta)return a;for(;e&&(a=e[ua]);e=o.pop())n=a,o.length&&m(a,e);return n}function g(e){var o=e[ua];return o?o.tag===aa||o.tag===ta?o:o._hostNode===e?o:null:(o=h(e),null!=o&&o._hostNode===e?o:null)}function y(e){if(e.tag===aa||e.tag===ta)return e.stateNode;if(void 0===e._hostNode&&Ln("33"),e._hostNode)return e._hostNode;for(var o=[];!e._hostNode;)o.push(e),e._hostParent||Ln("34"),e=e._hostParent;for(;o.length;e=o.pop())m(e,e._hostNode);return e._hostNode}function f(e){return e[pa]||null}function b(e,o){e[pa]=o}function v(e){if("function"==typeof e.getName)return e.getName();if("number"==typeof e.tag){var o=e,n=o.type;if("string"==typeof n)return n;if("function"==typeof n)return n.displayName||n.name}return null}function w(e){var o=e;if(e.alternate)for(;o.return;)o=o.return;else{if((o.effectTag&Ta)!==Sa)return Ca;for(;o.return;)if(o=o.return,(o.effectTag&Ta)!==Sa)return Ca}return o.tag===qa?Pa:Da}function k(e){w(e)!==Pa&&Ln("188")}function q(e){var o=e.alternate;if(!o){var n=w(e);return n===Da&&Ln("188"),n===Ca?null:e}for(var a=e,t=o;;){var s=a.return,i=s?s.alternate:null;if(!s||!i)break;if(s.child===i.child){for(var r=s.child;r;){if(r===a)return k(s),e;if(r===t)return k(s),o;r=r.sibling}Ln("188")}if(a.return!==t.return)a=s,t=i;else{for(var l=!1,c=s.child;c;){if(c===a){l=!0,a=s,t=i;break}if(c===t){l=!0,t=s,a=i;break}c=c.sibling}if(!l){for(c=i.child;c;){if(c===a){l=!0,a=i,t=s;break}if(c===t){l=!0,t=i,a=s;break}c=c.sibling}l||Ln("189")}}a.alternate!==t&&Ln("190")}return a.tag!==qa&&Ln("188"),a.stateNode.current===a?e:o}function j(e){return"topMouseUp"===e||"topTouchEnd"===e||"topTouchCancel"===e}function x(e){return"topMouseMove"===e||"topTouchMove"===e}function S(e){return"topMouseDown"===e||"topTouchStart"===e}function T(e,o,n,a){var t=e.type||"unknown-event";e.currentTarget=Ba.getNodeFromInstance(a),Fa.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function C(e,o){var n=e._dispatchListeners,a=e._dispatchInstances;if(Array.isArray(n))for(var t=0;t<n.length&&!e.isPropagationStopped();t++)T(e,o,n[t],a[t]);else n&&T(e,o,n,a);e._dispatchListeners=null,e._dispatchInstances=null}function P(e){var o=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(o)){for(var a=0;a<o.length&&!e.isPropagationStopped();a++)if(o[a](e,n[a]))return n[a]}else if(o&&o(e,n))return n;return null}function D(e){var o=P(e);return e._dispatchInstances=null,e._dispatchListeners=null,o}function I(e){var o=e._dispatchListeners,n=e._dispatchInstances;Array.isArray(o)&&Ln("103"),e.currentTarget=o?Ba.getNodeFromInstance(n):null;var a=o?o(e):null;return e.currentTarget=null,e._dispatchListeners=null,e._dispatchInstances=null,a}function z(e){return!!e._dispatchListeners}function E(e){var o=Na.getInstanceFromNode(e);if(o){if("number"==typeof o.tag){Ha&&"function"==typeof Ha.restoreControlledState||Ln("194");var n=Na.getFiberCurrentPropsFromNode(o.stateNode);return void Ha.restoreControlledState(o.stateNode,o.type,n)}"function"!=typeof o.restoreControlledState&&Ln("195"),o.restoreControlledState()}}function A(e,o){return Ja(e,o)}function L(e,o){return Ka(A,e,o)}function W(e,o){if($a)return L(e,o);$a=!0;try{return L(e,o)}finally{$a=!1,Va.restoreStateIfNeeded()}}function O(e){var o=e.target||e.srcElement||window;return o.correspondingUseElement&&(o=o.correspondingUseElement),o.nodeType===ot?o.parentNode:o}function R(e){if("number"==typeof e.tag){for(;e.return;)e=e.return;return e.tag!==at?null:e.stateNode.containerInfo}for(;e._hostParent;)e=e._hostParent;return ma.getNodeFromInstance(e).parentNode}function M(e,o,n){this.topLevelType=e,this.nativeEvent=o,this.targetInst=n,this.ancestors=[]}function F(e){var o=e.targetInst,n=o;do{if(!n){e.ancestors.push(n);break}var a=R(n);if(!a)break;e.ancestors.push(n),n=ma.getClosestInstanceFromNode(a)}while(n);for(var t=0;t<e.ancestors.length;t++)o=e.ancestors[t],st._handleTopLevel(e.topLevelType,o,e.nativeEvent,nt(e.nativeEvent))}function _(e,o){return null==o&&Ln("30"),null==e?o:Array.isArray(e)?Array.isArray(o)?(e.push.apply(e,o),e):(e.push(o),e):Array.isArray(o)?[e].concat(o):[e,o]}function B(e,o,n){Array.isArray(e)?e.forEach(o,n):e&&o.call(n,e)}function N(e){return"button"===e||"input"===e||"select"===e||"textarea"===e}function H(e,o,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||!N(o));default:return!1}}function U(e){ht.enqueueEvents(e),ht.processEventQueue(!1)}function Z(e,o){if(!Cn.canUseDOM||o&&!("addEventListener"in document))return!1;var n="on"+e,a=n in document;if(!a){var t=document.createElement("div");t.setAttribute(n,"return;"),a="function"==typeof t[n]}return!a&&tt&&"wheel"===e&&(a=document.implementation.hasFeature("Events.wheel","3.0")),a}function G(e,o){var n={};return n[e.toLowerCase()]=o.toLowerCase(),n["Webkit"+e]="webkit"+o,n["Moz"+e]="moz"+o,n["ms"+e]="MS"+o,n["O"+e]="o"+o.toLowerCase(),n}function Y(e){if(vt[e])return vt[e];if(!bt[e])return e;var o=bt[e];for(var n in o)if(o.hasOwnProperty(n)&&n in wt)return vt[e]=o[n];return""}function V(e){return Object.prototype.hasOwnProperty.call(e,Pt)||(e[Pt]=Ct++,Tt[e[Pt]]={}),Tt[e[Pt]]}function K(e,o){return e+o.charAt(0).toUpperCase()+o.substring(1)}function J(e,o,n){return null==o||"boolean"==typeof o||""===o?"":n||"number"!=typeof o||0===o||_t.hasOwnProperty(e)&&_t[e]?(""+o).trim():o+"px"}function $(e){return!!$t.hasOwnProperty(e)||!Jt.hasOwnProperty(e)&&(Kt.test(e)?($t[e]=!0,!0):(Jt[e]=!0,!1))}function Q(e,o){return null==o||e.hasBooleanValue&&!o||e.hasNumericValue&&isNaN(o)||e.hasPositiveNumericValue&&o<1||e.hasOverloadedBooleanValue&&!1===o}function X(){return null}function ee(){return null}function oe(){es.getCurrentStack=null,os.current=null,os.phase=null}function ne(e,o){es.getCurrentStack=ee,os.current=e,os.phase=o}function ae(e){return"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}function te(e,o){var n=o.name;if("radio"===o.type&&null!=n){for(var a=e;a.parentNode;)a=a.parentNode;for(var t=a.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),s=0;s<t.length;s++){var i=t[s];if(i!==e&&i.form===e.form){var r=ma.getFiberCurrentPropsFromNode(i);r||Ln("90"),as.updateWrapper(i,r)}}}}function se(e){var o="";return Tn.Children.forEach(e,function(e){null!=e&&("string"!=typeof e&&"number"!=typeof e||(o+=e))}),o}function ie(e,o,n){var a=e.options;if(o){for(var t=n,s={},i=0;i<t.length;i++)s["$"+t[i]]=!0;for(var r=0;r<a.length;r++){var l=s.hasOwnProperty("$"+a[r].value);a[r].selected!==l&&(a[r].selected=l)}}else{for(var c=""+n,u=0;u<a.length;u++)if(a[u].value===c)return void(a[u].selected=!0);a.length&&(a[0].selected=!0)}}function re(e){return""}function le(e,o,n){o&&(ys[e]&&(null!=o.children||null!=o.dangerouslySetInnerHTML)&&Ln("137",e,re(n)),null!=o.dangerouslySetInnerHTML&&(null!=o.children&&Ln("60"),"object"==typeof o.dangerouslySetInnerHTML&&fs in o.dangerouslySetInnerHTML||Ln("61")),null!=o.style&&"object"!=typeof o.style&&Ln("62",re(n)))}function ce(e){var o=e.type,n=e.nodeName;return n&&"input"===n.toLowerCase()&&("checkbox"===o||"radio"===o)}function ue(e){return e._valueTracker}function pe(e){e._valueTracker=null}function de(e){var o="";return e?o=ce(e)?e.checked?"true":"false":e.value:o}function me(e){var o=ce(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,o),a=""+e[o];if(!e.hasOwnProperty(o)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,o,{enumerable:n.enumerable,configurable:!0,get:function(){return n.get.call(this)},set:function(e){a=""+e,n.set.call(this,e)}}),{getValue:function(){return a},setValue:function(e){a=""+e},stopTracking:function(){pe(e),delete e[o]}}}function he(e,o){return e.indexOf("-")>=0||null!=o.is}function ge(e){var o=""+e,n=Ts.exec(o);if(!n)return o;var a,t="",s=0,i=0;for(s=n.index;s<o.length;s++){switch(o.charCodeAt(s)){case 34:a="&quot;";break;case 38:a="&amp;";break;case 39:a="&#x27;";break;case 60:a="&lt;";break;case 62:a="&gt;";break;default:continue}i!==s&&(t+=o.substring(i,s)),i=s+1,t+=a}return i!==s?t+o.substring(i,s):t}function ye(e){return"boolean"==typeof e||"number"==typeof e?""+e:ge(e)}function fe(e,o){var n=e.nodeType===Es||e.nodeType===As,a=n?e:e.ownerDocument;Ls(o,a)}function be(e){e.onclick=Pn}function ve(e,o){switch(o){case"iframe":case"object":It.trapBubbledEvent("topLoad","load",e);break;case"video":case"audio":for(var n in Us)Us.hasOwnProperty(n)&&It.trapBubbledEvent(n,Us[n],e);break;case"source":It.trapBubbledEvent("topError","error",e);break;case"img":case"image":It.trapBubbledEvent("topError","error",e),It.trapBubbledEvent("topLoad","load",e);break;case"form":It.trapBubbledEvent("topReset","reset",e),It.trapBubbledEvent("topSubmit","submit",e);break;case"input":case"select":case"textarea":It.trapBubbledEvent("topInvalid","invalid",e);break;case"details":It.trapBubbledEvent("topToggle","toggle",e)}}function we(e,o,n,a){for(var t in n)if(n.hasOwnProperty(t)){var s=n[t];if(t===Fs)Gt.setValueForStyles(e,s);else if(t===Os){var i=s?s[_s]:void 0;null!=i&&Ss(e,i)}else t===Ms?"string"==typeof s?Is(e,s):"number"==typeof s&&Is(e,""+s):t===Rs||(Ws.hasOwnProperty(t)?s&&fe(o,t):a?Xt.setValueForAttribute(e,t,s):($n.properties[t]||$n.isCustomAttribute(t))&&null!=s&&Xt.setValueForProperty(e,t,s))}}function ke(e,o,n,a){for(var t=0;t<o.length;t+=2){var s=o[t],i=o[t+1];s===Fs?Gt.setValueForStyles(e,i):s===Os?Ss(e,i):s===Ms?Is(e,i):a?null!=i?Xt.setValueForAttribute(e,s,i):Xt.deleteValueForAttribute(e,s):($n.properties[s]||$n.isCustomAttribute(s))&&(null!=i?Xt.setValueForProperty(e,s,i):Xt.deleteValueForProperty(e,s))}}function qe(e){switch(e){case"svg":return Ns;case"math":return Hs;default:return Bs}}function je(e,o){return e!==gi&&e!==hi||o!==gi&&o!==hi?e===mi&&o!==mi?-255:e!==mi&&o===mi?255:e-o:0}function xe(){return{first:null,last:null,hasForceUpdate:!1,callbackList:null}}function Se(e){return{priorityLevel:e.priorityLevel,partialState:e.partialState,callback:e.callback,isReplace:e.isReplace,isForced:e.isForced,isTopLevelUnmount:e.isTopLevelUnmount,next:null}}function Te(e,o,n,a){null!==n?n.next=o:(o.next=e.first,e.first=o),null!==a?o.next=a:e.last=o}function Ce(e,o){var n=o.priorityLevel,a=null,t=null;if(null!==e.last&&je(e.last.priorityLevel,n)<=0)a=e.last;else for(t=e.first;null!==t&&je(t.priorityLevel,n)<=0;)a=t,t=t.next;return a}function Pe(e){var o=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=xe());var a=void 0;return null!==o?null===(a=o.updateQueue)&&(a=o.updateQueue=xe()):a=null,[n,a!==n?a:null]}function De(e,o){var n=Pe(e),a=n[0],t=n[1],s=Ce(a,o),i=null!==s?s.next:a.first;if(null===t)return Te(a,o,s,i),null;var r=Ce(t,o),l=null!==r?r.next:t.first;if(Te(a,o,s,i),i===l&&null!==i||s===r&&null!==s)return null===r&&(t.first=o),null===l&&(t.last=null),null;var c=Se(o);return Te(t,c,r,l),c}function Ie(e,o,n,a){De(e,{priorityLevel:a,partialState:o,callback:n,isReplace:!1,isForced:!1,isTopLevelUnmount:!1,next:null})}function ze(e,o,n,a){De(e,{priorityLevel:a,partialState:o,callback:n,isReplace:!0,isForced:!1,isTopLevelUnmount:!1,next:null})}function Ee(e,o,n){De(e,{priorityLevel:n,partialState:null,callback:o,isReplace:!1,isForced:!0,isTopLevelUnmount:!1,next:null})}function Ae(e){var o=e.updateQueue;return null===o?mi:e.tag!==yi&&e.tag!==fi?mi:null!==o.first?o.first.priorityLevel:mi}function Le(e,o,n,a){var t=null===o.element,s={priorityLevel:a,partialState:o,callback:n,isReplace:!1,isForced:!1,isTopLevelUnmount:t,next:null},i=De(e,s);if(t){var r=Pe(e),l=r[0],c=r[1];null!==l&&null!==s.next&&(s.next=null,l.last=s),null!==c&&null!==i&&null!==i.next&&(i.next=null,c.last=s)}}function We(e,o,n,a){var t=e.partialState;return"function"==typeof t?t.call(o,n,a):t}function Oe(e,o,n,a,t,s,i){if(null!==e&&e.updateQueue===n){var r=n;n=o.updateQueue={first:r.first,last:r.last,callbackList:null,hasForceUpdate:!1}}for(var l=n.callbackList,c=n.hasForceUpdate,u=t,p=!0,d=n.first;null!==d&&je(d.priorityLevel,i)<=0;){n.first=d.next,null===n.first&&(n.last=null);var m=void 0;d.isReplace?(u=We(d,a,u,s),p=!0):(m=We(d,a,u,s))&&(u=p?jn({},u,m):jn(u,m),p=!1),d.isForced&&(c=!0),null===d.callback||d.isTopLevelUnmount&&null!==d.next||(l=null!==l?l:[],l.push(d.callback),o.effectTag|=di),d=d.next}return n.callbackList=l,n.hasForceUpdate=c,null!==n.first||null!==l||c||(o.updateQueue=null),u}function Re(e,o,n){var a=o.callbackList;if(null!==a){o.callbackList=null;for(var t=0;t<a.length;t++){var s=a[t];"function"!=typeof s&&Ln("191",s),s.call(n)}}}function Me(e){return Be(e)?Hi:Bi.current}function Fe(e,o,n){var a=e.stateNode;a.__reactInternalMemoizedUnmaskedChildContext=o,a.__reactInternalMemoizedMaskedChildContext=n}function _e(e){return e.tag===Oi&&null!=e.type.contextTypes}function Be(e){return e.tag===Oi&&null!=e.type.childContextTypes}function Ne(e){Be(e)&&(Fi(Ni,e),Fi(Bi,e))}function He(e,o,n){var a=e.stateNode,t=e.type.childContextTypes;if("function"!=typeof a.getChildContext)return o;var s=void 0;s=a.getChildContext();for(var i in s)i in t||Ln("108",va(e)||"Unknown",i);return Li({},o,s)}function Ue(e){return!(!e.prototype||!e.prototype.isReactComponent)}function Ze(e,o,n,a){var t=void 0;return"function"==typeof e?(t=Ue(e)?fr(ir,o,n):fr(sr,o,n),t.type=e):"string"==typeof e?(t=fr(lr,o,n),t.type=e):"object"==typeof e&&null!==e&&"number"==typeof e.tag?t=e:Ln("130",null==e?e:typeof e,""),t}function Ge(e){switch(e.tag){case Lr:case Wr:case Or:case Rr:var o=e._debugOwner,n=e._debugSource,a=va(e),t=null;return o&&(t=va(o)),Ar(a,n,t);default:return""}}function Ye(e){var o="",n=e;do{o+=Ge(n),n=n.return}while(n);return o}function Ve(e){if(!1!==_r(e)){var o=e.error;null!==o&&"string"==typeof o.message&&"string"==typeof o.name&&"string"==typeof o.stack&&(o.message,o.name,o.stack),console.error("React caught an error thrown by one of your components.\n\n"+o.stack)}}function Ke(e){if(null===e||void 0===e)return null;var o=jl&&e[jl]||e[xl];return"function"==typeof o?o:null}function Je(e,o){var n=o.ref;if(null!==n&&"function"!=typeof n){if(o._owner){var a=o._owner,t=void 0;if(a)if("number"==typeof a.tag){var s=a;s.tag!==hl&&Ln("110"),t=s.stateNode}else t=a.getPublicInstance();t||Ln("147",n);var i=""+n;if(null!==e&&null!==e.ref&&e.ref._stringRef===i)return e.ref;var r=function(e){var o=t.refs===Dn?t.refs={}:t.refs;null===e?delete o[i]:o[i]=e};return r._stringRef=i,r}"string"!=typeof n&&Ln("148"),o._owner||Ln("149",n)}return n}function $e(e,o){"textarea"!==e.type&&Ln("31","[object Object]"===Object.prototype.toString.call(o)?"object with keys {"+Object.keys(o).join(", ")+"}":o,"")}function Qe(e,o){function n(n,a){if(o){if(!e){if(null===a.alternate)return;a=a.alternate}var t=n.lastEffect;null!==t?(t.nextEffect=a,n.lastEffect=a):n.firstEffect=n.lastEffect=a,a.nextEffect=null,a.effectTag=ql}}function a(e,a){if(!o)return null;for(var t=a;null!==t;)n(e,t),t=t.sibling;return null}function t(e,o){for(var n=new Map,a=o;null!==a;)null!==a.key?n.set(a.key,a):n.set(a.index,a),a=a.sibling;return n}function s(o,n){if(e){var a=sl(o,n);return a.index=0,a.sibling=null,a}return o.pendingWorkPriority=n,o.effectTag=wl,o.index=0,o.sibling=null,o}function i(e,n,a){if(e.index=a,!o)return n;var t=e.alternate;if(null!==t){var s=t.index;return s<n?(e.effectTag=kl,n):s}return e.effectTag=kl,n}function r(e){return o&&null===e.alternate&&(e.effectTag=kl),e}function l(e,o,n,a){if(null===o||o.tag!==gl){var t=ll(n,e.internalContextTag,a);return t.return=e,t}var i=s(o,a);return i.pendingProps=n,i.return=e,i}function c(e,o,n,a){if(null===o||o.type!==n.type){var t=il(n,e.internalContextTag,a);return t.ref=Je(o,n),t.return=e,t}var i=s(o,a);return i.ref=Je(o,n),i.pendingProps=n.props,i.return=e,i}function u(e,o,n,a){if(null===o||o.tag!==fl){var t=cl(n,e.internalContextTag,a);return t.return=e,t}var i=s(o,a);return i.pendingProps=n,i.return=e,i}function p(e,o,n,a){if(null===o||o.tag!==bl){var t=ul(n,e.internalContextTag,a);return t.type=n.value,t.return=e,t}var i=s(o,a);return i.type=n.value,i.return=e,i}function d(e,o,n,a){if(null===o||o.tag!==yl||o.stateNode.containerInfo!==n.containerInfo||o.stateNode.implementation!==n.implementation){var t=pl(n,e.internalContextTag,a);return t.return=e,t}var i=s(o,a);return i.pendingProps=n.children||[],i.return=e,i}function m(e,o,n,a){if(null===o||o.tag!==vl){var t=rl(n,e.internalContextTag,a);return t.return=e,t}var i=s(o,a);return i.pendingProps=n,i.return=e,i}function h(e,o,n){if("string"==typeof o||"number"==typeof o){var a=ll(""+o,e.internalContextTag,n);return a.return=e,a}if("object"==typeof o&&null!==o){switch(o.$$typeof){case Sl:var t=il(o,e.internalContextTag,n);return t.ref=Je(null,o),t.return=e,t;case nl:var s=cl(o,e.internalContextTag,n);return s.return=e,s;case al:var i=ul(o,e.internalContextTag,n);return i.type=o.value,i.return=e,i;case tl:var r=pl(o,e.internalContextTag,n);return r.return=e,r}if(dl(o)||Ke(o)){var l=rl(o,e.internalContextTag,n);return l.return=e,l}$e(e,o)}return null}function g(e,o,n,a){var t=null!==o?o.key:null;if("string"==typeof n||"number"==typeof n)return null!==t?null:l(e,o,""+n,a);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Sl:return n.key===t?c(e,o,n,a):null;case nl:return n.key===t?u(e,o,n,a):null;case al:return null===t?p(e,o,n,a):null;case tl:return n.key===t?d(e,o,n,a):null}if(dl(n)||Ke(n))return null!==t?null:m(e,o,n,a);$e(e,n)}return null}function y(e,o,n,a,t){if("string"==typeof a||"number"==typeof a)return l(o,e.get(n)||null,""+a,t);if("object"==typeof a&&null!==a){switch(a.$$typeof){case Sl:return c(o,e.get(null===a.key?n:a.key)||null,a,t);case nl:return u(o,e.get(null===a.key?n:a.key)||null,a,t);case al:return p(o,e.get(n)||null,a,t);case tl:return d(o,e.get(null===a.key?n:a.key)||null,a,t)}if(dl(a)||Ke(a))return m(o,e.get(n)||null,a,t);$e(o,a)}return null}function f(e,s,r,l){for(var c=null,u=null,p=s,d=0,m=0,f=null;null!==p&&m<r.length;m++){p.index>m?(f=p,p=null):f=p.sibling;var b=g(e,p,r[m],l);if(null===b){null===p&&(p=f);break}o&&p&&null===b.alternate&&n(e,p),d=i(b,d,m),null===u?c=b:u.sibling=b,u=b,p=f}if(m===r.length)return a(e,p),c;if(null===p){for(;m<r.length;m++){var v=h(e,r[m],l);v&&(d=i(v,d,m),null===u?c=v:u.sibling=v,u=v)}return c}for(var w=t(e,p);m<r.length;m++){var k=y(w,e,m,r[m],l);k&&(o&&null!==k.alternate&&w.delete(null===k.key?m:k.key),d=i(k,d,m),null===u?c=k:u.sibling=k,u=k)}return o&&w.forEach(function(o){return n(e,o)}),c}function b(e,s,r,l){var c=Ke(r);"function"!=typeof c&&Ln("150");var u=c.call(r);null==u&&Ln("151");for(var p=null,d=null,m=s,f=0,b=0,v=null,w=u.next();null!==m&&!w.done;b++,w=u.next()){m.index>b?(v=m,m=null):v=m.sibling;var k=g(e,m,w.value,l);if(null===k){m||(m=v);break}o&&m&&null===k.alternate&&n(e,m),f=i(k,f,b),null===d?p=k:d.sibling=k,d=k,m=v}if(w.done)return a(e,m),p;if(null===m){for(;!w.done;b++,w=u.next()){var q=h(e,w.value,l);null!==q&&(f=i(q,f,b),null===d?p=q:d.sibling=q,d=q)}return p}for(var j=t(e,m);!w.done;b++,w=u.next()){var x=y(j,e,b,w.value,l);null!==x&&(o&&null!==x.alternate&&j.delete(null===x.key?b:x.key),f=i(x,f,b),null===d?p=x:d.sibling=x,d=x)}return o&&j.forEach(function(o){return n(e,o)}),p}function v(e,o,n,t){if(null!==o&&o.tag===gl){a(e,o.sibling);var i=s(o,t);return i.pendingProps=n,i.return=e,i}a(e,o);var r=ll(n,e.internalContextTag,t);return r.return=e,r}function w(e,o,t,i){for(var r=t.key,l=o;null!==l;){if(l.key===r){if(l.type===t.type){a(e,l.sibling);var c=s(l,i);return c.ref=Je(l,t),c.pendingProps=t.props,c.return=e,c}a(e,l);break}n(e,l),l=l.sibling}var u=il(t,e.internalContextTag,i);return u.ref=Je(o,t),u.return=e,u}function k(e,o,t,i){for(var r=t.key,l=o;null!==l;){if(l.key===r){if(l.tag===fl){a(e,l.sibling);var c=s(l,i);return c.pendingProps=t,c.return=e,c}a(e,l);break}n(e,l),l=l.sibling}var u=cl(t,e.internalContextTag,i);return u.return=e,u}function q(e,o,n,t){var i=o;if(null!==i){if(i.tag===bl){a(e,i.sibling);var r=s(i,t);return r.type=n.value,r.return=e,r}a(e,i)}var l=ul(n,e.internalContextTag,t);return l.type=n.value,l.return=e,l}function j(e,o,t,i){for(var r=t.key,l=o;null!==l;){if(l.key===r){if(l.tag===yl&&l.stateNode.containerInfo===t.containerInfo&&l.stateNode.implementation===t.implementation){a(e,l.sibling);var c=s(l,i);return c.pendingProps=t.children||[],c.return=e,c}a(e,l);break}n(e,l),l=l.sibling}var u=pl(t,e.internalContextTag,i);return u.return=e,u}function x(e,o,n,t){var s=Et.disableNewFiberFeatures,i="object"==typeof n&&null!==n;if(i)if(s)switch(n.$$typeof){case Sl:return r(w(e,o,n,t));case tl:return r(j(e,o,n,t))}else switch(n.$$typeof){case Sl:return r(w(e,o,n,t));case nl:return r(k(e,o,n,t));case al:return r(q(e,o,n,t));case tl:return r(j(e,o,n,t))}if(s)switch(e.tag){case hl:var l=e.type;null!==n&&!1!==n&&Ln("109",l.displayName||l.name||"Component");break;case ml:var c=e.type;null!==n&&!1!==n&&Ln("105",c.displayName||c.name||"Component")}if("string"==typeof n||"number"==typeof n)return r(v(e,o,""+n,t));if(dl(n))return f(e,o,n,t);if(Ke(n))return b(e,o,n,t);if(i&&$e(e,n),!s&&void 0===n)switch(e.tag){case hl:case ml:var u=e.type;Ln("152",u.displayName||u.name||"Component")}return a(e,o)}return x}function Xe(e){if(!e)return Dn;var o=ga.get(e);return"number"==typeof o.tag?op(o):o._processChildContext(o._context)}function eo(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function oo(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function no(e,o){for(var n=eo(e),a=0,t=0;n;){if(n.nodeType===pp){if(t=a+n.textContent.length,a<=o&&t>=o)return{node:n,offset:o-a};a=t}n=eo(oo(n))}}function ao(){return!mp&&Cn.canUseDOM&&(mp="textContent"in document.documentElement?"textContent":"innerText"),mp}function to(e,o,n,a){return e===n&&o===a}function so(e){var o=window.getSelection&&window.getSelection();if(!o||0===o.rangeCount)return null;var n=o.anchorNode,a=o.anchorOffset,t=o.focusNode,s=o.focusOffset,i=o.getRangeAt(0);try{i.startContainer.nodeType,i.endContainer.nodeType}catch(e){return null}var r=to(o.anchorNode,o.anchorOffset,o.focusNode,o.focusOffset),l=r?0:i.toString().length,c=i.cloneRange();c.selectNodeContents(e),c.setEnd(i.startContainer,i.startOffset);var u=to(c.startContainer,c.startOffset,c.endContainer,c.endOffset),p=u?0:c.toString().length,d=p+l,m=document.createRange();m.setStart(n,a),m.setEnd(t,s);var h=m.collapsed;return{start:h?d:p,end:h?p:d}}function io(e,o){if(window.getSelection){var n=window.getSelection(),a=e[hp()].length,t=Math.min(o.start,a),s=void 0===o.end?t:Math.min(o.end,a);if(!n.extend&&t>s){var i=s;s=t,t=i}var r=dp(e,t),l=dp(e,s);if(r&&l){var c=document.createRange();c.setStart(r.node,r.offset),n.removeAllRanges(),t>s?(n.addRange(c),n.extend(l.node,l.offset)):(c.setEnd(l.node,l.offset),n.addRange(c))}}}function ro(e){return zn(document.documentElement,e)}function lo(e){if(void 0!==e._hostParent)return e._hostParent;if("number"==typeof e.tag){do{e=e.return}while(e&&e.tag!==Sp);if(e)return e}return null}function co(e,o){for(var n=0,a=e;a;a=lo(a))n++;for(var t=0,s=o;s;s=lo(s))t++;for(;n-t>0;)e=lo(e),n--;for(;t-n>0;)o=lo(o),t--;for(var i=n;i--;){if(e===o||e===o.alternate)return e;e=lo(e),o=lo(o)}return null}function uo(e,o){for(;o;){if(e===o||e===o.alternate)return!0;o=lo(o)}return!1}function po(e){return lo(e)}function mo(e,o,n){for(var a=[];e;)a.push(e),e=lo(e);var t;for(t=a.length;t-- >0;)o(a[t],"captured",n);for(t=0;t<a.length;t++)o(a[t],"bubbled",n)}function ho(e,o,n,a,t){for(var s=e&&o?co(e,o):null,i=[];e&&e!==s;)i.push(e),e=lo(e);for(var r=[];o&&o!==s;)r.push(o),o=lo(o);var l;for(l=0;l<i.length;l++)n(i[l],"bubbled",a);for(l=r.length;l-- >0;)n(r[l],"captured",t)}function go(e,o,n){var a=o.dispatchConfig.phasedRegistrationNames[n];return Cp(e,a)}function yo(e,o,n){var a=go(e,n,o);a&&(n._dispatchListeners=rt(n._dispatchListeners,a),n._dispatchInstances=rt(n._dispatchInstances,e))}function fo(e){e&&e.dispatchConfig.phasedRegistrationNames&&Tp.traverseTwoPhase(e._targetInst,yo,e)}function bo(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var o=e._targetInst,n=o?Tp.getParentInstance(o):null;Tp.traverseTwoPhase(n,yo,e)}}function vo(e,o,n){if(e&&n&&n.dispatchConfig.registrationName){var a=n.dispatchConfig.registrationName,t=Cp(e,a);t&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}}function wo(e){e&&e.dispatchConfig.registrationName&&vo(e._targetInst,null,e)}function ko(e){lt(e,fo)}function qo(e){lt(e,bo)}function jo(e,o,n,a){Tp.traverseEnterLeave(n,a,vo,e,o)}function xo(e){lt(e,wo)}function So(e){this._root=e,this._startText=this.getText(),this._fallbackText=null}function To(e,o,n,a){this.dispatchConfig=e,this._targetInst=o,this.nativeEvent=n;var t=this.constructor.Interface;for(var s in t)if(t.hasOwnProperty(s)){var i=t[s];i?this[s]=i(n):"target"===s?this.target=a:this[s]=n[s]}var r=null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue;return this.isDefaultPrevented=r?Pn.thatReturnsTrue:Pn.thatReturnsFalse,this.isPropagationStopped=Pn.thatReturnsFalse,this}function Co(e,o,n,a){return Ap.call(this,e,o,n,a)}function Po(e,o,n,a){return Ap.call(this,e,o,n,a)}function Do(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function Io(e){switch(e){case"topCompositionStart":return Gp.compositionStart;case"topCompositionEnd":return Gp.compositionEnd;case"topCompositionUpdate":return Gp.compositionUpdate}}function zo(e,o){return"topKeyDown"===e&&o.keyCode===Fp}function Eo(e,o){switch(e){case"topKeyUp":return-1!==Mp.indexOf(o.keyCode);case"topKeyDown":return o.keyCode!==Fp;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Ao(e){var o=e.detail;return"object"==typeof o&&"data"in o?o.data:null}function Lo(e,o,n,a){var t,s;if(_p?t=Io(e):Vp?Eo(e,n)&&(t=Gp.compositionEnd):zo(e,n)&&(t=Gp.compositionStart),!t)return null;Hp&&(Vp||t!==Gp.compositionStart?t===Gp.compositionEnd&&Vp&&(s=Vp.getData()):Vp=Ip.getPooled(a));var i=Wp.getPooled(t,o,n,a);if(s)i.data=s;else{var r=Ao(n);null!==r&&(i.data=r)}return Dp.accumulateTwoPhaseDispatches(i),i}function Wo(e,o){switch(e){case"topCompositionEnd":return Ao(o);case"topKeyPress":return o.which!==Up?null:(Yp=!0,Zp);case"topTextInput":var n=o.data;return n===Zp&&Yp?null:n;default:return null}}function Oo(e,o){if(Vp){if("topCompositionEnd"===e||!_p&&Eo(e,o)){var n=Vp.getData();return Ip.release(Vp),Vp=null,n}return null}switch(e){case"topPaste":return null;case"topKeyPress":if(!Do(o)){if(o.char&&o.char.length>1)return o.char;if(o.which)return String.fromCharCode(o.which)}return null;case"topCompositionEnd":return Hp?null:o.data;default:return null}}function Ro(e,o,n,a){var t;if(!(t=Np?Wo(e,n):Oo(e,n)))return null;var s=Rp.getPooled(Gp.beforeInput,o,n,a);return s.data=t,Dp.accumulateTwoPhaseDispatches(s),s}function Mo(e){var o=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===o?!!$p[e.type]:"textarea"===o}function Fo(e,o,n){var a=Ap.getPooled(Xp.change,e,o,n);return a.type="change",Va.enqueueStateRestore(n),Dp.accumulateTwoPhaseDispatches(a),a}function _o(e){var o=e.nodeName&&e.nodeName.toLowerCase();return"select"===o||"input"===o&&"file"===e.type}function Bo(e){var o=Fo(od,e,nt(e));et.batchedUpdates(No,o)}function No(e){ht.enqueueEvents(e),ht.processEventQueue(!1)}function Ho(e){var o=ma.getNodeFromInstance(e);if(ws.updateValueIfChanged(o))return e}function Uo(e,o){if("topChange"===e)return o}function Zo(e,o){ed=e,od=o,ed.attachEvent("onpropertychange",Yo)}function Go(){ed&&(ed.detachEvent("onpropertychange",Yo),ed=null,od=null)}function Yo(e){"value"===e.propertyName&&Ho(od)&&Bo(e)}function Vo(e,o,n){"topFocus"===e?(Go(),Zo(o,n)):"topBlur"===e&&Go()}function Ko(e,o){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Ho(od)}function Jo(e){var o=e.nodeName;return o&&"input"===o.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function $o(e,o){if("topClick"===e)return Ho(o)}function Qo(e,o){if("topInput"===e||"topChange"===e)return Ho(o)}function Xo(e,o){if(null!=e){var n=e._wrapperState||o._wrapperState;if(n&&n.controlled&&"number"===o.type){var a=""+o.value;o.getAttribute("value")!==a&&o.setAttribute("value",a)}}}function en(e,o,n,a){return Ap.call(this,e,o,n,a)}function on(e){var o=this,n=o.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var a=cd[e];return!!a&&!!n[a]}function nn(e){return on}function an(e,o,n,a){return ld.call(this,e,o,n,a)}function tn(e){if("selectionStart"in e&&vp.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var o=window.getSelection();return{anchorNode:o.anchorNode,anchorOffset:o.anchorOffset,focusNode:o.focusNode,focusOffset:o.focusOffset}}}function sn(e,o){if(qd||null==vd||vd!==An())return null;var n=tn(vd);if(!kd||!In(kd,n)){kd=n;var a=Ap.getPooled(bd.select,wd,e,o);return a.type="select",a.target=vd,Dp.accumulateTwoPhaseDispatches(a),a}return null}function rn(e,o,n,a){return Ap.call(this,e,o,n,a)}function ln(e,o,n,a){return Ap.call(this,e,o,n,a)}function cn(e,o,n,a){return ld.call(this,e,o,n,a)}function un(e){var o,n=e.keyCode;return"charCode"in e?0===(o=e.charCode)&&13===n&&(o=13):o=n,o>=32||13===o?o:0}function pn(e){if(e.key){var o=Ad[e.key]||e.key;if("Unidentified"!==o)return o}if("keypress"===e.type){var n=Ed(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?Ld[e.keyCode]||"Unidentified":""}function dn(e,o,n,a){return ld.call(this,e,o,n,a)}function mn(e,o,n,a){return dd.call(this,e,o,n,a)}function hn(e,o,n,a){return ld.call(this,e,o,n,a)}function gn(e,o,n,a){return Ap.call(this,e,o,n,a)}function yn(e,o,n,a){return dd.call(this,e,o,n,a)}function fn(e){return!(!e||e.nodeType!==pm&&e.nodeType!==hm&&e.nodeType!==gm&&(e.nodeType!==mm||" react-mount-point-unstable "!==e.nodeValue))}function bn(e){return e?e.nodeType===hm?e.documentElement:e.firstChild:null}function vn(e){var o=bn(e);return!(!o||o.nodeType!==pm||!o.hasAttribute(ym))}function wn(e,o){switch(e){case"button":case"input":case"select":case"textarea":return!!o.autoFocus}return!1}function kn(e,o,n,a){xn(fn(n),"Target container is not a DOM element.");var t=n._reactRootContainer;if(t)Em.updateContainer(o,t,e,a);else{if(!vn(n))for(var s=void 0;s=n.lastChild;)n.removeChild(s);var i=Em.createContainer(n);t=n._reactRootContainer=i,Em.unbatchedUpdates(function(){Em.updateContainer(o,i,e,a)})}return Em.getPublicRootInstance(t)}var qn,jn=n(2),xn=n(1),Sn=n(85),Tn=n(0),Cn=n(86),Pn=n(4),Dn=n(10),In=n(97),zn=n(89),En=n(90),An=n(91),Ln=a,Wn=null,On={},Rn={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(e){Wn&&Ln("101"),Wn=Array.prototype.slice.call(e),t()},injectEventPluginsByName:function(e){var o=!1;for(var n in e)if(e.hasOwnProperty(n)){var a=e[n];On.hasOwnProperty(n)&&On[n]===a||(On[n]&&Ln("102",n),On[n]=a,o=!0)}o&&t()}},Mn=Rn,Fn=function(e){var o=this;if(o.instancePool.length){var n=o.instancePool.pop();return o.call(n,e),n}return new o(e)},_n=function(e,o){var n=this;if(n.instancePool.length){var a=n.instancePool.pop();return n.call(a,e,o),a}return new n(e,o)},Bn=function(e,o,n){var a=this;if(a.instancePool.length){var t=a.instancePool.pop();return a.call(t,e,o,n),t}return new a(e,o,n)},Nn=function(e,o,n,a){var t=this;if(t.instancePool.length){var s=t.instancePool.pop();return t.call(s,e,o,n,a),s}return new t(e,o,n,a)},Hn=function(e){var o=this;e instanceof o||Ln("25"),e.destructor(),o.instancePool.length<o.poolSize&&o.instancePool.push(e)},Un=Fn,Zn=function(e,o){var n=e;return n.instancePool=[],n.getPooled=o||Un,n.poolSize||(n.poolSize=10),n.release=Hn,n},Gn={addPoolingTo:Zn,oneArgumentPooler:Fn,twoArgumentPooler:_n,threeArgumentPooler:Bn,fourArgumentPooler:Nn},Yn=Gn,Vn={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(e){var o=Vn,n=e.Properties||{},a=e.DOMAttributeNamespaces||{},t=e.DOMAttributeNames||{},s=e.DOMPropertyNames||{},i=e.DOMMutationMethods||{};e.isCustomAttribute&&Jn._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var l in n){Jn.properties.hasOwnProperty(l)&&Ln("48",l);var c=l.toLowerCase(),u=n[l],p={attributeName:c,attributeNamespace:null,propertyName:l,mutationMethod:null,mustUseProperty:r(u,o.MUST_USE_PROPERTY),hasBooleanValue:r(u,o.HAS_BOOLEAN_VALUE),hasNumericValue:r(u,o.HAS_NUMERIC_VALUE),hasPositiveNumericValue:r(u,o.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:r(u,o.HAS_OVERLOADED_BOOLEAN_VALUE)};if(p.hasBooleanValue+p.hasNumericValue+p.hasOverloadedBooleanValue<=1||Ln("50",l),t.hasOwnProperty(l)){var d=t[l];p.attributeName=d}a.hasOwnProperty(l)&&(p.attributeNamespace=a[l]),s.hasOwnProperty(l)&&(p.propertyName=s[l]),i.hasOwnProperty(l)&&(p.mutationMethod=i[l]),Jn.properties[l]=p}}},Kn=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",Jn={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:Kn,ATTRIBUTE_NAME_CHAR:Kn+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var o=0;o<Jn._isCustomAttributeFunctions.length;o++)if((0,Jn._isCustomAttributeFunctions[o])(e))return!0;return!1},injection:Vn},$n=Jn,Qn={hasCachedChildNodes:1},Xn=Qn,ea={IndeterminateComponent:0,FunctionalComponent:1,ClassComponent:2,HostRoot:3,HostPortal:4,HostComponent:5,HostText:6,CoroutineComponent:7,CoroutineHandlerPhase:8,YieldComponent:9,Fragment:10},oa={ELEMENT_NODE:1,TEXT_NODE:3,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_FRAGMENT_NODE:11},na=oa,aa=ea.HostComponent,ta=ea.HostText,sa=na.ELEMENT_NODE,ia=na.COMMENT_NODE,ra=$n.ID_ATTRIBUTE_NAME,la=Xn,ca=Math.random().toString(36).slice(2),ua="__reactInternalInstance$"+ca,pa="__reactEventHandlers$"+ca,da={getClosestInstanceFromNode:h,getInstanceFromNode:g,getNodeFromInstance:y,precacheChildNodes:m,precacheNode:u,uncacheNode:d,precacheFiberNode:p,getFiberCurrentPropsFromNode:f,updateFiberProps:b},ma=da,ha={remove:function(e){e._reactInternalInstance=void 0},get:function(e){return e._reactInternalInstance},has:function(e){return void 0!==e._reactInternalInstance},set:function(e,o){e._reactInternalInstance=o}},ga=ha,ya=Tn.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,fa={ReactCurrentOwner:ya.ReactCurrentOwner},ba=fa,va=v,wa={NoEffect:0,PerformedWork:1,Placement:2,Update:4,PlacementAndUpdate:6,Deletion:8,ContentReset:16,Callback:32,Err:64,Ref:128},ka=ea.HostComponent,qa=ea.HostRoot,ja=ea.HostPortal,xa=ea.HostText,Sa=wa.NoEffect,Ta=wa.Placement,Ca=1,Pa=2,Da=3,Ia=function(e){return w(e)===Pa},za=function(e){var o=ga.get(e);return!!o&&w(o)===Pa},Ea=q,Aa=function(e){var o=q(e);if(!o)return null;for(var n=o;;){if(n.tag===ka||n.tag===xa)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===o)return null;for(;!n.sibling;){if(!n.return||n.return===o)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null},La=function(e){var o=q(e);if(!o)return null;for(var n=o;;){if(n.tag===ka||n.tag===xa)return n;if(n.child&&n.tag!==ja)n.child.return=n,n=n.child;else{if(n===o)return null;for(;!n.sibling;){if(!n.return||n.return===o)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null},Wa={isFiberMounted:Ia,isMounted:za,findCurrentFiberUsingSlowPath:Ea,findCurrentHostFiber:Aa,findCurrentHostFiberWithNoPortals:La},Oa={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(e){"function"!=typeof e.invokeGuardedCallback&&Ln("197"),Ra=e.invokeGuardedCallback}},invokeGuardedCallback:function(e,o,n,a,t,s,i,r,l){Ra.apply(Oa,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,o,n,a,t,s,i,r,l){if(Oa.invokeGuardedCallback.apply(this,arguments),Oa.hasCaughtError()){var c=Oa.clearCaughtError();Oa._hasRethrowError||(Oa._hasRethrowError=!0,Oa._rethrowError=c)}},rethrowCaughtError:function(){return Ma.apply(Oa,arguments)},hasCaughtError:function(){return Oa._hasCaughtError},clearCaughtError:function(){if(Oa._hasCaughtError){var e=Oa._caughtError;return Oa._caughtError=null,Oa._hasCaughtError=!1,e}Ln("198")}},Ra=function(e,o,n,a,t,s,i,r,l){Oa._hasCaughtError=!1,Oa._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{o.apply(n,c)}catch(e){Oa._caughtError=e,Oa._hasCaughtError=!0}},Ma=function(){if(Oa._hasRethrowError){var e=Oa._rethrowError;throw Oa._rethrowError=null,Oa._hasRethrowError=!1,e}},Fa=Oa,_a={injectComponentTree:function(e){qn=e}},Ba={isEndish:j,isMoveish:x,isStartish:S,executeDirectDispatch:I,executeDispatchesInOrder:C,executeDispatchesInOrderStopAtTrue:D,hasDispatches:z,getFiberCurrentPropsFromNode:function(e){return qn.getFiberCurrentPropsFromNode(e)},getInstanceFromNode:function(e){return qn.getInstanceFromNode(e)},getNodeFromInstance:function(e){return qn.getNodeFromInstance(e)},injection:_a},Na=Ba,Ha=null,Ua={injectFiberControlledHostComponent:function(e){Ha=e}},Za=null,Ga=null,Ya={injection:Ua,enqueueStateRestore:function(e){Za?Ga?Ga.push(e):Ga=[e]:Za=e},restoreStateIfNeeded:function(){if(Za){var e=Za,o=Ga;if(Za=null,Ga=null,E(e),o)for(var n=0;n<o.length;n++)E(o[n])}}},Va=Ya,Ka=function(e,o,n,a,t,s){return e(o,n,a,t,s)},Ja=function(e,o){return e(o)},$a=!1,Qa={injectStackBatchedUpdates:function(e){Ka=e},injectFiberBatchedUpdates:function(e){Ja=e}},Xa={batchedUpdates:W,injection:Qa},et=Xa,ot=na.TEXT_NODE,nt=O,at=ea.HostRoot;jn(M.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.targetInst=null,this.ancestors.length=0}}),Yn.addPoolingTo(M,Yn.threeArgumentPooler);var tt,st={_enabled:!0,_handleTopLevel:null,setHandleTopLevel:function(e){st._handleTopLevel=e},setEnabled:function(e){st._enabled=!!e},isEnabled:function(){return st._enabled},trapBubbledEvent:function(e,o,n){return n?Sn.listen(n,o,st.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,o,n){return n?Sn.capture(n,o,st.dispatchEvent.bind(null,e)):null},dispatchEvent:function(e,o){if(st._enabled){var n=nt(o),a=ma.getClosestInstanceFromNode(n);null===a||"number"!=typeof a.tag||Wa.isFiberMounted(a)||(a=null);var t=M.getPooled(e,o,a);try{et.batchedUpdates(F,t)}finally{M.release(t)}}}},it=st,rt=_,lt=B,ct=null,ut=function(e,o){e&&(Na.executeDispatchesInOrder(e,o),e.isPersistent()||e.constructor.release(e))},pt=function(e){return ut(e,!0)},dt=function(e){return ut(e,!1)},mt={injection:{injectEventPluginOrder:Mn.injectEventPluginOrder,injectEventPluginsByName:Mn.injectEventPluginsByName},getListener:function(e,o){var n;if("number"==typeof e.tag){var a=e.stateNode;if(!a)return null;var t=Na.getFiberCurrentPropsFromNode(a);if(!t)return null;if(n=t[o],H(o,e.type,t))return null}else{var s=e._currentElement;if("string"==typeof s||"number"==typeof s)return null;if(!e._rootNodeID)return null;var i=s.props;if(n=i[o],H(o,s.type,i))return null}return n&&"function"!=typeof n&&Ln("94",o,typeof n),n},extractEvents:function(e,o,n,a){for(var t,s=Mn.plugins,i=0;i<s.length;i++){var r=s[i];if(r){var l=r.extractEvents(e,o,n,a);l&&(t=rt(t,l))}}return t},enqueueEvents:function(e){e&&(ct=rt(ct,e))},processEventQueue:function(e){var o=ct;ct=null,e?lt(o,pt):lt(o,dt),ct&&Ln("95"),Fa.rethrowCaughtError()}},ht=mt,gt={handleTopLevel:function(e,o,n,a){U(ht.extractEvents(e,o,n,a))}},yt=gt;Cn.canUseDOM&&(tt=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var ft=Z,bt={animationend:G("Animation","AnimationEnd"),animationiteration:G("Animation","AnimationIteration"),animationstart:G("Animation","AnimationStart"),transitionend:G("Transition","TransitionEnd")},vt={},wt={};Cn.canUseDOM&&(wt=document.createElement("div").style,"AnimationEvent"in window||(delete bt.animationend.animation,delete bt.animationiteration.animation,delete bt.animationstart.animation),"TransitionEvent"in window||delete bt.transitionend.transition);var kt=Y,qt={topAbort:"abort",topAnimationEnd:kt("animationend")||"animationend",topAnimationIteration:kt("animationiteration")||"animationiteration",topAnimationStart:kt("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:kt("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},jt={topLevelTypes:qt},xt=jt,St=xt.topLevelTypes,Tt={},Ct=0,Pt="_reactListenersID"+(""+Math.random()).slice(2),Dt=jn({},yt,{setEnabled:function(e){it&&it.setEnabled(e)},isEnabled:function(){return!(!it||!it.isEnabled())},listenTo:function(e,o){for(var n=o,a=V(n),t=Mn.registrationNameDependencies[e],s=0;s<t.length;s++){var i=t[s];a.hasOwnProperty(i)&&a[i]||("topWheel"===i?ft("wheel")?it.trapBubbledEvent("topWheel","wheel",n):ft("mousewheel")?it.trapBubbledEvent("topWheel","mousewheel",n):it.trapBubbledEvent("topWheel","DOMMouseScroll",n):"topScroll"===i?it.trapCapturedEvent("topScroll","scroll",n):"topFocus"===i||"topBlur"===i?(it.trapCapturedEvent("topFocus","focus",n),it.trapCapturedEvent("topBlur","blur",n),a.topBlur=!0,a.topFocus=!0):"topCancel"===i?(ft("cancel",!0)&&it.trapCapturedEvent("topCancel","cancel",n),a.topCancel=!0):"topClose"===i?(ft("close",!0)&&it.trapCapturedEvent("topClose","close",n),a.topClose=!0):St.hasOwnProperty(i)&&it.trapBubbledEvent(i,St[i],n),a[i]=!0)}},isListeningToAllDependencies:function(e,o){for(var n=V(o),a=Mn.registrationNameDependencies[e],t=0;t<a.length;t++){var s=a[t];if(!n.hasOwnProperty(s)||!n[s])return!1}return!0},trapBubbledEvent:function(e,o,n){return it.trapBubbledEvent(e,o,n)},trapCapturedEvent:function(e,o,n){return it.trapCapturedEvent(e,o,n)}}),It=Dt,zt={disableNewFiberFeatures:!1,enableAsyncSubtreeAPI:!1},Et=zt,At={fiberAsyncScheduling:!1,useFiber:!0},Lt=At,Wt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ot=["Webkit","ms","Moz","O"];Object.keys(Wt).forEach(function(e){Ot.forEach(function(o){Wt[K(o,e)]=Wt[e]})});var Rt={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},Mt={isUnitlessNumber:Wt,shorthandPropertyExpansions:Rt},Ft=Mt,_t=Ft.isUnitlessNumber,Bt=J,Nt=!1;if(Cn.canUseDOM){var Ht=document.createElement("div").style;try{Ht.font=""}catch(a){Nt=!0}}var Ut,Zt={createDangerousStringForStyles:function(e){},setValueForStyles:function(e,o,n){var a=e.style;for(var t in o)if(o.hasOwnProperty(t)){var s=0===t.indexOf("--"),i=Bt(t,o[t],s);if("float"===t&&(t="cssFloat"),s)a.setProperty(t,i);else if(i)a[t]=i;else{var r=Nt&&Ft.shorthandPropertyExpansions[t];if(r)for(var l in r)a[l]="";else a[t]=""}}}},Gt=Zt,Yt={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"},Vt=Yt,Kt=new RegExp("^["+$n.ATTRIBUTE_NAME_START_CHAR+"]["+$n.ATTRIBUTE_NAME_CHAR+"]*$"),Jt={},$t={},Qt={setAttributeForID:function(e,o){e.setAttribute($n.ID_ATTRIBUTE_NAME,o)},setAttributeForRoot:function(e){e.setAttribute($n.ROOT_ATTRIBUTE_NAME,"")},getValueForProperty:function(e,o,n){},getValueForAttribute:function(e,o,n){},setValueForProperty:function(e,o,n){var a=$n.properties.hasOwnProperty(o)?$n.properties[o]:null;if(a){var t=a.mutationMethod;if(t)t(e,n);else{if(Q(a,n))return void Qt.deleteValueForProperty(e,o);if(a.mustUseProperty)e[a.propertyName]=n;else{var s=a.attributeName,i=a.attributeNamespace;i?e.setAttributeNS(i,s,""+n):a.hasBooleanValue||a.hasOverloadedBooleanValue&&!0===n?e.setAttribute(s,""):e.setAttribute(s,""+n)}}}else if($n.isCustomAttribute(o))return void Qt.setValueForAttribute(e,o,n)},setValueForAttribute:function(e,o,n){$(o)&&(null==n?e.removeAttribute(o):e.setAttribute(o,""+n))},deleteValueForAttribute:function(e,o){e.removeAttribute(o)},deleteValueForProperty:function(e,o){var n=$n.properties.hasOwnProperty(o)?$n.properties[o]:null;if(n){var a=n.mutationMethod;if(a)a(e,void 0);else if(n.mustUseProperty){var t=n.propertyName;n.hasBooleanValue?e[t]=!1:e[t]=""}else e.removeAttribute(n.attributeName)}else $n.isCustomAttribute(o)&&e.removeAttribute(o)}},Xt=Qt,es=ba.ReactDebugCurrentFrame,os={current:null,phase:null,resetCurrentFiber:oe,setCurrentFiber:ne,getCurrentFiberOwnerName:X,getCurrentFiberStackAddendum:ee},ns=os,as={getHostProps:function(e,o){var n=e,a=o.value,t=o.checked;return jn({type:void 0,step:void 0,min:void 0,max:void 0},o,{defaultChecked:void 0,defaultValue:void 0,value:null!=a?a:n._wrapperState.initialValue,checked:null!=t?t:n._wrapperState.initialChecked})},initWrapperState:function(e,o){var n=o.defaultValue;e._wrapperState={initialChecked:null!=o.checked?o.checked:o.defaultChecked,initialValue:null!=o.value?o.value:n,controlled:ae(o)}},updateWrapper:function(e,o){var n=e,a=o.checked;null!=a&&Xt.setValueForProperty(n,"checked",a||!1);var t=o.value;if(null!=t)if(0===t&&""===n.value)n.value="0";else if("number"===o.type){var s=parseFloat(n.value)||0;(t!=s||t==s&&n.value!=t)&&(n.value=""+t)}else n.value!==""+t&&(n.value=""+t);else null==o.value&&null!=o.defaultValue&&n.defaultValue!==""+o.defaultValue&&(n.defaultValue=""+o.defaultValue),null==o.checked&&null!=o.defaultChecked&&(n.defaultChecked=!!o.defaultChecked)},postMountWrapper:function(e,o){var n=e;switch(o.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":n.value="",n.value=n.defaultValue;break;default:n.value=n.value}var a=n.name;""!==a&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==a&&(n.name=a)},restoreControlledState:function(e,o){var n=e;as.updateWrapper(n,o),te(n,o)}},ts=as,ss={validateProps:function(e,o){},postMountWrapper:function(e,o){null!=o.value&&e.setAttribute("value",o.value)},getHostProps:function(e,o){var n=jn({children:void 0},o),a=se(o.children);return a&&(n.children=a),n}},is=ss,rs=!1,ls={getHostProps:function(e,o){return jn({},o,{value:void 0})},initWrapperState:function(e,o){var n=e,a=o.value;n._wrapperState={initialValue:null!=a?a:o.defaultValue,wasMultiple:!!o.multiple},void 0===o.value||void 0===o.defaultValue||rs||(rs=!0)},postMountWrapper:function(e,o){var n=e;n.multiple=!!o.multiple;var a=o.value;null!=a?ie(n,!!o.multiple,a):null!=o.defaultValue&&ie(n,!!o.multiple,o.defaultValue)},postUpdateWrapper:function(e,o){var n=e;n._wrapperState.initialValue=void 0;var a=n._wrapperState.wasMultiple;n._wrapperState.wasMultiple=!!o.multiple;var t=o.value;null!=t?ie(n,!!o.multiple,t):a!==!!o.multiple&&(null!=o.defaultValue?ie(n,!!o.multiple,o.defaultValue):ie(n,!!o.multiple,o.multiple?[]:""))},restoreControlledState:function(e,o){var n=e,a=o.value;null!=a&&ie(n,!!o.multiple,a)}},cs=ls,us={getHostProps:function(e,o){var n=e;return null!=o.dangerouslySetInnerHTML&&Ln("91"),jn({},o,{value:void 0,defaultValue:void 0,children:""+n._wrapperState.initialValue})},initWrapperState:function(e,o){var n=e,a=o.value,t=a;if(null==a){var s=o.defaultValue,i=o.children;null!=i&&(null!=s&&Ln("92"),Array.isArray(i)&&(i.length<=1||Ln("93"),i=i[0]),s=""+i),null==s&&(s=""),t=s}n._wrapperState={initialValue:""+t}},updateWrapper:function(e,o){var n=e,a=o.value;if(null!=a){var t=""+a;t!==n.value&&(n.value=t),null==o.defaultValue&&(n.defaultValue=t)}null!=o.defaultValue&&(n.defaultValue=o.defaultValue)},postMountWrapper:function(e,o){var n=e,a=n.textContent;a===n._wrapperState.initialValue&&(n.value=a)},restoreControlledState:function(e,o){us.updateWrapper(e,o)}},ps=us,ds={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},ms=ds,hs=jn||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},gs=hs({menuitem:!0},ms),ys=gs,fs="__html",bs=le,vs={_getTrackerFromNode:ue,track:function(e){ue(e)||(e._valueTracker=me(e))},updateValueIfChanged:function(e){if(!e)return!1;var o=ue(e);if(!o)return!0;var n=o.getValue(),a=de(e);return a!==n&&(o.setValue(a),!0)},stopTracking:function(e){var o=ue(e);o&&o.stopTracking()}},ws=vs,ks=he,qs=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(o,n,a,t){MSApp.execUnsafeLocalFunction(function(){return e(o,n,a,t)})}:e},js=qs,xs=js(function(e,o){if(e.namespaceURI!==Vt.svg||"innerHTML"in e)e.innerHTML=o;else{Ut=Ut||document.createElement("div"),Ut.innerHTML="<svg>"+o+"</svg>";for(var n=Ut.firstChild;n.firstChild;)e.appendChild(n.firstChild)}}),Ss=xs,Ts=/["'&<>]/,Cs=ye,Ps=na.TEXT_NODE,Ds=function(e,o){if(o){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===Ps)return void(n.nodeValue=o)}e.textContent=o};Cn.canUseDOM&&("textContent"in document.documentElement||(Ds=function(e,o){if(e.nodeType===Ps)return void(e.nodeValue=o);Ss(e,Cs(o))}));var Is=Ds,zs=ns.getCurrentFiberOwnerName,Es=na.DOCUMENT_NODE,As=na.DOCUMENT_FRAGMENT_NODE,Ls=It.listenTo,Ws=Mn.registrationNameModules,Os="dangerouslySetInnerHTML",Rs="suppressContentEditableWarning",Ms="children",Fs="style",_s="__html",Bs=Vt.html,Ns=Vt.svg,Hs=Vt.mathml,Us={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Zs={getChildNamespace:function(e,o){return null==e||e===Bs?qe(o):e===Ns&&"foreignObject"===o?Bs:e},createElement:function(e,o,n,a){var t,s=n.nodeType===Es?n:n.ownerDocument,i=a;if(i===Bs&&(i=qe(e)),i===Bs)if("script"===e){var r=s.createElement("div");r.innerHTML="<script><\/script>";var l=r.firstChild;t=r.removeChild(l)}else t=o.is?s.createElement(e,{is:o.is}):s.createElement(e);else t=s.createElementNS(i,e);return t},setInitialProperties:function(e,o,n,a){var t,s=ks(o,n);switch(o){case"audio":case"form":case"iframe":case"img":case"image":case"link":case"object":case"source":case"video":case"details":ve(e,o),t=n;break;case"input":ts.initWrapperState(e,n),t=ts.getHostProps(e,n),ve(e,o),fe(a,"onChange");break;case"option":is.validateProps(e,n),t=is.getHostProps(e,n);break;case"select":cs.initWrapperState(e,n),t=cs.getHostProps(e,n),ve(e,o),fe(a,"onChange");break;case"textarea":ps.initWrapperState(e,n),t=ps.getHostProps(e,n),ve(e,o),fe(a,"onChange");break;default:t=n}switch(bs(o,t,zs),we(e,a,t,s),o){case"input":ws.track(e),ts.postMountWrapper(e,n);break;case"textarea":ws.track(e),ps.postMountWrapper(e,n);break;case"option":is.postMountWrapper(e,n);break;case"select":cs.postMountWrapper(e,n);break;default:"function"==typeof t.onClick&&be(e)}},diffProperties:function(e,o,n,a,t){var s,i,r=null;switch(o){case"input":s=ts.getHostProps(e,n),i=ts.getHostProps(e,a),r=[];break;case"option":s=is.getHostProps(e,n),i=is.getHostProps(e,a),r=[];break;case"select":s=cs.getHostProps(e,n),i=cs.getHostProps(e,a),r=[];break;case"textarea":s=ps.getHostProps(e,n),i=ps.getHostProps(e,a),r=[];break;default:s=n,i=a,"function"!=typeof s.onClick&&"function"==typeof i.onClick&&be(e)}bs(o,i,zs);var l,c,u=null;for(l in s)if(!i.hasOwnProperty(l)&&s.hasOwnProperty(l)&&null!=s[l])if(l===Fs){var p=s[l];for(c in p)p.hasOwnProperty(c)&&(u||(u={}),u[c]="")}else l===Os||l===Ms||l===Rs||(Ws.hasOwnProperty(l)?r||(r=[]):(r=r||[]).push(l,null));for(l in i){var d=i[l],m=null!=s?s[l]:void 0;if(i.hasOwnProperty(l)&&d!==m&&(null!=d||null!=m))if(l===Fs)if(m){for(c in m)!m.hasOwnProperty(c)||d&&d.hasOwnProperty(c)||(u||(u={}),u[c]="");for(c in d)d.hasOwnProperty(c)&&m[c]!==d[c]&&(u||(u={}),u[c]=d[c])}else u||(r||(r=[]),r.push(l,u)),u=d;else if(l===Os){var h=d?d[_s]:void 0,g=m?m[_s]:void 0;null!=h&&g!==h&&(r=r||[]).push(l,""+h)}else l===Ms?m===d||"string"!=typeof d&&"number"!=typeof d||(r=r||[]).push(l,""+d):l===Rs||(Ws.hasOwnProperty(l)?(d&&fe(t,l),r||m===d||(r=[])):(r=r||[]).push(l,d))}return u&&(r=r||[]).push(Fs,u),r},updateProperties:function(e,o,n,a,t){switch(ke(e,o,ks(n,a),ks(n,t)),n){case"input":ts.updateWrapper(e,t),ws.updateValueIfChanged(e);break;case"textarea":ps.updateWrapper(e,t);break;case"select":cs.postUpdateWrapper(e,t)}},diffHydratedProperties:function(e,o,n,a){switch(o){case"audio":case"form":case"iframe":case"img":case"image":case"link":case"object":case"source":case"video":case"details":ve(e,o);break;case"input":ts.initWrapperState(e,n),ve(e,o),fe(a,"onChange");break;case"option":is.validateProps(e,n);break;case"select":cs.initWrapperState(e,n),ve(e,o),fe(a,"onChange");break;case"textarea":ps.initWrapperState(e,n),ve(e,o),fe(a,"onChange")}bs(o,n,zs);var t=null;for(var s in n)if(n.hasOwnProperty(s)){var i=n[s];s===Ms?"string"==typeof i?e.textContent!==i&&(t=[Ms,i]):"number"==typeof i&&e.textContent!==""+i&&(t=[Ms,""+i]):Ws.hasOwnProperty(s)&&i&&fe(a,s)}switch(o){case"input":ws.track(e),ts.postMountWrapper(e,n);break;case"textarea":ws.track(e),ps.postMountWrapper(e,n);break;case"select":case"option":break;default:"function"==typeof n.onClick&&be(e)}return t},diffHydratedText:function(e,o){return e.nodeValue!==o},warnForDeletedHydratableElement:function(e,o){},warnForDeletedHydratableText:function(e,o){},warnForInsertedHydratedElement:function(e,o,n){},warnForInsertedHydratedText:function(e,o){},restoreControlledState:function(e,o,n){switch(o){case"input":return void ts.restoreControlledState(e,n);case"textarea":return void ps.restoreControlledState(e,n);case"select":return void cs.restoreControlledState(e,n)}}},Gs=Zs,Ys=void 0,Vs=void 0;if(Cn.canUseDOM)if("function"!=typeof requestAnimationFrame)Ln("192");else if("function"!=typeof requestIdleCallback){var Ks=null,Js=null,$s=!1,Qs=!1,Xs=0,ei=33,oi=33,ni={timeRemaining:"object"==typeof performance&&"function"==typeof performance.now?function(){return Xs-performance.now()}:function(){return Xs-Date.now()}},ai="__reactIdleCallback$"+Math.random().toString(36).slice(2),ti=function(e){if(e.source===window&&e.data===ai){$s=!1;var o=Js;Js=null,o&&o(ni)}};window.addEventListener("message",ti,!1);var si=function(e){Qs=!1;var o=e-Xs+oi;o<oi&&ei<oi?(o<8&&(o=8),oi=o<ei?ei:o):ei=o,Xs=e+oi,$s||($s=!0,window.postMessage(ai,"*"));var n=Ks;Ks=null,n&&n(e)};Ys=function(e){return Ks=e,Qs||(Qs=!0,requestAnimationFrame(si)),0},Vs=function(e){return Js=e,Qs||(Qs=!0,requestAnimationFrame(si)),0}}else Ys=requestAnimationFrame,Vs=requestIdleCallback;else Ys=function(e){return setTimeout(e,16),0},Vs=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0}})}),0};var ii,ri,li=Ys,ci=Vs,ui={rAF:li,rIC:ci},pi={NoWork:0,SynchronousPriority:1,TaskPriority:2,HighPriority:3,LowPriority:4,OffscreenPriority:5},di=wa.Callback,mi=pi.NoWork,hi=pi.SynchronousPriority,gi=pi.TaskPriority,yi=ea.ClassComponent,fi=ea.HostRoot,bi=Ie,vi=ze,wi=Ee,ki=Ae,qi=Le,ji=Oe,xi=Re,Si={addUpdate:bi,addReplaceUpdate:vi,addForceUpdate:wi,getUpdatePriority:ki,addTopLevelUpdate:qi,beginUpdateQueue:ji,commitCallbacks:xi},Ti=[],Ci=-1,Pi=function(e){return{current:e}},Di=function(){return-1===Ci},Ii=function(e,o){Ci<0||(e.current=Ti[Ci],Ti[Ci]=null,Ci--)},zi=function(e,o,n){Ci++,Ti[Ci]=e.current,e.current=o},Ei=function(){for(;Ci>-1;)Ti[Ci]=null,Ci--},Ai={createCursor:Pi,isEmpty:Di,pop:Ii,push:zi,reset:Ei},Li=jn||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Wi=Wa.isFiberMounted,Oi=ea.ClassComponent,Ri=ea.HostRoot,Mi=Ai.createCursor,Fi=Ai.pop,_i=Ai.push,Bi=Mi(Dn),Ni=Mi(!1),Hi=Dn,Ui=Me,Zi=Fe,Gi=function(e,o){var n=e.type,a=n.contextTypes;if(!a)return Dn;var t=e.stateNode;if(t&&t.__reactInternalMemoizedUnmaskedChildContext===o)return t.__reactInternalMemoizedMaskedChildContext;var s={};for(var i in a)s[i]=o[i];return t&&Fe(e,o,s),s},Yi=function(){return Ni.current},Vi=_e,Ki=Be,Ji=Ne,$i=function(e,o,n){null!=Bi.cursor&&Ln("168"),_i(Bi,o,e),_i(Ni,n,e)},Qi=He,Xi=function(e){if(!Be(e))return!1;var o=e.stateNode,n=o&&o.__reactInternalMemoizedMergedChildContext||Dn;return Hi=Bi.current,_i(Bi,n,e),_i(Ni,!1,e),!0},er=function(e){var o=e.stateNode;o||Ln("169");var n=He(e,Hi,!0);o.__reactInternalMemoizedMergedChildContext=n,Fi(Ni,e),Fi(Bi,e),_i(Bi,n,e),_i(Ni,!0,e)},or=function(){Hi=Dn,Bi.current=Dn,Ni.current=!1},nr=function(e){Wi(e)&&e.tag===Oi||Ln("170");for(var o=e;o.tag!==Ri;){if(Be(o))return o.stateNode.__reactInternalMemoizedMergedChildContext;var n=o.return;n||Ln("171"),o=n}return o.stateNode.context},ar={getUnmaskedContext:Ui,cacheContext:Zi,getMaskedContext:Gi,hasContextChanged:Yi,isContextConsumer:Vi,isContextProvider:Ki,popContextProvider:Ji,pushTopLevelContextObject:$i,processChildContext:Qi,pushContextProvider:Xi,invalidateContextProvider:er,resetContext:or,findCurrentUnmaskedContext:nr},tr={NoContext:0,AsyncUpdates:1},sr=ea.IndeterminateComponent,ir=ea.ClassComponent,rr=ea.HostRoot,lr=ea.HostComponent,cr=ea.HostText,ur=ea.HostPortal,pr=ea.CoroutineComponent,dr=ea.YieldComponent,mr=ea.Fragment,hr=pi.NoWork,gr=tr.NoContext,yr=wa.NoEffect,fr=function(e,o,n){return{tag:e,key:o,type:null,stateNode:null,return:null,child:null,sibling:null,index:0,ref:null,pendingProps:null,memoizedProps:null,updateQueue:null,memoizedState:null,internalContextTag:n,effectTag:yr,nextEffect:null,firstEffect:null,lastEffect:null,pendingWorkPriority:hr,alternate:null}},br=function(e,o){var n=e.alternate;return null===n?(n=fr(e.tag,e.key,e.internalContextTag),n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.effectTag=hr,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.pendingWorkPriority=o,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n},vr=function(){return fr(rr,null,gr)},wr=function(e,o,n){var a=Ze(e.type,e.key,o,null);return a.pendingProps=e.props,a.pendingWorkPriority=n,a},kr=function(e,o,n){var a=fr(mr,null,o);return a.pendingProps=e,a.pendingWorkPriority=n,a},qr=function(e,o,n){var a=fr(cr,null,o);return a.pendingProps=e,a.pendingWorkPriority=n,a},jr=Ze,xr=function(){var e=fr(lr,null,gr);return e.type="DELETED",e},Sr=function(e,o,n){var a=fr(pr,e.key,o);return a.type=e.handler,a.pendingProps=e,a.pendingWorkPriority=n,a},Tr=function(e,o,n){return fr(dr,null,o)},Cr=function(e,o,n){var a=fr(ur,e.key,o);return a.pendingProps=e.children||[],a.pendingWorkPriority=n,a.stateNode={containerInfo:e.containerInfo,implementation:e.implementation},a},Pr=function(e,o){return e!==hr&&(o===hr||o>e)?e:o},Dr={createWorkInProgress:br,createHostRootFiber:vr,createFiberFromElement:wr,createFiberFromFragment:kr,createFiberFromText:qr,createFiberFromElementType:jr,createFiberFromHostInstanceForDeletion:xr,createFiberFromCoroutine:Sr,createFiberFromYield:Tr,createFiberFromPortal:Cr,largerPriority:Pr},Ir=Dr.createHostRootFiber,zr=function(e){var o=Ir(),n={current:o,containerInfo:e,isScheduled:!1,nextScheduledRoot:null,context:null,pendingContext:null};return o.stateNode=n,n},Er={createFiberRoot:zr},Ar=function(e,o,n){return"\n    in "+(e||"Unknown")+(o?" (at "+o.fileName.replace(/^.*[\\\/]/,"")+":"+o.lineNumber+")":n?" (created by "+n+")":"")},Lr=ea.IndeterminateComponent,Wr=ea.FunctionalComponent,Or=ea.ClassComponent,Rr=ea.HostComponent,Mr={getStackAddendumByWorkInProgressFiber:Ye},Fr=function(e){return!0},_r=Fr,Br={injectDialog:function(e){_r!==Fr&&Ln("172"),"function"!=typeof e&&Ln("173"),_r=e}},Nr=Ve,Hr={injection:Br,logCapturedError:Nr};"function"==typeof Symbol&&Symbol.for?(ii=Symbol.for("react.coroutine"),ri=Symbol.for("react.yield")):(ii=60104,ri=60105);var Ur=function(e,o,n){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ii,key:null==a?null:""+a,children:e,handler:o,props:n}},Zr=function(e){return{$$typeof:ri,value:e}},Gr=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===ii},Yr=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===ri},Vr=ri,Kr=ii,Jr={createCoroutine:Ur,createYield:Zr,isCoroutine:Gr,isYield:Yr,REACT_YIELD_TYPE:Vr,REACT_COROUTINE_TYPE:Kr},$r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.portal")||60106,Qr=function(e,o,n){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$r,key:null==a?null:""+a,children:e,containerInfo:o,implementation:n}},Xr=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===$r},el=$r,ol={createPortal:Qr,isPortal:Xr,REACT_PORTAL_TYPE:el},nl=Jr.REACT_COROUTINE_TYPE,al=Jr.REACT_YIELD_TYPE,tl=ol.REACT_PORTAL_TYPE,sl=Dr.createWorkInProgress,il=Dr.createFiberFromElement,rl=Dr.createFiberFromFragment,ll=Dr.createFiberFromText,cl=Dr.createFiberFromCoroutine,ul=Dr.createFiberFromYield,pl=Dr.createFiberFromPortal,dl=Array.isArray,ml=ea.FunctionalComponent,hl=ea.ClassComponent,gl=ea.HostText,yl=ea.HostPortal,fl=ea.CoroutineComponent,bl=ea.YieldComponent,vl=ea.Fragment,wl=wa.NoEffect,kl=wa.Placement,ql=wa.Deletion,jl="function"==typeof Symbol&&Symbol.iterator,xl="@@iterator",Sl="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,Tl=Qe(!0,!0),Cl=Qe(!1,!0),Pl=Qe(!1,!1),Dl=function(e,o){if(null!==e&&o.child!==e.child&&Ln("153"),null!==o.child){var n=o.child,a=sl(n,n.pendingWorkPriority);for(a.pendingProps=n.pendingProps,o.child=a,a.return=o;null!==n.sibling;)n=n.sibling,a=a.sibling=sl(n,n.pendingWorkPriority),a.pendingProps=n.pendingProps,a.return=o;a.sibling=null}},Il={reconcileChildFibers:Tl,reconcileChildFibersInPlace:Cl,mountChildFibersInPlace:Pl,cloneChildFibers:Dl},zl=wa.Update,El=tr.AsyncUpdates,Al=ar.cacheContext,Ll=ar.getMaskedContext,Wl=ar.getUnmaskedContext,Ol=ar.isContextConsumer,Rl=Si.addUpdate,Ml=Si.addReplaceUpdate,Fl=Si.addForceUpdate,_l=Si.beginUpdateQueue,Bl=ar,Nl=Bl.hasContextChanged,Hl=Wa.isMounted,Ul=function(e,o,n,a){function t(e,o,n,a,t,s){if(null===o||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var i=e.stateNode,r=e.type;return"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,t,s):!r.prototype||!r.prototype.isPureReactComponent||!In(o,n)||!In(a,t)}function s(e,o){o.props=e.memoizedProps,o.state=e.memoizedState}function i(e,o){o.updater=d,e.stateNode=o,ga.set(o,e)}function r(e,o){var n=e.type,a=Wl(e),t=Ol(e),s=t?Ll(e,a):Dn,r=new n(o,s);return i(e,r),t&&Al(e,a,s),r}function l(e,o){var n=o.state;o.componentWillMount(),n!==o.state&&d.enqueueReplaceState(o,o.state,null)}function c(e,o,n,a){var t=o.state;o.componentWillReceiveProps(n,a),o.state!==t&&d.enqueueReplaceState(o,o.state,null)}function u(e,o){var n=e.alternate,a=e.stateNode,t=a.state||null,s=e.pendingProps;s||Ln("158");var i=Wl(e);if(a.props=s,a.state=t,a.refs=Dn,a.context=Ll(e,i),Et.enableAsyncSubtreeAPI&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent&&(e.internalContextTag|=El),"function"==typeof a.componentWillMount){l(e,a);var r=e.updateQueue;null!==r&&(a.state=_l(n,e,r,a,t,s,o))}"function"==typeof a.componentDidMount&&(e.effectTag|=zl)}function p(e,o,i){var r=o.stateNode;s(o,r);var l=o.memoizedProps,u=o.pendingProps;u||null==(u=l)&&Ln("159");var p=r.context,d=Wl(o),m=Ll(o,d);"function"!=typeof r.componentWillReceiveProps||l===u&&p===m||c(o,r,u,m);var h=o.memoizedState,g=void 0;if(g=null!==o.updateQueue?_l(e,o,o.updateQueue,r,h,u,i):h,!(l!==u||h!==g||Nl()||null!==o.updateQueue&&o.updateQueue.hasForceUpdate))return"function"==typeof r.componentDidUpdate&&(l===e.memoizedProps&&h===e.memoizedState||(o.effectTag|=zl)),!1;var y=t(o,l,u,h,g,m);return y?("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(u,g,m),"function"==typeof r.componentDidUpdate&&(o.effectTag|=zl)):("function"==typeof r.componentDidUpdate&&(l===e.memoizedProps&&h===e.memoizedState||(o.effectTag|=zl)),n(o,u),a(o,g)),r.props=u,r.state=g,r.context=m,y}var d={isMounted:Hl,enqueueSetState:function(n,a,t){var s=ga.get(n),i=o(s,!1);t=void 0===t?null:t,Rl(s,a,t,i),e(s,i)},enqueueReplaceState:function(n,a,t){var s=ga.get(n),i=o(s,!1);t=void 0===t?null:t,Ml(s,a,t,i),e(s,i)},enqueueForceUpdate:function(n,a){var t=ga.get(n),s=o(t,!1);a=void 0===a?null:a,Fl(t,a,s),e(t,s)}};return{adoptClassInstance:i,constructClassInstance:r,mountClassInstance:u,updateClassInstance:p}},Zl=Il.mountChildFibersInPlace,Gl=Il.reconcileChildFibers,Yl=Il.reconcileChildFibersInPlace,Vl=Il.cloneChildFibers,Kl=Si.beginUpdateQueue,Jl=ar.getMaskedContext,$l=ar.getUnmaskedContext,Ql=ar.hasContextChanged,Xl=ar.pushContextProvider,ec=ar.pushTopLevelContextObject,oc=ar.invalidateContextProvider,nc=ea.IndeterminateComponent,ac=ea.FunctionalComponent,tc=ea.ClassComponent,sc=ea.HostRoot,ic=ea.HostComponent,rc=ea.HostText,lc=ea.HostPortal,cc=ea.CoroutineComponent,uc=ea.CoroutineHandlerPhase,pc=ea.YieldComponent,dc=ea.Fragment,mc=pi.NoWork,hc=pi.OffscreenPriority,gc=wa.PerformedWork,yc=wa.Placement,fc=wa.ContentReset,bc=wa.Err,vc=wa.Ref,wc=ba.ReactCurrentOwner,kc=function(e,o,n,a,t){function s(e,o,n){i(e,o,n,o.pendingWorkPriority)}function i(e,o,n,a){null===e?o.child=Zl(o,o.child,n,a):e.child===o.child?o.child=Gl(o,o.child,n,a):o.child=Yl(o,o.child,n,a)}function r(e,o){var n=o.pendingProps;if(Ql())null===n&&(n=o.memoizedProps);else if(null===n||o.memoizedProps===n)return b(e,o);return s(e,o,n),w(o,n),o.child}function l(e,o){var n=o.ref;null===n||e&&e.ref===n||(o.effectTag|=vc)}function c(e,o){var n=o.type,a=o.pendingProps,t=o.memoizedProps;if(Ql())null===a&&(a=t);else{if(null===a||t===a)return b(e,o);if("function"==typeof n.shouldComponentUpdate&&!n.shouldComponentUpdate(t,a))return w(o,a),b(e,o)}var i,r=$l(o);return i=n(a,Jl(o,r)),o.effectTag|=gc,s(e,o,i),w(o,a),o.child}function u(e,o,n){var a=Xl(o),t=void 0;return null===e?o.stateNode?Ln("153"):(L(o,o.pendingProps),W(o,n),t=!0):t=O(e,o,n),p(e,o,t,a)}function p(e,o,n,a){if(l(e,o),!n)return b(e,o);var t=o.stateNode;wc.current=o;var i=void 0;return i=t.render(),o.effectTag|=gc,s(e,o,i),k(o,t.state),w(o,t.props),a&&oc(o),o.child}function d(e,o,n){var a=o.stateNode;a.pendingContext?ec(o,a.pendingContext,a.pendingContext!==a.context):a.context&&ec(o,a.context,!1),P(o,a.containerInfo);var t=o.updateQueue;if(null!==t){var i=o.memoizedState,r=Kl(e,o,t,null,i,null,n);if(i===r)return I(),b(e,o);var l=r.element;return null!==e&&null!==e.child||!D(o)?(I(),s(e,o,l)):(o.effectTag|=yc,o.child=Zl(o,o.child,l,n)),k(o,r),o.child}return I(),b(e,o)}function m(e,o,n){C(o),null===e&&z(o);var a=o.type,t=o.memoizedProps,i=o.pendingProps;null===i&&null===(i=t)&&Ln("154");var r=null!==e?e.memoizedProps:null;if(Ql());else if(null===i||t===i)return b(e,o);var c=i.children;return x(a,i)?c=null:r&&x(a,r)&&(o.effectTag|=fc),l(e,o),n!==hc&&!S&&T(a,i)?(o.pendingWorkPriority=hc,null):(s(e,o,c),w(o,i),o.child)}function h(e,o){null===e&&z(o);var n=o.pendingProps;return null===n&&(n=o.memoizedProps),w(o,n),null}function g(e,o,n){null!==e&&Ln("155");var a,t=o.type,i=o.pendingProps,r=$l(o);if(a=t(i,Jl(o,r)),o.effectTag|=gc,"object"==typeof a&&null!==a&&"function"==typeof a.render){o.tag=tc;var l=Xl(o);return A(o,a),W(o,n),p(e,o,!0,l)}return o.tag=ac,s(e,o,a),w(o,i),o.child}function y(e,o){var n=o.pendingProps;Ql()?null===n&&null===(n=e&&e.memoizedProps)&&Ln("154"):null!==n&&o.memoizedProps!==n||(n=o.memoizedProps);var a=n.children,t=o.pendingWorkPriority;return null===e?o.stateNode=Zl(o,o.stateNode,a,t):e.child===o.child?o.stateNode=Gl(o,o.stateNode,a,t):o.stateNode=Yl(o,o.stateNode,a,t),w(o,n),o.stateNode}function f(e,o){P(o,o.stateNode.containerInfo);var n=o.pendingWorkPriority,a=o.pendingProps;if(Ql())null===a&&null==(a=e&&e.memoizedProps)&&Ln("154");else if(null===a||o.memoizedProps===a)return b(e,o);return null===e?(o.child=Yl(o,o.child,a,n),w(o,a)):(s(e,o,a),w(o,a)),o.child}function b(e,o){return Vl(e,o),o.child}function v(e,o){switch(o.tag){case tc:Xl(o);break;case lc:P(o,o.stateNode.containerInfo)}return null}function w(e,o){e.memoizedProps=o}function k(e,o){e.memoizedState=o}function q(e,o,n){if(o.pendingWorkPriority===mc||o.pendingWorkPriority>n)return v(e,o);switch(o.tag){case nc:return g(e,o,n);case ac:return c(e,o);case tc:return u(e,o,n);case sc:return d(e,o,n);case ic:return m(e,o,n);case rc:return h(e,o);case uc:o.tag=cc;case cc:return y(e,o);case pc:return null;case lc:return f(e,o);case dc:return r(e,o);default:Ln("156")}}function j(e,o,n){switch(o.tag){case tc:Xl(o);break;case sc:var a=o.stateNode;P(o,a.containerInfo);break;default:Ln("157")}if(o.effectTag|=bc,null===e?o.child=null:o.child!==e.child&&(o.child=e.child),o.pendingWorkPriority===mc||o.pendingWorkPriority>n)return v(e,o);if(o.firstEffect=null,o.lastEffect=null,i(e,o,null,n),o.tag===tc){var t=o.stateNode;o.memoizedProps=t.props,o.memoizedState=t.state}return o.child}var x=e.shouldSetTextContent,S=e.useSyncScheduling,T=e.shouldDeprioritizeSubtree,C=o.pushHostContext,P=o.pushHostContainer,D=n.enterHydrationState,I=n.resetHydrationState,z=n.tryToClaimNextHydratableInstance,E=Ul(a,t,w,k),A=E.adoptClassInstance,L=E.constructClassInstance,W=E.mountClassInstance,O=E.updateClassInstance;return{beginWork:q,beginFailedWork:j}},qc=Il.reconcileChildFibers,jc=ar.popContextProvider,xc=ea.IndeterminateComponent,Sc=ea.FunctionalComponent,Tc=ea.ClassComponent,Cc=ea.HostRoot,Pc=ea.HostComponent,Dc=ea.HostText,Ic=ea.HostPortal,zc=ea.CoroutineComponent,Ec=ea.CoroutineHandlerPhase,Ac=ea.YieldComponent,Lc=ea.Fragment,Wc=wa.Placement,Oc=wa.Ref,Rc=wa.Update,Mc=pi.OffscreenPriority,Fc=function(e,o,n){function a(e){e.effectTag|=Rc}function t(e){e.effectTag|=Oc}function s(e,o){var n=o.stateNode;for(n&&(n.return=o);null!==n;){if(n.tag===Pc||n.tag===Dc||n.tag===Ic)Ln("164");else if(n.tag===Ac)e.push(n.type);else if(null!==n.child){n.child.return=n,n=n.child;continue}for(;null===n.sibling;){if(null===n.return||n.return===o)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function i(e,o){var n=o.memoizedProps;n||Ln("165"),o.tag=Ec;var a=[];s(a,o);var t=n.handler,i=n.props,r=t(i,a),l=null!==e?e.child:null,c=o.pendingWorkPriority;return o.child=qc(o,l,r,c),o.child}function r(e,o){for(var n=o.child;null!==n;){if(n.tag===Pc||n.tag===Dc)p(e,n.stateNode);else if(n.tag===Ic);else if(null!==n.child){n=n.child;continue}if(n===o)return;for(;null===n.sibling;){if(null===n.return||n.return===o)return;n=n.return}n=n.sibling}}function l(e,o,n){var s=o.pendingProps;switch(null===s?s=o.memoizedProps:o.pendingWorkPriority===Mc&&n!==Mc||(o.pendingProps=null),o.tag){case Sc:return null;case Tc:return jc(o),null;case Cc:var l=o.stateNode;return l.pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==e&&null!==e.child||(w(o),o.effectTag&=~Wc),null;case Pc:g(o);var p=h(),k=o.type;if(null!==e&&null!=o.stateNode){var q=e.memoizedProps,j=o.stateNode,x=y(),S=m(j,k,q,s,p,x);o.updateQueue=S,S&&a(o),e.ref!==o.ref&&t(o)}else{if(!s)return null===o.stateNode&&Ln("166"),null;var T=y();if(w(o))b(o,p)&&a(o);else{var C=c(k,s,p,T,o);r(C,o),d(C,k,s,p)&&a(o),o.stateNode=C}null!==o.ref&&t(o)}return null;case Dc:var P=s;if(e&&null!=o.stateNode)e.memoizedProps!==P&&a(o);else{if("string"!=typeof P)return null===o.stateNode&&Ln("166"),null;var D=h(),I=y();w(o)?v(o)&&a(o):o.stateNode=u(P,D,I,o)}return null;case zc:return i(e,o);case Ec:return o.tag=zc,null;case Ac:case Lc:return null;case Ic:return a(o),f(o),null;case xc:Ln("167");default:Ln("156")}}var c=e.createInstance,u=e.createTextInstance,p=e.appendInitialChild,d=e.finalizeInitialChildren,m=e.prepareUpdate,h=o.getRootHostContainer,g=o.popHostContext,y=o.getHostContext,f=o.popHostContainer,b=n.prepareToHydrateHostInstance,v=n.prepareToHydrateHostTextInstance,w=n.popHydrationState;return{completeWork:l}},_c=null,Bc=null,Nc=null,Hc=null;if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&__REACT_DEVTOOLS_GLOBAL_HOOK__.supportsFiber){var Uc=__REACT_DEVTOOLS_GLOBAL_HOOK__.inject,Zc=__REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberRoot,Gc=__REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberUnmount;Bc=function(e){_c=Uc(e)},Nc=function(e){if(null!=_c)try{Zc(_c,e)}catch(e){}},Hc=function(e){if(null!=_c)try{Gc(_c,e)}catch(e){}}}var Yc=Bc,Vc=Nc,Kc=Hc,Jc={injectInternals:Yc,onCommitRoot:Vc,onCommitUnmount:Kc},$c=ea.ClassComponent,Qc=ea.HostRoot,Xc=ea.HostComponent,eu=ea.HostText,ou=ea.HostPortal,nu=ea.CoroutineComponent,au=Si.commitCallbacks,tu=Jc.onCommitUnmount,su=wa.Placement,iu=wa.Update,ru=wa.Callback,lu=wa.ContentReset,cu=function(e,o){function n(e,n){try{n.componentWillUnmount()}catch(n){o(e,n)}}function a(e){var n=e.ref;if(null!==n)try{n(null)}catch(n){o(e,n)}}function t(e){for(var o=e.return;null!==o;){if(s(o))return o;o=o.return}Ln("160")}function s(e){return e.tag===Xc||e.tag===Qc||e.tag===ou}function i(e){var o=e;e:for(;;){for(;null===o.sibling;){if(null===o.return||s(o.return))return null;o=o.return}for(o.sibling.return=o.return,o=o.sibling;o.tag!==Xc&&o.tag!==eu;){if(o.effectTag&su)continue e;if(null===o.child||o.tag===ou)continue e;o.child.return=o,o=o.child}if(!(o.effectTag&su))return o.stateNode}}function r(e){var o=t(e),n=void 0,a=void 0;switch(o.tag){case Xc:n=o.stateNode,a=!1;break;case Qc:case ou:n=o.stateNode.containerInfo,a=!0;break;default:Ln("161")}o.effectTag&lu&&(b(n),o.effectTag&=~lu);for(var s=i(e),r=e;;){if(r.tag===Xc||r.tag===eu)s?a?j(n,r.stateNode,s):q(n,r.stateNode,s):a?k(n,r.stateNode):w(n,r.stateNode);else if(r.tag===ou);else if(null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)return;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function l(e){for(var o=e;;)if(p(o),null===o.child||o.tag===ou){if(o===e)return;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}else o.child.return=o,o=o.child}function c(e){for(var o=e,n=!1,a=void 0,t=void 0;;){if(!n){var s=o.return;e:for(;;){switch(null===s&&Ln("160"),s.tag){case Xc:a=s.stateNode,t=!1;break e;case Qc:case ou:a=s.stateNode.containerInfo,t=!0;break e}s=s.return}n=!0}if(o.tag===Xc||o.tag===eu)l(o),t?S(a,o.stateNode):x(a,o.stateNode);else if(o.tag===ou){if(a=o.stateNode.containerInfo,null!==o.child){o.child.return=o,o=o.child;continue}}else if(p(o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)return;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return,o.tag===ou&&(n=!1)}o.sibling.return=o.return,o=o.sibling}}function u(e){c(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)}function p(e){switch("function"==typeof tu&&tu(e),e.tag){case $c:a(e);var o=e.stateNode;return void("function"==typeof o.componentWillUnmount&&n(e,o));case Xc:return void a(e);case nu:return void l(e.stateNode);case ou:return void c(e)}}function d(e,o){switch(o.tag){case $c:return;case Xc:var n=o.stateNode;if(null!=n){var a=o.memoizedProps,t=null!==e?e.memoizedProps:a,s=o.type,i=o.updateQueue;o.updateQueue=null,null!==i&&f(n,i,s,t,a,o)}return;case eu:null===o.stateNode&&Ln("162");var r=o.stateNode,l=o.memoizedProps,c=null!==e?e.memoizedProps:l;return void v(r,c,l);case Qc:case ou:return;default:Ln("163")}}function m(e,o){switch(o.tag){case $c:var n=o.stateNode;if(o.effectTag&iu)if(null===e)n.componentDidMount();else{var a=e.memoizedProps,t=e.memoizedState;n.componentDidUpdate(a,t)}return void(o.effectTag&ru&&null!==o.updateQueue&&au(o,o.updateQueue,n));case Qc:var s=o.updateQueue;if(null!==s){var i=o.child&&o.child.stateNode;au(o,s,i)}return;case Xc:var r=o.stateNode;if(null===e&&o.effectTag&iu){var l=o.type,c=o.memoizedProps;y(r,l,c,o)}return;case eu:case ou:return;default:Ln("163")}}function h(e){var o=e.ref;if(null!==o){var n=e.stateNode;switch(e.tag){case Xc:o(T(n));break;default:o(n)}}}function g(e){var o=e.ref;null!==o&&o(null)}var y=e.commitMount,f=e.commitUpdate,b=e.resetTextContent,v=e.commitTextUpdate,w=e.appendChild,k=e.appendChildToContainer,q=e.insertBefore,j=e.insertInContainerBefore,x=e.removeChild,S=e.removeChildFromContainer,T=e.getPublicInstance;return{commitPlacement:r,commitDeletion:u,commitWork:d,commitLifeCycles:m,commitAttachRef:h,commitDetachRef:g}},uu=Ai.createCursor,pu=Ai.pop,du=Ai.push,mu={},hu=function(e){function o(e){return e===mu&&Ln("174"),e}function n(){return o(m.current)}function a(e,o){du(m,o,e);var n=u(o);du(d,e,e),du(p,n,e)}function t(e){pu(p,e),pu(d,e),pu(m,e)}function s(){return o(p.current)}function i(e){var n=o(m.current),a=o(p.current),t=c(a,e.type,n);a!==t&&(du(d,e,e),du(p,t,e))}function r(e){d.current===e&&(pu(p,e),pu(d,e))}function l(){p.current=mu,m.current=mu}var c=e.getChildHostContext,u=e.getRootHostContext,p=uu(mu),d=uu(mu),m=uu(mu);return{getHostContext:s,getRootHostContainer:n,popHostContainer:t,popHostContext:r,pushHostContainer:a,pushHostContext:i,resetHostContainer:l}},gu=ea.HostComponent,yu=ea.HostText,fu=ea.HostRoot,bu=wa.Deletion,vu=wa.Placement,wu=Dr.createFiberFromHostInstanceForDeletion,ku=function(e){function o(e){var o=e.stateNode.containerInfo;return q=g(o),k=e,j=!0,!0}function n(e,o){var n=wu();n.stateNode=o,n.return=e,n.effectTag=bu,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function a(e,o){o.effectTag|=vu}function t(e,o){switch(e.tag){case gu:var n=e.type,a=e.pendingProps;return d(o,n,a);case yu:var t=e.pendingProps;return m(o,t);default:return!1}}function s(e){if(j){var o=q;if(!o)return a(k,e),j=!1,void(k=e);if(!t(e,o)){if(!(o=h(o))||!t(e,o))return a(k,e),j=!1,void(k=e);n(k,q)}e.stateNode=o,k=e,q=g(o)}}function i(e,o){var n=e.stateNode,a=y(n,e.type,e.memoizedProps,o,e);return e.updateQueue=a,null!==a}function r(e){var o=e.stateNode;return f(o,e.memoizedProps,e)}function l(e){for(var o=e.return;null!==o&&o.tag!==gu&&o.tag!==fu;)o=o.return;k=o}function c(e){if(e!==k)return!1;if(!j)return l(e),j=!0,!1;var o=e.type;if(e.tag!==gu||"head"!==o&&"body"!==o&&!p(o,e.memoizedProps))for(var a=q;a;)n(e,a),a=h(a);return l(e),q=k?h(e.stateNode):null,!0}function u(){k=null,q=null,j=!1}var p=e.shouldSetTextContent,d=e.canHydrateInstance,m=e.canHydrateTextInstance,h=e.getNextHydratableSibling,g=e.getFirstHydratableChild,y=e.hydrateInstance,f=e.hydrateTextInstance,b=e.didNotHydrateInstance,v=e.didNotFindHydratableInstance,w=e.didNotFindHydratableTextInstance;if(!(d&&m&&h&&g&&y&&f&&b&&v&&w))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){Ln("175")},prepareToHydrateHostTextInstance:function(){Ln("176")},popHydrationState:function(e){return!1}};var k=null,q=null,j=!1;return{enterHydrationState:o,resetHydrationState:u,tryToClaimNextHydratableInstance:s,prepareToHydrateHostInstance:i,prepareToHydrateHostTextInstance:r,popHydrationState:c}},qu=ar.popContextProvider,ju=Ai.reset,xu=Mr.getStackAddendumByWorkInProgressFiber,Su=Hr.logCapturedError,Tu=ba.ReactCurrentOwner,Cu=Dr.createWorkInProgress,Pu=Dr.largerPriority,Du=Jc.onCommitRoot,Iu=pi.NoWork,zu=pi.SynchronousPriority,Eu=pi.TaskPriority,Au=pi.HighPriority,Lu=pi.LowPriority,Wu=pi.OffscreenPriority,Ou=tr.AsyncUpdates,Ru=wa.PerformedWork,Mu=wa.Placement,Fu=wa.Update,_u=wa.PlacementAndUpdate,Bu=wa.Deletion,Nu=wa.ContentReset,Hu=wa.Callback,Uu=wa.Err,Zu=wa.Ref,Gu=ea.HostRoot,Yu=ea.HostComponent,Vu=ea.HostPortal,Ku=ea.ClassComponent,Ju=Si.getUpdatePriority,$u=ar,Qu=$u.resetContext,Xu=1,ep=function(e){function o(){ju(),Qu(),A()}function n(){for(;null!==se&&se.current.pendingWorkPriority===Iu;){se.isScheduled=!1;var e=se.nextScheduledRoot;if(se.nextScheduledRoot=null,se===ie)return se=null,ie=null,ne=Iu,null;se=e}for(var n=se,a=null,t=Iu;null!==n;)n.current.pendingWorkPriority!==Iu&&(t===Iu||t>n.current.pendingWorkPriority)&&(t=n.current.pendingWorkPriority,a=n),n=n.nextScheduledRoot;if(null!==a)return ne=t,o(),void(oe=Cu(a.current,t));ne=Iu,oe=null}function a(){for(;null!==ae;){var o=ae.effectTag;if(o&Nu&&e.resetTextContent(ae.stateNode),o&Zu){var n=ae.alternate;null!==n&&Z(n)}switch(o&~(Hu|Uu|Nu|Zu|Ru)){case Mu:_(ae),ae.effectTag&=~Mu;break;case _u:_(ae),ae.effectTag&=~Mu;var a=ae.alternate;N(a,ae);break;case Fu:var t=ae.alternate;N(t,ae);break;case Bu:he=!0,B(ae),he=!1}ae=ae.nextEffect}}function t(){for(;null!==ae;){var e=ae.effectTag;if(e&(Fu|Hu)){var o=ae.alternate;H(o,ae)}e&Zu&&U(ae),e&Uu&&b(ae);var n=ae.nextEffect;ae.nextEffect=null,ae=n}}function s(e){me=!0,te=null;var o=e.stateNode;o.current===e&&Ln("177"),ne!==zu&&ne!==Eu||ye++,Tu.current=null;var s=void 0;for(e.effectTag>Ru?null!==e.lastEffect?(e.lastEffect.nextEffect=e,s=e.firstEffect):s=e:s=e.firstEffect,V(),ae=s;null!==ae;){var i=!1,r=void 0;try{a()}catch(e){i=!0,r=e}i&&(null===ae&&Ln("178"),g(ae,r),null!==ae&&(ae=ae.nextEffect))}for(K(),o.current=e,ae=s;null!==ae;){var l=!1,c=void 0;try{t()}catch(e){l=!0,c=e}l&&(null===ae&&Ln("178"),g(ae,c),null!==ae&&(ae=ae.nextEffect))}me=!1,"function"==typeof Du&&Du(e.stateNode),ue&&(ue.forEach(j),ue=null),n()}function i(e,o){if(!(e.pendingWorkPriority!==Iu&&e.pendingWorkPriority>o)){for(var n=Ju(e),a=e.child;null!==a;)n=Pu(n,a.pendingWorkPriority),a=a.sibling;e.pendingWorkPriority=n}}function r(e){for(;;){var o=e.alternate,n=M(o,e,ne),a=e.return,t=e.sibling;if(i(e,ne),null!==n)return n;if(null!==a&&(null===a.firstEffect&&(a.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=e.firstEffect),a.lastEffect=e.lastEffect),e.effectTag>Ru&&(null!==a.lastEffect?a.lastEffect.nextEffect=e:a.firstEffect=e,a.lastEffect=e)),null!==t)return t;if(null===a)return te=e,null;e=a}return null}function l(e){var o=e.alternate,n=W(o,e,ne);return null===n&&(n=r(e)),Tu.current=null,n}function c(e){var o=e.alternate,n=O(o,e,ne);return null===n&&(n=r(e)),Tu.current=null,n}function u(e){h(Wu,e)}function p(){if(null!==le&&le.size>0)for(;null!==oe;)if(null===(oe=y(oe)?c(oe):l(oe))){if(null===te&&Ln("179"),J=Eu,s(te),J=ne,null===le||0===le.size)break;ne!==Eu&&Ln("180")}}function d(e,o){if(null!==te?(J=Eu,s(te),p()):null===oe&&n(),!(ne===Iu||ne>e)){J=ne;e:for(;;){if(ne<=Eu)for(;null!==oe&&!(null===(oe=l(oe))&&(null===te&&Ln("179"),J=Eu,s(te),J=ne,p(),ne===Iu||ne>e||ne>Eu)););else if(null!==o)for(;null!==oe&&!Q;)if(o.timeRemaining()>Xu){if(null===(oe=l(oe)))if(null===te&&Ln("179"),o.timeRemaining()>Xu){if(J=Eu,s(te),J=ne,p(),ne===Iu||ne>e||ne<Au)break}else Q=!0}else Q=!0;switch(ne){case zu:case Eu:if(ne<=e)continue e;break e;case Au:case Lu:case Wu:if(null===o)break e;if(!Q&&ne<=e)continue e;break e;case Iu:break e;default:Ln("181")}}}}function m(e,o,n,a){v(e,o),oe=c(o),d(n,a)}function h(e,o){$&&Ln("182"),$=!0,ye=0;var n=J,a=!1,t=null;try{d(e,o)}catch(e){a=!0,t=e}for(;a;){if(de){pe=t;break}var s=oe;if(null!==s){var i=g(s,t);if(null===i&&Ln("183"),!de){a=!1,t=null;try{m(s,i,e,o),t=null}catch(e){a=!0,t=e;continue}break}}else de=!0}J=n,null!==o&&(re=!1),ne>Eu&&!re&&(G(u),re=!0);var r=pe;if($=!1,Q=!1,de=!1,pe=null,le=null,ce=null,null!==r)throw r}function g(e,o){Tu.current=null;var n=null,a=!1,t=!1,s=null;if(e.tag===Gu)n=e,f(e)&&(de=!0);else for(var i=e.return;null!==i&&null===n;){if(i.tag===Ku){var r=i.stateNode;"function"==typeof r.componentDidCatch&&(a=!0,s=va(i),n=i,t=!0)}else i.tag===Gu&&(n=i);if(f(i)){if(he)return null;if(null!==ue&&(ue.has(i)||null!==i.alternate&&ue.has(i.alternate)))return null;n=null,t=!1}i=i.return}if(null!==n){null===ce&&(ce=new Set),ce.add(n);var l=xu(e),c=va(e);return null===le&&(le=new Map),le.set(n,{componentName:c,componentStack:l,error:o,errorBoundary:a?n.stateNode:null,errorBoundaryFound:a,errorBoundaryName:s,willRetry:t}),me?(null===ue&&(ue=new Set),ue.add(n)):j(n),n}return null===pe&&(pe=o),null}function y(e){return null!==le&&(le.has(e)||null!==e.alternate&&le.has(e.alternate))}function f(e){return null!==ce&&(ce.has(e)||null!==e.alternate&&ce.has(e.alternate))}function b(e){var o=void 0;null!==le&&(o=le.get(e),le.delete(e),null==o&&null!==e.alternate&&(e=e.alternate,o=le.get(e),le.delete(e))),null==o&&Ln("184");var n=o.error;try{Su(o)}catch(e){console.error(e)}switch(e.tag){case Ku:var a=e.stateNode,t={componentStack:o.componentStack};return void a.componentDidCatch(n,t);case Gu:return void(null===pe&&(pe=n));default:Ln("157")}}function v(e,o){for(var n=e;null!==n;){switch(n.tag){case Ku:qu(n);break;case Yu:E(n);break;case Gu:case Vu:z(n)}if(n===o||n.alternate===o)break;n=n.return}}function w(e,o){o!==Iu&&(e.isScheduled||(e.isScheduled=!0,ie?(ie.nextScheduledRoot=e,ie=e):(se=e,ie=e)))}function k(e,o){ye>ge&&(de=!0,Ln("185")),!$&&o<=ne&&(oe=null);for(var n=e,a=!0;null!==n&&a;){if(a=!1,(n.pendingWorkPriority===Iu||n.pendingWorkPriority>o)&&(a=!0,n.pendingWorkPriority=o),null!==n.alternate&&(n.alternate.pendingWorkPriority===Iu||n.alternate.pendingWorkPriority>o)&&(a=!0,n.alternate.pendingWorkPriority=o),null===n.return){if(n.tag!==Gu)return;if(w(n.stateNode,o),!$)switch(o){case zu:ee?h(zu,null):h(Eu,null);break;case Eu:X||Ln("186");break;default:re||(G(u),re=!0)}}n=n.return}}function q(e,o){var n=J;return n===Iu&&(n=!Y||e.internalContextTag&Ou||o?Lu:zu),n===zu&&($||X)?Eu:n}function j(e){k(e,Eu)}function x(e,o){var n=J;J=e;try{o()}finally{J=n}}function S(e,o){var n=X;X=!0;try{return e(o)}finally{X=n,$||X||h(Eu,null)}}function T(e){var o=ee,n=X;ee=X,X=!1;try{return e()}finally{X=n,ee=o}}function C(e){var o=X,n=J;X=!0,J=zu;try{return e()}finally{X=o,J=n,$&&Ln("187"),h(Eu,null)}}function P(e){var o=J;J=Lu;try{return e()}finally{J=o}}var D=hu(e),I=ku(e),z=D.popHostContainer,E=D.popHostContext,A=D.resetHostContainer,L=kc(e,D,I,k,q),W=L.beginWork,O=L.beginFailedWork,R=Fc(e,D,I),M=R.completeWork,F=cu(e,g),_=F.commitPlacement,B=F.commitDeletion,N=F.commitWork,H=F.commitLifeCycles,U=F.commitAttachRef,Z=F.commitDetachRef,G=e.scheduleDeferredCallback,Y=e.useSyncScheduling,V=e.prepareForCommit,K=e.resetAfterCommit,J=Iu,$=!1,Q=!1,X=!1,ee=!1,oe=null,ne=Iu,ae=null,te=null,se=null,ie=null,re=!1,le=null,ce=null,ue=null,pe=null,de=!1,me=!1,he=!1,ge=1e3,ye=0;return{scheduleUpdate:k,getPriorityContext:q,performWithPriority:x,batchedUpdates:S,unbatchedUpdates:T,flushSync:C,deferredUpdates:P}},op=function(e){Ln("196")};Xe._injectFiber=function(e){op=e};var np=Xe,ap=Si.addTopLevelUpdate,tp=ar.findCurrentUnmaskedContext,sp=ar.isContextProvider,ip=ar.processChildContext,rp=Er.createFiberRoot,lp=ea.HostComponent,cp=Wa.findCurrentHostFiber,up=Wa.findCurrentHostFiberWithNoPortals;np._injectFiber(function(e){var o=tp(e);return sp(e)?ip(e,o,!1):o});var pp=na.TEXT_NODE,dp=no,mp=null,hp=ao,gp={getOffsets:so,setOffsets:io},yp=gp,fp=na.ELEMENT_NODE,bp={hasSelectionCapabilities:function(e){var o=e&&e.nodeName&&e.nodeName.toLowerCase();return o&&("input"===o&&"text"===e.type||"textarea"===o||"true"===e.contentEditable)},getSelectionInformation:function(){var e=An();return{focusedElem:e,selectionRange:bp.hasSelectionCapabilities(e)?bp.getSelection(e):null}},restoreSelection:function(e){var o=An(),n=e.focusedElem,a=e.selectionRange;if(o!==n&&ro(n)){bp.hasSelectionCapabilities(n)&&bp.setSelection(n,a);for(var t=[],s=n;s=s.parentNode;)s.nodeType===fp&&t.push({element:s,left:s.scrollLeft,top:s.scrollTop});En(n);for(var i=0;i<t.length;i++){var r=t[i];r.element.scrollLeft=r.left,r.element.scrollTop=r.top}}},getSelection:function(e){return("selectionStart"in e?{start:e.selectionStart,end:e.selectionEnd}:yp.getOffsets(e))||{start:0,end:0}},setSelection:function(e,o){var n=o.start,a=o.end;void 0===a&&(a=n),"selectionStart"in e?(e.selectionStart=n,e.selectionEnd=Math.min(a,e.value.length)):yp.setOffsets(e,o)}},vp=bp,wp=na.ELEMENT_NODE,kp=function(e){xn(!1,"Missing injection for fiber findDOMNode")},qp=function(e){xn(!1,"Missing injection for stack findDOMNode")},jp=function(e){if(null==e)return null;if(e.nodeType===wp)return e;var o=ga.get(e);if(o)return"number"==typeof o.tag?kp(o):qp(o);"function"==typeof e.render?Ln("188"):xn(!1,"Element appears to be neither ReactComponent nor DOMNode. Keys: %s",Object.keys(e))};jp._injectFiber=function(e){kp=e},jp._injectStack=function(e){qp=e};var xp=jp,Sp=ea.HostComponent,Tp={isAncestor:uo,getLowestCommonAncestor:co,getParentInstance:po,traverseTwoPhase:mo,traverseEnterLeave:ho},Cp=ht.getListener,Pp={accumulateTwoPhaseDispatches:ko,accumulateTwoPhaseDispatchesSkipTarget:qo,accumulateDirectDispatches:xo,accumulateEnterLeaveDispatches:jo},Dp=Pp;jn(So.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[hp()]},getData:function(){if(this._fallbackText)return this._fallbackText;var e,o,n=this._startText,a=n.length,t=this.getText(),s=t.length;for(e=0;e<a&&n[e]===t[e];e++);var i=a-e;for(o=1;o<=i&&n[a-o]===t[s-o];o++);var r=o>1?1-o:void 0;return this._fallbackText=t.slice(e,r),this._fallbackText}}),Yn.addPoolingTo(So);var Ip=So,zp=["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"],Ep={type:null,target:null,currentTarget:Pn.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};jn(To.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Pn.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Pn.thatReturnsTrue)},persist:function(){this.isPersistent=Pn.thatReturnsTrue},isPersistent:Pn.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var o in e)this[o]=null;for(var n=0;n<zp.length;n++)this[zp[n]]=null}}),To.Interface=Ep,To.augmentClass=function(e,o){var n=this,a=function(){};a.prototype=n.prototype;var t=new a;jn(t,e.prototype),e.prototype=t,e.prototype.constructor=e,e.Interface=jn({},n.Interface,o),e.augmentClass=n.augmentClass,Yn.addPoolingTo(e,Yn.fourArgumentPooler)},Yn.addPoolingTo(To,Yn.fourArgumentPooler);var Ap=To,Lp={data:null};Ap.augmentClass(Co,Lp);var Wp=Co,Op={data:null};Ap.augmentClass(Po,Op);var Rp=Po,Mp=[9,13,27,32],Fp=229,_p=Cn.canUseDOM&&"CompositionEvent"in window,Bp=null;Cn.canUseDOM&&"documentMode"in document&&(Bp=document.documentMode);var Np=Cn.canUseDOM&&"TextEvent"in window&&!Bp&&!function(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}(),Hp=Cn.canUseDOM&&(!_p||Bp&&Bp>8&&Bp<=11),Up=32,Zp=String.fromCharCode(Up),Gp={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["topBlur","topCompositionStart","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["topBlur","topCompositionUpdate","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]}},Yp=!1,Vp=null,Kp={eventTypes:Gp,extractEvents:function(e,o,n,a){return[Lo(e,o,n,a),Ro(e,o,n,a)]}},Jp=Kp,$p={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0},Qp=Mo,Xp={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange"]}},ed=null,od=null,nd=!1;Cn.canUseDOM&&(nd=ft("input")&&(!document.documentMode||document.documentMode>9));var ad={eventTypes:Xp,_isInputEventSupported:nd,extractEvents:function(e,o,n,a){var t,s,i=o?ma.getNodeFromInstance(o):window;if(_o(i)?t=Uo:Qp(i)?nd?t=Qo:(t=Ko,s=Vo):Jo(i)&&(t=$o),t){var r=t(e,o);if(r)return Fo(r,n,a)}s&&s(e,i,o),"topBlur"===e&&Xo(o,i)}},td=ad,sd=["ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"],id=sd,rd={view:function(e){if(e.view)return e.view;var o=nt(e);if(o.window===o)return o;var n=o.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};Ap.augmentClass(en,rd);var ld=en,cd={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"},ud=nn,pd={screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:ud,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}};ld.augmentClass(an,pd);var dd=an,md={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},hd={eventTypes:md,extractEvents:function(e,o,n,a){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement))return null;if("topMouseOut"!==e&&"topMouseOver"!==e)return null;var t;if(a.window===a)t=a;else{var s=a.ownerDocument;t=s?s.defaultView||s.parentWindow:window}var i,r;if("topMouseOut"===e){i=o;var l=n.relatedTarget||n.toElement;r=l?ma.getClosestInstanceFromNode(l):null}else i=null,r=o;if(i===r)return null;var c=null==i?t:ma.getNodeFromInstance(i),u=null==r?t:ma.getNodeFromInstance(r),p=dd.getPooled(md.mouseLeave,i,n,a);p.type="mouseleave",p.target=c,p.relatedTarget=u;var d=dd.getPooled(md.mouseEnter,r,n,a);return d.type="mouseenter",d.target=u,d.relatedTarget=c,Dp.accumulateEnterLeaveDispatches(p,d,i,r),[p,d]}},gd=hd,yd=na.DOCUMENT_NODE,fd=Cn.canUseDOM&&"documentMode"in document&&document.documentMode<=11,bd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["topBlur","topContextMenu","topFocus","topKeyDown","topKeyUp","topMouseDown","topMouseUp","topSelectionChange"]}},vd=null,wd=null,kd=null,qd=!1,jd=It.isListeningToAllDependencies,xd={eventTypes:bd,extractEvents:function(e,o,n,a){var t=a.window===a?a.document:a.nodeType===yd?a:a.ownerDocument;if(!t||!jd("onSelect",t))return null;var s=o?ma.getNodeFromInstance(o):window;switch(e){case"topFocus":(Qp(s)||"true"===s.contentEditable)&&(vd=s,wd=o,kd=null);break;case"topBlur":vd=null,wd=null,kd=null;break;case"topMouseDown":qd=!0;break;case"topContextMenu":case"topMouseUp":return qd=!1,sn(n,a);case"topSelectionChange":if(fd)break;case"topKeyDown":case"topKeyUp":return sn(n,a)}return null}},Sd=xd,Td={animationName:null,elapsedTime:null,pseudoElement:null};Ap.augmentClass(rn,Td);var Cd=rn,Pd={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};Ap.augmentClass(ln,Pd);var Dd=ln,Id={relatedTarget:null};ld.augmentClass(cn,Id);var zd=cn,Ed=un,Ad={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ld={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Wd=pn,Od={key:Wd,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:ud,charCode:function(e){return"keypress"===e.type?Ed(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ed(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};ld.augmentClass(dn,Od);var Rd=dn,Md={dataTransfer:null};dd.augmentClass(mn,Md);var Fd=mn,_d={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:ud};ld.augmentClass(hn,_d);var Bd=hn,Nd={propertyName:null,elapsedTime:null,pseudoElement:null};Ap.augmentClass(gn,Nd);var Hd=gn,Ud={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};dd.augmentClass(yn,Ud);var Zd=yn,Gd={},Yd={};["abort","animationEnd","animationIteration","animationStart","blur","cancel","canPlay","canPlayThrough","click","close","contextMenu","copy","cut","doubleClick","drag","dragEnd","dragEnter","dragExit","dragLeave","dragOver","dragStart","drop","durationChange","emptied","encrypted","ended","error","focus","input","invalid","keyDown","keyPress","keyUp","load","loadedData","loadedMetadata","loadStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","paste","pause","play","playing","progress","rateChange","reset","scroll","seeked","seeking","stalled","submit","suspend","timeUpdate","toggle","touchCancel","touchEnd","touchMove","touchStart","transitionEnd","volumeChange","waiting","wheel"].forEach(function(e){var o=e[0].toUpperCase()+e.slice(1),n="on"+o,a="top"+o,t={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[a]};Gd[e]=t,Yd[a]=t});var Vd={eventTypes:Gd,extractEvents:function(e,o,n,a){var t=Yd[e];if(!t)return null;var s;switch(e){case"topAbort":case"topCancel":case"topCanPlay":case"topCanPlayThrough":case"topClose":case"topDurationChange":case"topEmptied":case"topEncrypted":case"topEnded":case"topError":case"topInput":case"topInvalid":case"topLoad":case"topLoadedData":case"topLoadedMetadata":case"topLoadStart":case"topPause":case"topPlay":case"topPlaying":case"topProgress":case"topRateChange":case"topReset":case"topSeeked":case"topSeeking":case"topStalled":case"topSubmit":case"topSuspend":case"topTimeUpdate":case"topToggle":case"topVolumeChange":case"topWaiting":s=Ap;break;case"topKeyPress":if(0===Ed(n))return null;case"topKeyDown":case"topKeyUp":s=Rd;break;case"topBlur":case"topFocus":s=zd;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":s=dd;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":s=Fd;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":s=Bd;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":s=Cd;break;case"topTransitionEnd":s=Hd;break;case"topScroll":s=ld;break;case"topWheel":s=Zd;break;case"topCopy":case"topCut":case"topPaste":s=Dd}s||Ln("86",e);var i=s.getPooled(t,o,n,a);return Dp.accumulateTwoPhaseDispatches(i),i}},Kd=Vd;it.setHandleTopLevel(It.handleTopLevel),ht.injection.injectEventPluginOrder(id),Na.injection.injectComponentTree(ma),ht.injection.injectEventPluginsByName({SimpleEventPlugin:Kd,EnterLeaveEventPlugin:gd,ChangeEventPlugin:td,SelectEventPlugin:Sd,BeforeInputEventPlugin:Jp});var Jd={Properties:{"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},DOMAttributeNames:{},DOMPropertyNames:{}},$d=Jd,Qd=$n.injection.MUST_USE_PROPERTY,Xd=$n.injection.HAS_BOOLEAN_VALUE,em=$n.injection.HAS_NUMERIC_VALUE,om=$n.injection.HAS_POSITIVE_NUMERIC_VALUE,nm=$n.injection.HAS_OVERLOADED_BOOLEAN_VALUE,am={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+$n.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:Xd,allowTransparency:0,alt:0,as:0,async:Xd,autoComplete:0,autoPlay:Xd,capture:Xd,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:Qd|Xd,cite:0,classID:0,className:0,cols:om,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:Xd,controlsList:0,coords:0,crossOrigin:0,data:0,dateTime:0,default:Xd,defer:Xd,dir:0,disabled:Xd,download:nm,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:Xd,formTarget:0,frameBorder:0,headers:0,height:0,hidden:Xd,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:Xd,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:Qd|Xd,muted:Qd|Xd,name:0,nonce:0,noValidate:Xd,open:Xd,optimum:0,pattern:0,placeholder:0,playsInline:Xd,poster:0,preload:0,profile:0,radioGroup:0,readOnly:Xd,referrerPolicy:0,rel:0,required:Xd,reversed:Xd,role:0,rows:om,rowSpan:em,sandbox:0,scope:0,scoped:Xd,scrolling:0,seamless:Xd,selected:Qd|Xd,shape:0,size:om,sizes:0,slot:0,span:om,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:em,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:0,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,typeof:0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:Xd,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{},DOMMutationMethods:{value:function(e,o){if(null==o)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+o):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+o)}}},tm=am,sm={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},im={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering",in:0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlns:0,xmlnsXlink:"xmlns:xlink",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},rm={Properties:{},DOMAttributeNamespaces:{xlinkActuate:sm.xlink,xlinkArcrole:sm.xlink,xlinkHref:sm.xlink,xlinkRole:sm.xlink,xlinkShow:sm.xlink,xlinkTitle:sm.xlink,xlinkType:sm.xlink,xmlBase:sm.xml,xmlLang:sm.xml,xmlSpace:sm.xml},DOMAttributeNames:{}};Object.keys(im).forEach(function(e){rm.Properties[e]=0,im[e]&&(rm.DOMAttributeNames[e]=im[e])});var lm=rm;$n.injection.injectDOMPropertyConfig($d),$n.injection.injectDOMPropertyConfig(tm),$n.injection.injectDOMPropertyConfig(lm);var cm=Tn.isValidElement,um=Jc.injectInternals,pm=na.ELEMENT_NODE,dm=na.TEXT_NODE,mm=na.COMMENT_NODE,hm=na.DOCUMENT_NODE,gm=na.DOCUMENT_FRAGMENT_NODE,ym=$n.ID_ATTRIBUTE_NAME,fm=Gs.createElement,bm=Gs.getChildNamespace,vm=Gs.setInitialProperties,wm=Gs.diffProperties,km=Gs.updateProperties,qm=Gs.diffHydratedProperties,jm=Gs.diffHydratedText,xm=Gs.warnForDeletedHydratableElement,Sm=Gs.warnForDeletedHydratableText,Tm=Gs.warnForInsertedHydratedElement,Cm=Gs.warnForInsertedHydratedText,Pm=ma.precacheFiberNode,Dm=ma.updateFiberProps;Va.injection.injectFiberControlledHostComponent(Gs),xp._injectFiber(function(e){return Em.findHostInstance(e)});var Im=null,zm=null,Em=function(e){function o(e,o,n){var a=Et.enableAsyncSubtreeAPI&&null!=o&&null!=o.type&&null!=o.type.prototype&&!0===o.type.prototype.unstable_isAsyncReactComponent,i=s(e,a),r={element:o};n=void 0===n?null:n,ap(e,r,n,i),t(e,i)}var n=e.getPublicInstance,a=ep(e),t=a.scheduleUpdate,s=a.getPriorityContext,i=a.performWithPriority,r=a.batchedUpdates,l=a.unbatchedUpdates,c=a.flushSync,u=a.deferredUpdates;return{createContainer:function(e){return rp(e)},updateContainer:function(e,n,a,t){var s=n.current,i=np(a);null===n.context?n.context=i:n.pendingContext=i,o(s,e,t)},performWithPriority:i,batchedUpdates:r,unbatchedUpdates:l,deferredUpdates:u,flushSync:c,getPublicRootInstance:function(e){var o=e.current;if(!o.child)return null;switch(o.child.tag){case lp:return n(o.child.stateNode);default:return o.child.stateNode}},findHostInstance:function(e){var o=cp(e);return null===o?null:o.stateNode},findHostInstanceWithNoPortals:function(e){var o=up(e);return null===o?null:o.stateNode}}}({getRootHostContext:function(e){var o=void 0,n=void 0;if(e.nodeType===hm){o="#document";var a=e.documentElement;n=a?a.namespaceURI:bm(null,"")}else{var t=e.nodeType===mm?e.parentNode:e,s=t.namespaceURI||null;o=t.tagName,n=bm(s,o)}return n},getChildHostContext:function(e,o){return bm(e,o)},getPublicInstance:function(e){return e},prepareForCommit:function(){Im=It.isEnabled(),zm=vp.getSelectionInformation(),It.setEnabled(!1)},resetAfterCommit:function(){vp.restoreSelection(zm),zm=null,It.setEnabled(Im),Im=null},createInstance:function(e,o,n,a,t){var s=void 0;s=a;var i=fm(e,o,n,s);return Pm(t,i),Dm(i,o),i},appendInitialChild:function(e,o){e.appendChild(o)},finalizeInitialChildren:function(e,o,n,a){return vm(e,o,n,a),wn(o,n)},prepareUpdate:function(e,o,n,a,t,s){return wm(e,o,n,a,t)},commitMount:function(e,o,n,a){e.focus()},commitUpdate:function(e,o,n,a,t,s){Dm(e,t),km(e,o,n,a,t)},shouldSetTextContent:function(e,o){return"textarea"===e||"string"==typeof o.children||"number"==typeof o.children||"object"==typeof o.dangerouslySetInnerHTML&&null!==o.dangerouslySetInnerHTML&&"string"==typeof o.dangerouslySetInnerHTML.__html},resetTextContent:function(e){e.textContent=""},shouldDeprioritizeSubtree:function(e,o){return!!o.hidden},createTextInstance:function(e,o,n,a){var t=document.createTextNode(e);return Pm(a,t),t},commitTextUpdate:function(e,o,n){e.nodeValue=n},appendChild:function(e,o){e.appendChild(o)},appendChildToContainer:function(e,o){e.nodeType===mm?e.parentNode.insertBefore(o,e):e.appendChild(o)},insertBefore:function(e,o,n){e.insertBefore(o,n)},insertInContainerBefore:function(e,o,n){e.nodeType===mm?e.parentNode.insertBefore(o,n):e.insertBefore(o,n)},removeChild:function(e,o){e.removeChild(o)},removeChildFromContainer:function(e,o){e.nodeType===mm?e.parentNode.removeChild(o):e.removeChild(o)},canHydrateInstance:function(e,o,n){return e.nodeType===pm&&o===e.nodeName.toLowerCase()},canHydrateTextInstance:function(e,o){return""!==o&&e.nodeType===dm},getNextHydratableSibling:function(e){for(var o=e.nextSibling;o&&o.nodeType!==pm&&o.nodeType!==dm;)o=o.nextSibling;return o},getFirstHydratableChild:function(e){for(var o=e.firstChild;o&&o.nodeType!==pm&&o.nodeType!==dm;)o=o.nextSibling;return o},hydrateInstance:function(e,o,n,a,t){return Pm(t,e),Dm(e,n),qm(e,o,n,a)},hydrateTextInstance:function(e,o,n){return Pm(n,e),jm(e,o)},didNotHydrateInstance:function(e,o){1===o.nodeType?xm(e,o):Sm(e,o)},didNotFindHydratableInstance:function(e,o,n){Tm(e,o,n)},didNotFindHydratableTextInstance:function(e,o){Cm(e,o)},scheduleDeferredCallback:ui.rIC,useSyncScheduling:!Lt.fiberAsyncScheduling});et.injection.injectFiberBatchedUpdates(Em.batchedUpdates);var Am={render:function(e,o,n){return Et.disableNewFiberFeatures&&(cm(e)||("string"==typeof e?xn(!1,"ReactDOM.render(): Invalid component element. Instead of passing a string like 'div', pass React.createElement('div') or <div />."):"function"==typeof e?xn(!1,"ReactDOM.render(): Invalid component element. Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />."):null!=e&&void 0!==e.props?xn(!1,"ReactDOM.render(): Invalid component element. This may be caused by unintentionally loading two independent copies of React."):xn(!1,"ReactDOM.render(): Invalid component element."))),kn(null,e,o,n)},unstable_renderSubtreeIntoContainer:function(e,o,n,a){return null!=e&&ga.has(e)||Ln("38"),kn(e,o,n,a)},unmountComponentAtNode:function(e){return fn(e)||Ln("40"),!!e._reactRootContainer&&(Em.unbatchedUpdates(function(){kn(null,null,e,function(){e._reactRootContainer=null})}),!0)},findDOMNode:xp,unstable_createPortal:function(e,o){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return ol.createPortal(e,o,null,n)},unstable_batchedUpdates:et.batchedUpdates,unstable_deferredUpdates:Em.deferredUpdates,flushSync:Em.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:ht,EventPluginRegistry:Mn,EventPropagators:Dp,ReactControlledComponent:Va,ReactDOMComponentTree:ma,ReactDOMEventListener:it}};"function"==typeof um&&um({findFiberByHostInstance:ma.getClosestInstanceFromNode,findHostInstanceByFiber:Em.findHostInstance,bundleType:0,version:"16.0.0-beta.2"});var Lm=Am;e.exports=Lm},function(e,o,n){"use strict";e.exports=n(153)},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(e,o){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!o||"object"!==typeof o&&"function"!==typeof o?e:o}function s(e,o){if("function"!==typeof o&&null!==o)throw new TypeError("Super expression must either be null or a function, not "+typeof o);e.prototype=Object.create(o&&o.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(e,o):e.__proto__=o)}var i=n(0),r=(n.n(i),n(34)),l=n.n(r),c=n(32);n(15);o.a=function(){var e,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1],r=n||o+"Subscription",u=function(e){function n(s,i){a(this,n);var r=t(this,e.call(this,s,i));return r[o]=s.store,r}return s(n,e),n.prototype.getChildContext=function(){var e;return e={},e[o]=this[o],e[r]=null,e},n.prototype.render=function(){return i.Children.only(this.props.children)},n}(i.Component);return u.propTypes={store:c.a.isRequired,children:l.a.element.isRequired},u.childContextTypes=(e={},e[o]=c.a.isRequired,e[r]=c.b,e),u.displayName="Provider",u}()},function(e,o,n){"use strict";function a(e,o){var n={};for(var a in e)o.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}function t(e,o,n){for(var a=o.length-1;a>=0;a--){var t=o[a](e);if(t)return t}return function(o,a){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+a.wrappedComponentName+".")}}function s(e,o){return e===o}var i=n(30),r=n(163),l=n(157),c=n(158),u=n(159),p=n(160),d=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};o.a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.connectHOC,n=void 0===o?i.a:o,m=e.mapStateToPropsFactories,h=void 0===m?c.a:m,g=e.mapDispatchToPropsFactories,y=void 0===g?l.a:g,f=e.mergePropsFactories,b=void 0===f?u.a:f,v=e.selectorFactory,w=void 0===v?p.a:v;return function(e,o,i){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},c=l.pure,u=void 0===c||c,p=l.areStatesEqual,m=void 0===p?s:p,g=l.areOwnPropsEqual,f=void 0===g?r.a:g,v=l.areStatePropsEqual,k=void 0===v?r.a:v,q=l.areMergedPropsEqual,j=void 0===q?r.a:q,x=a(l,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),S=t(e,h,"mapStateToProps"),T=t(o,y,"mapDispatchToProps"),C=t(i,b,"mergeProps");return n(w,d({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:S,initMapDispatchToProps:T,initMergeProps:C,pure:u,areStatesEqual:m,areOwnPropsEqual:f,areStatePropsEqual:k,areMergedPropsEqual:j},x))}}()},function(e,o,n){"use strict";function a(e){return"function"===typeof e?n.i(r.a)(e,"mapDispatchToProps"):void 0}function t(e){return e?void 0:n.i(r.b)(function(e){return{dispatch:e}})}function s(e){return e&&"object"===typeof e?n.i(r.b)(function(o){return n.i(i.bindActionCreators)(e,o)}):void 0}var i=n(12),r=n(31);o.a=[a,t,s]},function(e,o,n){"use strict";function a(e){return"function"===typeof e?n.i(s.a)(e,"mapStateToProps"):void 0}function t(e){return e?void 0:n.i(s.b)(function(){return{}})}var s=n(31);o.a=[a,t]},function(e,o,n){"use strict";function a(e,o,n){return r({},n,e,o)}function t(e){return function(o,n){var a=(n.displayName,n.pure),t=n.areMergedPropsEqual,s=!1,i=void 0;return function(o,n,r){var l=e(o,n,r);return s?a&&t(l,i)||(i=l):(s=!0,i=l),i}}}function s(e){return"function"===typeof e?t(e):void 0}function i(e){return e?void 0:function(){return a}}var r=(n(33),Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e});o.a=[s,i]},function(e,o,n){"use strict";function a(e,o){var n={};for(var a in e)o.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}function t(e,o,n,a){return function(t,s){return n(e(t,s),o(a,s),s)}}function s(e,o,n,a,t){function s(t,s){return h=t,g=s,y=e(h,g),f=o(a,g),b=n(y,f,g),m=!0,b}function i(){return y=e(h,g),o.dependsOnOwnProps&&(f=o(a,g)),b=n(y,f,g)}function r(){return e.dependsOnOwnProps&&(y=e(h,g)),o.dependsOnOwnProps&&(f=o(a,g)),b=n(y,f,g)}function l(){var o=e(h,g),a=!d(o,y);return y=o,a&&(b=n(y,f,g)),b}function c(e,o){var n=!p(o,g),a=!u(e,h);return h=e,g=o,n&&a?i():n?r():a?l():b}var u=t.areStatesEqual,p=t.areOwnPropsEqual,d=t.areStatePropsEqual,m=!1,h=void 0,g=void 0,y=void 0,f=void 0,b=void 0;return function(e,o){return m?c(e,o):s(e,o)}}function i(e,o){var n=o.initMapStateToProps,i=o.initMapDispatchToProps,r=o.initMergeProps,l=a(o,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),c=n(e,l),u=i(e,l),p=r(e,l);return(l.pure?s:t)(c,u,p,e,l)}o.a=i;n(161)},function(e,o,n){"use strict";n(15)},function(e,o,n){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function t(){var e=[],o=[];return{clear:function(){o=s,e=s},notify:function(){for(var n=e=o,a=0;a<n.length;a++)n[a]()},subscribe:function(n){var a=!0;return o===e&&(o=e.slice()),o.push(n),function(){a&&e!==s&&(a=!1,o===e&&(o=e.slice()),o.splice(o.indexOf(n),1))}}}}n.d(o,"a",function(){return r});var s=null,i={notify:function(){}},r=function(){function e(o,n,t){a(this,e),this.store=o,this.parentSub=n,this.onStateChange=t,this.unsubscribe=null,this.listeners=i}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=t())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=i)},e}()},function(e,o,n){"use strict";function a(e,o){return e===o?0!==e||0!==o||1/e===1/o:e!==e&&o!==o}function t(e,o){if(a(e,o))return!0;if("object"!==typeof e||null===e||"object"!==typeof o||null===o)return!1;var n=Object.keys(e),t=Object.keys(o);if(n.length!==t.length)return!1;for(var i=0;i<n.length;i++)if(!s.call(o,n[i])||!a(e[n[i]],o[n[i]]))return!1;return!0}o.a=t;var s=Object.prototype.hasOwnProperty},function(e,o,n){"use strict";var a=n(4),t=n(1),s=n(165);e.exports=function(){function e(e,o,n,a,i,r){r!==s&&t(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function o(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:o,element:e,instanceOf:o,node:e,objectOf:o,oneOf:o,oneOfType:o,shape:o};return n.checkPropTypes=a,n.PropTypes=n,n}},function(e,o,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,o,n){"use strict";function a(e){for(var o=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,a=0;a<o;a++)n+="&args[]="+encodeURIComponent(arguments[a+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var t=new Error(n);throw t.name="Invariant Violation",t.framesToPop=1,t}function t(e,o,n){this.props=e,this.context=o,this.refs=T,this.updater=n||I}function s(e,o,n){this.props=e,this.context=o,this.refs=T,this.updater=n||I}function i(){}function r(e,o,n){this.props=e,this.context=o,this.refs=T,this.updater=n||I}function l(e){return void 0!==e.ref}function c(e){return void 0!==e.key}function u(e){var o={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return o[e]})}function p(e){return(""+e).replace(G,"$&/")}function d(e,o,n,a){if(V.length){var t=V.pop();return t.result=e,t.keyPrefix=o,t.func=n,t.context=a,t.count=0,t}return{result:e,keyPrefix:o,func:n,context:a,count:0}}function m(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,V.length<Y&&V.push(e)}function h(e,o,n,a){var t=typeof e;if("undefined"!==t&&"boolean"!==t||(e=null),null===e||"string"===t||"number"===t||"object"===t&&e.$$typeof===H)return n(a,e,""===o?U+y(e,0):o),1;var s,i,r=0,l=""===o?U:o+Z;if(Array.isArray(e))for(var c=0;c<e.length;c++)s=e[c],i=l+y(s,c),r+=h(s,i,n,a);else{var u=B&&e[B]||e[N];if("function"==typeof u)for(var p,d=u.call(e),m=0;!(p=d.next()).done;)s=p.value,i=l+y(s,m++),r+=h(s,i,n,a);else if("object"===t){var g=""+e;P("31","[object Object]"===g?"object with keys {"+Object.keys(e).join(", ")+"}":g,"")}}return r}function g(e,o,n){return null==e?0:h(e,"",o,n)}function y(e,o){return"object"==typeof e&&null!==e&&null!=e.key?u(e.key):o.toString(36)}function f(e,o,n){var a=e.func,t=e.context;a.call(t,o,e.count++)}function b(e,o,n){if(null==e)return e;var a=d(null,null,o,n);g(e,f,a),m(a)}function v(e,o,n){var a=e.result,t=e.keyPrefix,s=e.func,i=e.context,r=s.call(i,o,e.count++);Array.isArray(r)?w(r,a,n,C.thatReturnsArgument):null!=r&&(_.isValidElement(r)&&(r=_.cloneAndReplaceKey(r,t+(!r.key||o&&o.key===r.key?"":p(r.key)+"/")+n)),a.push(r))}function w(e,o,n,a,t){var s="";null!=n&&(s=p(n)+"/");var i=d(o,s,a,t);g(e,v,i),m(i)}function k(e,o,n){if(null==e)return e;var a=[];return w(e,a,null,o,n),a}function q(e,o){return g(e,C.thatReturnsNull,null)}function j(e){var o=[];return w(e,o,null,C.thatReturnsArgument),o}function x(e){return _.isValidElement(e)||P("143"),e}var S=n(2),T=n(10);n(1);var C=n(4),P=a,D={isMounted:function(e){return!1},enqueueForceUpdate:function(e,o,n){},enqueueReplaceState:function(e,o,n,a){},enqueueSetState:function(e,o,n,a){}},I=D;t.prototype.isReactComponent={},t.prototype.setState=function(e,o){"object"!=typeof e&&"function"!=typeof e&&null!=e&&P("85"),this.updater.enqueueSetState(this,e,o,"setState")},t.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},i.prototype=t.prototype;var z=s.prototype=new i;z.constructor=s,S(z,t.prototype),z.isPureReactComponent=!0;var E=r.prototype=new i;E.constructor=r,S(E,t.prototype),E.unstable_isAsyncReactComponent=!0,E.render=function(){return this.props.children};var A={Component:t,PureComponent:s,AsyncComponent:r},L={current:null},W=L,O=Object.prototype.hasOwnProperty,R="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,M={key:!0,ref:!0,__self:!0,__source:!0},F=function(e,o,n,a,t,s,i){return{$$typeof:R,type:e,key:o,ref:n,props:i,_owner:s}};F.createElement=function(e,o,n){var a,t={},s=null,i=null;if(null!=o){l(o)&&(i=o.ref),c(o)&&(s=""+o.key),void 0===o.__self?null:o.__self,void 0===o.__source?null:o.__source;for(a in o)O.call(o,a)&&!M.hasOwnProperty(a)&&(t[a]=o[a])}var r=arguments.length-2;if(1===r)t.children=n;else if(r>1){for(var u=Array(r),p=0;p<r;p++)u[p]=arguments[p+2];t.children=u}if(e&&e.defaultProps){var d=e.defaultProps;for(a in d)void 0===t[a]&&(t[a]=d[a])}return F(e,s,i,0,0,W.current,t)},F.createFactory=function(e){var o=F.createElement.bind(null,e);return o.type=e,o},F.cloneAndReplaceKey=function(e,o){return F(e.type,o,e.ref,e._self,e._source,e._owner,e.props)},F.cloneElement=function(e,o,n){var a,t=S({},e.props),s=e.key,i=e.ref,r=(e._self,e._source,e._owner);if(null!=o){l(o)&&(i=o.ref,r=W.current),c(o)&&(s=""+o.key);var u;e.type&&e.type.defaultProps&&(u=e.type.defaultProps);for(a in o)O.call(o,a)&&!M.hasOwnProperty(a)&&(void 0===o[a]&&void 0!==u?t[a]=u[a]:t[a]=o[a])}var p=arguments.length-2;if(1===p)t.children=n;else if(p>1){for(var d=Array(p),m=0;m<p;m++)d[m]=arguments[m+2];t.children=d}return F(e.type,s,i,0,0,r,t)},F.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===R};var _=F,B="function"==typeof Symbol&&Symbol.iterator,N="@@iterator",H="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,U=".",Z=":",G=/\/+/g,Y=10,V=[],K={forEach:b,map:k,count:q,toArray:j},J=K,$=x,Q=_.createElement,X=_.createFactory,ee=_.cloneElement,oe={Children:{map:J.map,forEach:J.forEach,count:J.count,toArray:J.toArray,only:$},Component:A.Component,PureComponent:A.PureComponent,unstable_AsyncComponent:A.AsyncComponent,createElement:Q,cloneElement:ee,isValidElement:_.isValidElement,createFactory:X,version:"16.0.0-beta.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:W}},ne=oe;e.exports=ne},function(e,o,n){"use strict";var a=n(12).compose;o.__esModule=!0,o.composeWithDevTools="undefined"!==typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"===typeof arguments[0]?a:a.apply(null,arguments)},o.devToolsEnhancer="undefined"!==typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},function(e,o,n){"use strict";function a(){for(var e=arguments.length,o=Array(e),n=0;n<e;n++)o[n]=arguments[n];return function(e){return function(n,a,i){var r=e(n,a,i),l=r.dispatch,c=[],u={getState:r.getState,dispatch:function(e){return l(e)}};return c=o.map(function(e){return e(u)}),l=t.a.apply(void 0,c)(r.dispatch),s({},r,{dispatch:l})}}}o.a=a;var t=n(35),s=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}},function(e,o,n){"use strict";function a(e,o){return function(){return o(e.apply(void 0,arguments))}}function t(e,o){if("function"===typeof e)return a(e,o);if("object"!==typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),t={},s=0;s<n.length;s++){var i=n[s],r=e[i];"function"===typeof r&&(t[i]=a(r,o))}return t}o.a=t},function(e,o,n){"use strict";function a(e,o){var n=o&&o.type;return"Given action "+(n&&'"'+n.toString()+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function t(e){Object.keys(e).forEach(function(o){var n=e[o];if("undefined"===typeof n(void 0,{type:i.a.INIT}))throw new Error('Reducer "'+o+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if("undefined"===typeof n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+o+"\" returned undefined when probed with a random type. Don't try to handle "+i.a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}function s(e){for(var o=Object.keys(e),n={},s=0;s<o.length;s++){var i=o[s];"function"===typeof e[i]&&(n[i]=e[i])}var r=Object.keys(n),l=void 0;try{t(n)}catch(e){l=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=arguments[1];if(l)throw l;for(var t=!1,s={},i=0;i<r.length;i++){var c=r[i],u=n[c],p=e[c],d=u(p,o);if("undefined"===typeof d){var m=a(c,o);throw new Error(m)}s[c]=d,t=t||d!==p}return t?s:e}}o.a=s;var i=n(36);n(14),n(37)},function(e,o,n){e.exports=n(172)},function(e,o,n){"use strict";(function(e,a){Object.defineProperty(o,"__esModule",{value:!0});var t,s=n(173),i=function(e){return e&&e.__esModule?e:{default:e}}(s);t="undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof e?e:a;var r=(0,i.default)(t);o.default=r}).call(o,n(16),n(38)(e))},function(e,o,n){"use strict";function a(e){var o,n=e.Symbol;return"function"===typeof n?n.observable?o=n.observable:(o=n("observable"),n.observable=o):o="@@observable",o}Object.defineProperty(o,"__esModule",{value:!0}),o.default=a},function(e,o){!function(e){"use strict";function o(e){if("string"!==typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function n(e){return"string"!==typeof e&&(e=String(e)),e}function a(e){var o={next:function(){var o=e.shift();return{done:void 0===o,value:o}}};return f.iterable&&(o[Symbol.iterator]=function(){return o}),o}function t(e){this.map={},e instanceof t?e.forEach(function(e,o){this.append(o,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(o){this.append(o,e[o])},this)}function s(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function i(e){return new Promise(function(o,n){e.onload=function(){o(e.result)},e.onerror=function(){n(e.error)}})}function r(e){var o=new FileReader,n=i(o);return o.readAsArrayBuffer(e),n}function l(e){var o=new FileReader,n=i(o);return o.readAsText(e),n}function c(e){for(var o=new Uint8Array(e),n=new Array(o.length),a=0;a<o.length;a++)n[a]=String.fromCharCode(o[a]);return n.join("")}function u(e){if(e.slice)return e.slice(0);var o=new Uint8Array(e.byteLength);return o.set(new Uint8Array(e)),o.buffer}function p(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"===typeof e)this._bodyText=e;else if(f.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(f.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(f.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(f.arrayBuffer&&f.blob&&v(e))this._bodyArrayBuffer=u(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!f.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!w(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=u(e)}else this._bodyText="";this.headers.get("content-type")||("string"===typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):f.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},f.blob&&(this.blob=function(){var e=s(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?s(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(r)}),this.text=function(){var e=s(this);if(e)return e;if(this._bodyBlob)return l(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(c(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},f.formData&&(this.formData=function(){return this.text().then(h)}),this.json=function(){return this.text().then(JSON.parse)},this}function d(e){var o=e.toUpperCase();return k.indexOf(o)>-1?o:e}function m(e,o){o=o||{};var n=o.body;if(e instanceof m){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,o.headers||(this.headers=new t(e.headers)),this.method=e.method,this.mode=e.mode,n||null==e._bodyInit||(n=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=o.credentials||this.credentials||"omit",!o.headers&&this.headers||(this.headers=new t(o.headers)),this.method=d(o.method||this.method||"GET"),this.mode=o.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function h(e){var o=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),a=n.shift().replace(/\+/g," "),t=n.join("=").replace(/\+/g," ");o.append(decodeURIComponent(a),decodeURIComponent(t))}}),o}function g(e){var o=new t;return e.split(/\r?\n/).forEach(function(e){var n=e.split(":"),a=n.shift().trim();if(a){var t=n.join(":").trim();o.append(a,t)}}),o}function y(e,o){o||(o={}),this.type="default",this.status="status"in o?o.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in o?o.statusText:"OK",this.headers=new t(o.headers),this.url=o.url||"",this._initBody(e)}if(!e.fetch){var f={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(f.arrayBuffer)var b=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],v=function(e){return e&&DataView.prototype.isPrototypeOf(e)},w=ArrayBuffer.isView||function(e){return e&&b.indexOf(Object.prototype.toString.call(e))>-1};t.prototype.append=function(e,a){e=o(e),a=n(a);var t=this.map[e];this.map[e]=t?t+","+a:a},t.prototype.delete=function(e){delete this.map[o(e)]},t.prototype.get=function(e){return e=o(e),this.has(e)?this.map[e]:null},t.prototype.has=function(e){return this.map.hasOwnProperty(o(e))},t.prototype.set=function(e,a){this.map[o(e)]=n(a)},t.prototype.forEach=function(e,o){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(o,this.map[n],n,this)},t.prototype.keys=function(){var e=[];return this.forEach(function(o,n){e.push(n)}),a(e)},t.prototype.values=function(){var e=[];return this.forEach(function(o){e.push(o)}),a(e)},t.prototype.entries=function(){var e=[];return this.forEach(function(o,n){e.push([n,o])}),a(e)},f.iterable&&(t.prototype[Symbol.iterator]=t.prototype.entries);var k=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];m.prototype.clone=function(){return new m(this,{body:this._bodyInit})},p.call(m.prototype),p.call(y.prototype),y.prototype.clone=function(){return new y(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new t(this.headers),url:this.url})},y.error=function(){var e=new y(null,{status:0,statusText:""});return e.type="error",e};var q=[301,302,303,307,308];y.redirect=function(e,o){if(-1===q.indexOf(o))throw new RangeError("Invalid status code");return new y(null,{status:o,headers:{location:e}})},e.Headers=t,e.Request=m,e.Response=y,e.fetch=function(e,o){return new Promise(function(n,a){var t=new m(e,o),s=new XMLHttpRequest;s.onload=function(){var e={status:s.status,statusText:s.statusText,headers:g(s.getAllResponseHeaders()||"")};e.url="responseURL"in s?s.responseURL:e.headers.get("X-Request-URL");var o="response"in s?s.response:s.responseText;n(new y(o,e))},s.onerror=function(){a(new TypeError("Network request failed"))},s.ontimeout=function(){a(new TypeError("Network request failed"))},s.open(t.method,t.url,!0),"include"===t.credentials&&(s.withCredentials=!0),"responseType"in s&&f.blob&&(s.responseType="blob"),t.headers.forEach(function(e,o){s.setRequestHeader(o,e)}),s.send("undefined"===typeof t._bodyInit?null:t._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!==typeof self?self:this)},function(e,o){e.exports={app:{RSSLink:"http://localhost:1313/index.xml",Data:{Pages:[{Params:{bundle:"default"},Content:"",Summary:"",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:0,FuzzyWordCount:100,ReadingTime:0,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"test",Description:"",Keywords:[],Date:"2017-07-06T20:36:09-03:00",Lastmod:"2017-07-06T20:36:09-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<p><em>Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size</em></p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository.</p>\n\n<p>A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.</p>\n\n<p>Let&rsquo;s start with this.</p>\n\n<h3 id="first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</h3>\n\n<p>Easy, go to <a href="https://www.docker.com/community-edition#/download">https://www.docker.com/community-edition#/download</a>\nChoose your platform AND, because we need multi stage builds and its still on the <em>edge channel</em> we need to choose that instead of the stable channel. Download, install.</p>\n\n<h3 id="second-step-building-a-spa">Second step: Building a SPA</h3>\n\n<p>A single page application is just a static web page that can be served through any traditional web server.</p>\n\n<p>For this example, let&rsquo;s pick a boilerplate SPA like create-react-app.</p>\n\n<pre><code class="language-shell">npm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\nnpm start # if you want to test it and check the browser for it\n</code></pre>\n\n<h3 id="third-step-create-a-dockerfile">Third step: create a Dockerfile</h3>\n\n<p>All right now the important thing, let&rsquo;s take a look at a candidate Dockerfile</p>\n\n<pre><code class="language-docker"># buildtime\nFROM node AS nodebase\nLABEL maintainer &quot;nicosommi@gmail.com&quot;\n\nADD . /usr/src/app\nWORKDIR /usr/src/app\nRUN npm i &amp;&amp; npm run build\n\n# runtime\nFROM nginx:alpine\nCOPY --from=nodebase /usr/src/app/build /usr/share/nginx/html\n</code></pre>\n\n<p>So let&rsquo;s see.</p>\n\n<p>We start with a node:latest image, no problem with the image size because now we have multi stage builds.</p>\n\n<p>The LABEL maintainer, that&rsquo;s recent too, no more MAINTAINER special instruction, now it&rsquo;s a label.</p>\n\n<p>We add the current directory to the appropiate location and set the working directory to it.</p>\n\n<p>Install, build&hellip; and that&rsquo;s all that we need to generate our artifacts in our build folder.</p>\n\n<p>So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.</p>\n\n<p>Done!</p>\n\n<h3 id="fourth-step-build-and-run">Fourth step: build and run!</h3>\n\n<p>So now, let&rsquo;s build the image\n<code>docker build -t my-app .</code></p>\n\n<p>And now let&rsquo;s look it&rsquo;s size\n<code>docker images</code></p>\n\n<p>All right! less than 16 MB! With the whole thing, linux, nginx and our app!</p>\n\n<p>That&rsquo;s great. Just the node_modules folder size after installation is around 130 MB&hellip; so this is a BIG win.</p>\n\n<p>Let&rsquo;s try it<br />\n<code>docker run -d --rm -p 8000:80 --name my-app my-app</code></p>\n\n<p>Open chrome in localhost:8000 and enjoy.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Multi stage builds are great, it let&rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.</p>\n\n<p>By making this clear distinction between different stages, docker let&rsquo;s you think in a more organized way about the Dockerfile.</p>\n\n<p>With multi stage builds the LAST stage is the one that is used on your final image. Don&rsquo;t forget that. <em>For example, the ONBUILD instruction on a previous stage wont have any effect</em> because it will be overwritten with the last stage of the Dockerfile.</p>\n\n<p>As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&rsquo;s really big very quickly.</p>\n\n<p>nicosommi</p>\n',Summary:"Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size Introduction With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository. A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#introduction">Introduction</a>\n<ul>\n<li><a href="#first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</a></li>\n<li><a href="#second-step-building-a-spa">Second step: Building a SPA</a></li>\n<li><a href="#third-step-create-a-dockerfile">Third step: create a Dockerfile</a></li>\n<li><a href="#fourth-step-build-and-run">Fourth step: build and run!</a></li>\n</ul></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:526,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Weekend experiment: a node.js SPA with multi stage builds from docker",Description:"",Keywords:[],Date:"2017-04-29T06:34:58-03:00",Lastmod:"2017-04-29T06:34:58-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/2017-03-25-13-39-09.png" width="400px"></img></p>\n\n<h1 id="docker-secrets">Docker secrets</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda e introducci\xf3n</li>\n<li>Como surgen?</li>\n<li>\xbfQu\xe9 son los secrets?</li>\n<li>\xbfPara que sirven?</li>\n<li>Anotaciones de seguridad</li>\n<li>Detalles de utilizaci\xf3n</li>\n<li>Preparando nuestras im\xe1genes</li>\n<li>Creando un secreto sencillo</li>\n<li>Utilizando secrets con YML&rsquo;s de docker compose</li>\n<li>Usando https con secrets</li>\n<li>Resumen de comandos</li>\n<li>Q &amp; A</li>\n<li>Fin</li>\n</ol>\n\n<hr />\n\n<h2 id="como-surgen">\xbfComo surgen?</h2>\n\n<p>Porque la comunidad toma decisiones heterogeneas y peligrosas:\n- Usar variables de entorno (12 factor app)\n- Variables de entorno en build\n- Manual build (commit)\n- Custom hacks (curl a webserver)\n&hellip; Se necesitan do&rsquo;s and don&rsquo;ts</p>\n\n<p>???\n- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados</p>\n\n<h2 id="hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</h2>\n\n<h2 id="qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</h2>\n\n<p>Para docker es un BLOB de datos manejado de manera centralizada.\n- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan\n- Solo para swarm&hellip; por ahora\n- Hasta 500KB (no TAN large)\n- Por ahora solo para runtime\n<center>\n  <img src="/slide/assets/2017-03-22-21-47-13.png" width="800px"></img>\n</center></p>\n\n<p>???\nBinary Large OBjects\nSecure Sockets Layer (ahora Transport Layer Security)\nSwarmKit es una libreria que se encarga del node management</p>\n\n<h2 id="hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</h2>\n\n<h2 id="para-que-sirven">\xbfPara que sirven?</h2>\n\n<ul>\n<li>Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos&hellip; y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones</li>\n<li>Funciona como capa de abstraccion entre las credenciales y los contenedores</li>\n</ul>\n\n<p>???\n- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido</p>\n\n<hr />\n\n<h2 id="anotaciones-de-seguridad">Anotaciones de seguridad</h2>\n\n<ul>\n<li>Viajan a los managers del swarm por TLS</li>\n<li>Se almacenan en el Raft log, con todo lo que ello nos garantiza (que est\xe1 encriptado y es replicado a trav\xe9s de los managers, garantizando la misma HA que el resto de la informacion del swarm)</li>\n<li>Cuando se detiene un container, se hace unmount y se flushea la memoria</li>\n<li>Si se pierde conexi\xf3n con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucci\xf3n hasta que se vuelva a conectar al swarm<br />\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li>\n</ul>\n\n<p>???\n* Esta encriptado desde la 1.13\n* El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm\n* El &ldquo;Raft log&rdquo; se refiere al consensus algorithm que utiliza swarmkit <em>entre managers</em> para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue dise\xf1ado para ser simple de entender y que m\xe1s sistemas utilizen un buen algoritmo de consenso para ser m\xe1s tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y l\xedderes.\n* Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un l\xedder es elegido. Despu\xe9s hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a>\nTienen un log y una maquina de estados.\nSi una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, tambi\xe9n relegando su liderazgo.</p>\n\n<hr />\n\n<h2 id="detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</h2>\n\n<ul>\n<li>Se montan en /run/secrets/name</li>\n<li>Solo tiene acceso si es un manager o si tiene permisos espec\xedficos</li>\n<li>Se pueden ver, listar los secrets, pero no se puede borrar uno que est\xe1 siendo utilizado, para ello se debe rotar el secret</li>\n<li>Se recomienda poner en el nombre una fecha o numero de version, para hacer m\xe1s sencillo el control</li>\n</ul>\n\n<p>???\n- &ndash;secret source=mysql_password,target=wp_db_password,mode=0400</p>\n\n<hr />\n\n<h2 id="preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</h2>\n\n<ul>\n<li>Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE adem\xe1s de MYSQL_PASSWORD)</li>\n</ul>\n\n<hr />\n\n<h2 id="creando-un-secreto-sencillo">Creando un secreto sencillo</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ openssl rand -base64 20 | docker secret create mi_secreto -\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets\n$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto\n</code></pre>\n\n<p>???\nSi commiteamos el container a una imagen, el secreto es desmontado</p>\n\n<h2 id="si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</h2>\n\n<h2 id="utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</h2>\n\n<pre><code class="language-yaml">version: \'3.1\'\nservices:\n    test:\n        image: \'alpine\'\n        command: \'cat /run/secrets/my_secret\'\n        secrets: \n            - my_secret\nsecrets:\n    my_secret:\n        file: ./mysecret.txt\n        # o external: true para tomarlo del swarm\n</code></pre>\n\n<p>???\nGracias al stack del compose</p>\n\n<h2 id="docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</h2>\n\n<h2 id="usando-https-con-secrets">Usando https con secrets</h2>\n\n<ol>\n<li>Generar certificado con let&rsquo;s encrypt, self-signed u otra CA</li>\n<li>Preparar nginx config</li>\n<li>Preparar secrets en el swarm\n<code>shell\n$ docker secret create site.key site.key\n$ docker secret create site.crt site.crt\n$ docker secret create site.conf site.conf\n</code></li>\n\n<li><p>Crear el servicio</p>\n\n<pre><code class="language-shell">$ docker service create --name nginx --secret site.key \\\n --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \\\n sh -c &quot;ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf &amp;&amp; exec nginx -g \'daemon off;\'&quot;\n</code></pre>\n\n<p>???</p>\n\n<h2 id="daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</h2>\n\n<h2 id="resumen-de-comandos">Resumen de comandos</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ echo &quot;a&quot; | docker secret create mi_secreto -\n$ docker secret inspect mi_secreto\n$ docker secret ls\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker service update mi_servicio --secret-rm mi_secreto\n$ docker service update mi_servicio --secret-add mi_nuevo_secreto\n$ docker secret rm mi_secreto\n</code></pre>\n\n<p>???</p>\n\n<h2 id="aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</h2>\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1></li>\n</ol>\n',Summary:"Docker secrets Por nicosommi name: agenda Agenda Agenda e introducci\xf3n Como surgen? \xbfQu\xe9 son los secrets? \xbfPara que sirven? Anotaciones de seguridad Detalles de utilizaci\xf3n Preparando nuestras im\xe1genes Creando un secreto sencillo Utilizando secrets con YML&rsquo;s de docker compose Usando https con secrets Resumen de comandos Q &amp; A Fin \xbfComo surgen? Porque la comunidad toma decisiones heterogeneas y peligrosas: - Usar variables de entorno (12 factor app) - Variables de entorno en build - Manual build (commit) - Custom hacks (curl a webserver) &hellip; Se necesitan do&rsquo;s and don&rsquo;ts ???",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#docker-secrets">Docker secrets</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#como-surgen">\xbfComo surgen?</a></li>\n<li><a href="#hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</a></li>\n<li><a href="#qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</a></li>\n<li><a href="#hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</a></li>\n<li><a href="#para-que-sirven">\xbfPara que sirven?</a></li>\n<li><a href="#anotaciones-de-seguridad">Anotaciones de seguridad</a></li>\n<li><a href="#detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</a></li>\n<li><a href="#preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</a></li>\n<li><a href="#creando-un-secreto-sencillo">Creando un secreto sencillo</a></li>\n<li><a href="#si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</a></li>\n<li><a href="#utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</a></li>\n<li><a href="#docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</a></li>\n<li><a href="#usando-https-con-secrets">Usando https con secrets</a></li>\n<li><a href="#daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</a></li>\n<li><a href="#resumen-de-comandos">Resumen de comandos</a></li>\n<li><a href="#aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:990,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker secrets",Description:"",Keywords:[],Date:"2017-03-29T15:38:10-03:00",Lastmod:"2017-03-29T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="scripts">Scripts</h1>\n\n<h2 id="problema">Problema</h2>\n\n<p>Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.\nUno de estos problemas, una vez elegidos los paquetes, es armar una serie de scripts que nos brinden todas las tareas que necesitamos.\nEnumerando, en escenarios tipicos necesitamos minimamente:\n- test\n- test watch\n- test con reporte de coverage completo\n- test watch con un reporte de coverage completo\n- start con live reload\n- start\n- lint\n- build (transpilacion, webpack, etc)\n- &hellip;etc&hellip; (chequeo de dependencias, )</p>\n\n<p>De proyecto en proyecto, cambiando clientes, equipos, lenguajes, estandares, y otras cosas, cambian las estructuras del proyecto, la ubicacion de los archivos, los frameworks, las costumbres, y muchas otras cosas mas.\nSin embargo, estos scripts, aunque cambian ligeramente, siempre estan, y si no estan, estaria bien que estuviesen, lo cual es un punto muy importante, ya que algunas veces esto nos lleva a tener menos &ldquo;comodidades&rdquo; para producir codigo de calidad.\nEste problema es el que vengo enfrentando una vez tras otra, y ya he probado varias alternativas:</p>\n\n<h2 id="intento-1-grunt-gulp">Intento 1: grunt/gulp</h2>\n\n<p>Grunt y gulp, para un recien iniciado, significa produccion rapida. Son sencillos de aprender y nos permiten realizar cosas relativamente complejas con dependencias entre tareas que ejecutan scripts.<br />\nSin embargo, a mi personalmente no me gusta la dependencia que se genera con dichos frameworks que a mi criterio, resuelven las cosas de una manera que no es la optima.<br />\nUno termina sospechando que con npm y sus scripts deberia ser suficiente. Nos queda el sabor de que son sobre disenos para la mayoria de los casos.</p>\n\n<h2 id="intento-2-npm-suelto">Intento 2: npm suelto</h2>\n\n<p>Luego del intento anterior, y con el criterio de utilizar lo que es realmente necesario, uno intenta sacarle el maximo provecho a npm. Esto es realmente muy sencillo y funciona muy bien.\nSimplemente agregamos scripts y combinamos comandos o llamamos a otros scripts.\nEsto sin embargo tiene una dependencia implicita: el sistema operativo. Muchos comandos son particulares de UNIX y no funcionan en Windows.</p>\n\n<h2 id="intento-3-makefile">Intento 3: makefile</h2>\n\n<p>Es una alternativa interesante, muy util, mucho mas performante que un manejador de dependencias en javascript, y mas sencillo tambien, aunque suele asustar a mucha gente.<br />\nLo cierto es que resuelve el core de grunt/gulp y nos permite luego hacer lo que queramos.<br />\nEs una de las mejores a mi parecer, y si bien no muchos la eligen, he visto varios projectos con su Makefile.</p>\n\n<p>En este post quiero probar dos ideas que aun no he visto por alli:</p>\n\n<h2 id="idea-1-shelljs">Idea 1: shelljs</h2>\n\n<p>Esta idea consiste en llamar, desde npm, a scripts que son una secuencia de comandos en shelljs.\nShell.js para quienes no la conocen es una libreria con una implementacion de POSIX en javascript. Es decir que con esto podemos utilizar comandos que funcionaran tambien en windows.\nUna solucion sencilla y eficaz.\nVeamos como seria un proyecto sencillo.</p>\n\n<h2 id="idea-2-docker">Idea 2: docker</h2>\n\n<p>Esta vez, yendo un paso mas alla, cada comando de npm podria correr en un contenedor efimero que utilice siempre la misma plataforma, por ejemplo un alpine linux o un ubuntu.\nEsto tiene la ventaja de utilizar los comandos del shell que mas nos guste, y del sistema operativo de nuestra preferencia.\nLa implementacion sin embargo nos genera una dependencia: docker.\nPersonalmente creo que docker debe estar instalado en todas las computadoras, ya que es el futuro&hellip; (en realidad ya es el presente) por lo que para mis proyectos no lo considero un impedimento.\nAdemas de la dependencia, hay una minima complejidad en la implementacion: se requiere un conocimiento de docker.\nAunque para esto ultimo, he desarrollado un paquete.\nVeamos como seria un ejemplo sin dicho paquete:\nY ahora uno utilizando este paquete:</p>\n\n<h2 id="un-poco-de-mi-historia">Un poco de mi historia</h2>\n\n<p>Cuando arranque con node.js, alla por el 2012, npm fue una las primeras cosas con las que tuve contacto al poco tiempo.<br />\nEs el lugar donde convergen los paquetes de la comunidad. Tan fuerte era dicho lazo que pronto npm se introdujo en node y ahora forma parte del mismo paquete.\nCasi automaticamente, y un poco agnostico de npm, adopte soluciones parecidas a mis experiencias previas en java (maven y ant).</p>\n\n\x3c!--\n<resumen />\n- npm suelto\n- grunt/gulp\n- npm suelto\n- shelljs\n- docker\n--\x3e\n',Summary:"Scripts Problema Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#scripts">Scripts</a>\n<ul>\n<li><a href="#problema">Problema</a></li>\n<li><a href="#intento-1-grunt-gulp">Intento 1: grunt/gulp</a></li>\n<li><a href="#intento-2-npm-suelto">Intento 2: npm suelto</a></li>\n<li><a href="#intento-3-makefile">Intento 3: makefile</a></li>\n<li><a href="#idea-1-shelljs">Idea 1: shelljs</a></li>\n<li><a href="#idea-2-docker">Idea 2: docker</a></li>\n<li><a href="#un-poco-de-mi-historia">Un poco de mi historia</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:765,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"scripts",Description:"",Keywords:[],Date:"2017-01-27T18:54:15-03:00",Lastmod:"2017-01-27T18:54:15-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/docker-74de8.png" width="400px"></img></p>\n\n<h1 id="introduccion-a-docker">Introduccion a docker</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda y alcance</li>\n<li>Fundamentos</li>\n<li>Casos de uso</li>\n<li>Por dentro</li>\n<li>Componentes</li>\n<li>Ejemplo sencillo</li>\n<li>Q &amp; A</li>\n<li>Mas componentes</li>\n<li>Comandos sobre contenedores e im\xe1genes</li>\n<li>Ejemplo lateral</li>\n<li>T\xe9cnica para construir un Dockerfile</li>\n<li>Buenas pr\xe1cticas</li>\n<li>Docker para SPA, web apps, etc</li>\n<li>Anexo: Services</li>\n<li>Q &amp; A</li>\n</ol>\n\n<hr />\n\n<p>class: center</p>\n\n<h2 id="que-es">Que es?</h2>\n\n<p><center>\n  <img src="/assets/docker-89c82.png" width="400px"></img>\n</center></p>\n\n<p>???\nDisculpen el teclado en ingles</p>\n\n<hr />\n\n<ul>\n<li>T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.</li>\n<li>Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.</li>\n<li>UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios</li>\n<li>Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)\n<center>\n<img src="/assets/docker-28b55.png" width="300px"></img>\n</center></li>\n</ul>\n\n<hr />\n\n<p>class: right\n<img style="position: absolute" src="/assets/docker-04a7d.png" width="200px"></img></p>\n\n<h2 id="es-una-maquina-virtual-no">Es una maquina virtual? No.</h2>\n\n<h2 id="como-se-diferencia-de-una">Como se diferencia de una?</h2>\n\n<hr />\n\n<p>Se diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.\n<center>\n  <img src="/assets/history.png" width="600px"></img>\n</center>\n???\nComentar:\n* historia\n* primero escalabilidad horizontal\n* despues optimizar recursos\n* adicionales: docker swarm independiente\nNos permite cambiar la unidad de medida de nuestra aplicaci\xf3n de m\xe1quinas virtuales o f\xedsicas a simples containers.</p>\n\n<hr />\n\n<h2 id="en-donde-corre">En donde corre?</h2>\n\n<p>En sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).\nTambien, recientemente incorporaron contenedores basados en windows server.\n<center>\n  <img src="/assets/platforms.png" width="400px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-6a999.png" width="100px"></img>\n</div></p>\n\n<h2 id="nbsp-para-que-sirve">&nbsp;Para que sirve?</h2>\n\n<p>Para isolar el entorno de ejecuci\xf3n de una aplicaci\xf3n.</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/pencil.png" width="80px"></img>\n</div></p>\n\n<h2 id="nbsp-datos">&nbsp;Datos</h2>\n\n<ul>\n<li>Es open source desde el 2013.</li>\n<li>Esta escrito en go.</li>\n<li>Lo comenz\xf3 Solomon Hykes en dotCloud.</li>\n</ul>\n\n<p>???\nGo esta pensado para concurrencia y productividad y tiene garbage collection</p>\n\n<hr />\n\n<h2 id="casos-de-uso">Casos de uso</h2>\n\n<p><img src="/assets/usecases.png" width="90%"></img>\n???\nInvitar a sugerir ideas u opinar sobre las mencionadas\nTexto:\n* CI/CD\n* Entornos de desarrollo\n* Compilar para distintos targets\n* PaaS\n* Escalabilidad horizontal\n* High availability cluster\n* Aislar ejecucion de codigo de manera segura (webpackbin, etc)\n* Aprendizaje/investigacion\n* Etc&hellip;</p>\n\n<hr />\n\n<h2 id="por-dentro">Por dentro</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="140px"></img>\n</div></p>\n\n<h2 id="nbsp-docker-image">&nbsp;Docker Image</h2>\n\n<ul>\n<li>Es un template con instrucciones para la construccion de contenedores</li>\n<li>Tiene una o varias capas de solo lectura a partir del cual se crean contenedores</li>\n<li>Se pueden extender o empezar de cero</li>\n<li>Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile</li>\n<li>El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.</li>\n<li>Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-container">Docker Container</h2>\n\n<ul>\n<li>Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.</li>\n<li>Contiene una fina capa adicional a las de su imagen con permisos de escritura.</li>\n<li>Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.</li>\n<li>Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.\n<center>\n<img src="/assets/docker-bb91f.png" width="300px"></img>\n</center></li>\n</ul>\n\n<p>???\nPreguntar diferencia entre contenedor e imagen y clarificar dudas</p>\n\n<hr />\n\n<h2 id="acerca-del-contenedor">Acerca del Contenedor</h2>\n\n<p>Previamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).\n<center>\n  <img src="/assets/docker-71f58.png" width="240px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-1c5ae.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-storage">&nbsp;Storage</h2>\n\n<ul>\n<li>Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor</li>\n<li>Docker utiliza &lsquo;copy on write&rsquo;, es decir que copia una capa s\xf3lo cuando la va a cambiar, lo que permite optimizar el tama\xf1o en disco ocupado por la imagen y el tiempo de arranque de los contenedores.</li>\n<li>Toda la data de imagenes y contenedores se guarda en una carpeta.</li>\n<li>Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir seg\xfan caso de uso, experiencia del equipo y linux distro.</li>\n</ul>\n\n<hr />\n\n<h2 id="componentes">Componentes</h2>\n\n<hr />\n\n<h2 id="docker-engine">Docker Engine</h2>\n\n<p>Aplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.\n<img src="/assets/docker-9cf40.png" alt="Docker engine" /></p>\n\n<hr />\n\n<h2 id="machine">Machine</h2>\n\n<ul>\n<li>Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.</li>\n<li>Nos deja instalar docker en terminales remotas y provisionar swarms.\n<img src="/assets/docker-7ada0.png" width="95%"></img>\n???\nPermite especificar drivers para distintos providers</li>\n</ul>\n\n<hr />\n\n<h2 id="compose">Compose</h2>\n\n<p>Es una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.\n* Detecta cambios y recrea solo lo necesario\n* Soporta variables en el compose file\n* Guarda la data persistida en los volumes\n* Es muy util para entornos de desarrollo, para deployment en un solo host\n<center>\n  <img src="/assets/docker-32d4f.png" width="200px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/ubuntu.png" width="50px"></img>\n</div></p>\n\n<h2 id="nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</h2>\n\n<pre><code class="language-bash">$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash\nroot@3883936319fb:/# lsb_release -a\n(...) Description:\tUbuntu 14.04.5 LTS (...)\n</code></pre>\n\n<ol>\n<li>Trae la ultima imagen, o si ya existe la utiliza.</li>\n<li>Crea, en base a la imagen, un contenedor.</li>\n<li>Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.</li>\n<li>Asigna una interfaz de red con la cual habla con el host</li>\n<li>Setea una IP de una pool</li>\n<li>Ejecuta el proceso solicitado (/bin/bash)</li>\n<li>Captura y devuelve el output del contenedor por haber indicado -it</li>\n</ol>\n\n<p>???\ni es para el interactive mode, que deja el stdin esperando\nt asigna un pseudo tty / pty\n* pull\n* hablar de pull y de los otros parametros como name, port, volume</p>\n\n<hr />\n\n<h2 id="wordpress">Wordpress</h2>\n\n<pre>\n  <code class="bash hljs remark-code remark-code-line" style="font-size: 13px;">\n  version: \'2\'\n\n  services:\n     db:\n       image: mysql:5.7\n       volumes:\n         - "./.data/db:/var/lib/mysql"\n       restart: always\n       environment: (...)\n\n     wordpress:\n       depends_on:\n         - db\n       image: wordpress:latest\n       links:\n         - db\n       ports:\n         - "8000:80"\n       restart: always\n       environment: (...)\n  </code>\n</pre>\n\n<p>???\nEnvironment est\xe1 cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la p\xe1gina oficial</p>\n\n<hr />\n\n<h1 id="q-a-parcial">Q &amp; A Parcial</h1>\n\n<hr />\n\n<h2 id="docker-registry">Docker Registry</h2>\n\n<ul>\n<li>Es una libreria de imagenes.</li>\n<li>Puede ser publico o privado.</li>\n<li>Una vez construida la imagen, hacemos un push al registry</li>\n<li>Docker hub es un registry publico oficial</li>\n<li>Hay una imagen publica registry y una para el trusted registry\n<center>\n<img src="/assets/docker-89504.png" width="240px"></img>\n</center>\n???\nTrusted registry es con soporte comercial</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volumes">Data volumes</h2>\n\n<ul>\n<li>Encontrar\n<code>bash\n$ docker inspect myContainer\n</code></li>\n<li>Se pueden crear vol\xfamenes o montar desde el host\n<code>bash\n$ docker run -d -P --name web -v /webapp myImage npm start\n$ docker run -d -P --name web -v /src:/webapp myImage npm start\n</code>\n???</li>\n<li>bypass a unionfs</li>\n<li>si no esta bindeado a host, copia el contenido adentro</li>\n<li>permite compartir entre containers con compose o con named volumes (flocker por ejemplo)</li>\n<li>esta dise\xf1ado para cambiar el container y que la data persista, incluso aunque ningun container la referencie</li>\n<li>soporta SCSI, NFS, etc.</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volume-containers">Data volume containers</h2>\n\n<ul>\n<li><em><a href="/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/">Es una pr\xe1ctica</a></em> que consiste en crear un contenedor que s\xf3lo contiene data que luego ser\xe1 utilizada por otros contenedores\n<code>bash\n$ docker create -v /dbdata --name mydb postgres /bin/true\n$ docker run -d --volumes-from mydb --name db1 postgres\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="network">Network</h2>\n\n<ul>\n<li>Puede ser bridge, none  y host\n<code>bash\n$ docker network ls\n</code></li>\n<li>Pueden verse los detalles\n<code>bash\n$ docker network inspect bridge\n</code></li>\n<li>Se pueden crear nuestras redes en las cuales correr containers\n???</li>\n<li>un container puede pertenecer a varias redes</li>\n<li>se ven entre los de la misma red</li>\n<li>puede ser overlay (swarm mode) o custom driver</li>\n<li>embedded dns en custom networks</li>\n<li>antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-aplicado">Docker Aplicado</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-28b55.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</h2>\n\n<ul>\n<li><p>Run, Start, Stop</p>\n\n<pre><code class="language-bash"># crea un contenedor en base a una imagen y corre el comando bash\n$ docker run --name miContenedor alpine echo &quot;Hola&quot;\n# arrancar un contenedor ya creado\n$ docker start miContenedor\n# parar contenedor con time to kill\n$ docker stop -t 10 miContenedor\n# also valid: docker restart -t 10 miContenedor\n</code></pre></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Listar, Inspeccionar\n<code>bash\n$ docker rm miContenedor\n$ docker ps\n$ docker ps --all\n$ docker inspect miContenedor\n</code></li>\n</ul>\n\n<p>???\n* hablar de se\xf1ales y su relacion con stop</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</h2>\n\n<ul>\n<li>Cargar, Listar, Inspeccionar\n<code>bash\n$ docker pull repo/image:tag\n$ docker load -i imagen.tar\n$ docker images\n$ docker inspect alpine\n</code></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Construir, Taggear, Subir\n<code>bash\n$ docker rmi repo/image:tag\n$ docker build -t image-name .\n$ docker tag image-name repo/image-name:tag\n$ docker push repo/image-name:tag\n</code></li>\n</ul>\n\n<p>???\n* es necesario un docker login myrepo:2376</p>\n\n<hr />\n\n<h2 id="ejemplo-existente">Ejemplo existente</h2>\n\n<pre><code class="language-bash">$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc\n</code></pre>\n\n<p><center>\n  <img src="/assets/vncffox.png" width="200px"></img>\n</center></p>\n\n<p>???\nLuego con un cliente vnc accedemos a un lxde con firefox instalado</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-08dc8.png" width="45px"></img>\n</div></p>\n\n<h2 id="nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</h2>\n\n<ol>\n<li>Se inicia un shell sobre una imagen base\n<code>bash\n$ docker run -it --name testC ubuntu sh\n</code></li>\n<li>Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile</li>\n</ol>\n\n<p>???\n- tar\n- scratch image (reserved word)\n- <em>history</em> de image\n- <em>commit</em> del container como no recomendada mas que para pruebas y debugging</p>\n\n<hr />\n\n<h2 id="debug">Debug</h2>\n\n<p>a. Entramos a un contenedor corriendo</p>\n\n<pre><code class="language-bash"># otra alternativa, tomar una\n$ docker exec -it nignxTest /bin/bash\n</code></pre>\n\n<p>b. Miramos los logs conectados</p>\n\n<pre><code class="language-bash">docker logs nginxTest\n</code></pre>\n\n<hr />\n\n<h2 id="buenas-pr\xe1cticas">Buenas pr\xe1cticas</h2>\n\n<ul>\n<li>Containers lo m\xe1s prescindibles posibles</li>\n<li>Usar .dockerignore</li>\n<li>Evitar instalar paquetes innecesarios</li>\n<li>Correr un s\xf3lo proceso por container</li>\n<li>Minimizar la cantidad de capas</li>\n<li>Organizar argumentos y comandos de multiples lineas con <br /></li>\n<li>Contemplar el build cache\n<center>\n<img src="/assets/docker-d0772.png" width="50%"></img>\n</center></li>\n</ul>\n\n<p>???\n* prescindible = efimero = pueden ser parados, destruidos y reemplazados\n* usar cache o no\n* el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente\n* una vez invalidado, ya no se utiliza para las subsecuentes capas</p>\n\n<hr />\n\n<h2 id="ejemplos-docker-para-web">Ejemplos docker para web</h2>\n\n<hr />\n\n<h2 id="spa-build">SPA build</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nADD . /src\nWORKDIR /src\nRUN rm -fR ./node_modules &amp;&amp; \\\n  npm i\nENTRYPOINT [&quot;npm&quot;, &quot;build&quot;]\n</code></pre>\n\n<p>???\nHay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el \xb4shell\xb4 form que hace &ldquo;/bin/sh -c&rdquo; lo que oculta se\xf1ales por ejemplo docker stop)\n&ndash;entrypoint overrides\n* tiene que haber al menos un cmd o entrypoint\n* entrypoint para ejecutables\n* cmd es mas para preparar parametros</p>\n\n<hr />\n\n<h2 id="spa-serve">SPA serve</h2>\n\n<pre><code class="language-Dockerfile">version: \'2\'\nservices:\n  spa:\n    image: nginx\n    volumes:\n      - &quot;.:/usr/share/nginx/html:ro&quot;\n    ports:\n      - &quot;10000:80&quot;\n</code></pre>\n\n<hr />\n\n<h2 id="api">API</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nEXPOSE 3000\nADD . /src\nWORKDIR /src\nRUN npm rebuild &amp;&amp; \\\n  npm test\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre>\n\n<p>???\nHay muchas alternativas, hay una tarea de dise\xf1o impl\xedcita</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-32d4f.png" width="50px"></img>\n</div>\n##&nbsp; Compose</p>\n\n<pre><code class="language-Dockerfile"># docker-compose.yml just for api\nversion: \'2\'\nservices:\n  api:\n    image: mirepo.com/api-image:production\n    ports:\n      - &quot;3000:3000&quot;\n    depends_on:\n      - mongo\n    environment:\n      PORT: 3000\n  mongo:\n    image: mongo\n    ports:\n      - &quot;27017:27017&quot;\n    volumes:\n      - ./mongodata:/data/db\n</code></pre>\n\n<p>???</p>\n\n<h2 id="links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</h2>\n\n<h2 id="comandos-para-compose">Comandos para compose</h2>\n\n<ul>\n<li>Correr, Parar, Borrar\n<code>bash\n$ docker-compose up -d\n$ docker-compose stop -t 10\n$ docker-compose rm\n$ docker-compose --help\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="anexo-docker-services">Anexo: Docker services</h2>\n\n<p>Es una abstracci\xf3n de los contenedores.\n* Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien\n* Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos\n* Para el cliente, el servicio luce como un docker daemon regular\n* Los servicios son los que brindan escalabilidad y flexibilidad de updates\n???\nswarm = el plural de docker nodes&hellip; manada/multitud/enjambre/nube\n* temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc</p>\n\n<hr />\n\n<h2 id="operaciones-con-services">Operaciones con services</h2>\n\n<pre><code class="language-bash">$ docker service create \\\n  --name my-service \\\n  --replicas 3 \\\n  nginx:alpine\n\n$ docker-compose scale service-name=2\n</code></pre>\n\n<p>???\n* services global/replicated</p>\n\n<hr />\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1>\n',Summary:"Introduccion a docker Por nicosommi name: agenda Agenda Agenda y alcance Fundamentos Casos de uso Por dentro Componentes Ejemplo sencillo Q &amp; A Mas componentes Comandos sobre contenedores e im\xe1genes Ejemplo lateral T\xe9cnica para construir un Dockerfile Buenas pr\xe1cticas Docker para SPA, web apps, etc Anexo: Services Q &amp; A class: center Que es? ??? Disculpen el teclado en ingles T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#introduccion-a-docker">Introduccion a docker</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#que-es">Que es?</a></li>\n<li><a href="#es-una-maquina-virtual-no">Es una maquina virtual? No.</a></li>\n<li><a href="#como-se-diferencia-de-una">Como se diferencia de una?</a></li>\n<li><a href="#en-donde-corre">En donde corre?</a></li>\n<li><a href="#nbsp-para-que-sirve">&nbsp;Para que sirve?</a></li>\n<li><a href="#nbsp-datos">&nbsp;Datos</a></li>\n<li><a href="#casos-de-uso">Casos de uso</a></li>\n<li><a href="#por-dentro">Por dentro</a></li>\n<li><a href="#nbsp-docker-image">&nbsp;Docker Image</a></li>\n<li><a href="#docker-container">Docker Container</a></li>\n<li><a href="#acerca-del-contenedor">Acerca del Contenedor</a></li>\n<li><a href="#nbsp-storage">&nbsp;Storage</a></li>\n<li><a href="#componentes">Componentes</a></li>\n<li><a href="#docker-engine">Docker Engine</a></li>\n<li><a href="#machine">Machine</a></li>\n<li><a href="#compose">Compose</a></li>\n<li><a href="#nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</a></li>\n<li><a href="#wordpress">Wordpress</a></li>\n</ul></li>\n<li><a href="#q-a-parcial">Q &amp; A Parcial</a>\n<ul>\n<li><a href="#docker-registry">Docker Registry</a></li>\n<li><a href="#data-volumes">Data volumes</a></li>\n<li><a href="#data-volume-containers">Data volume containers</a></li>\n<li><a href="#network">Network</a></li>\n<li><a href="#docker-aplicado">Docker Aplicado</a></li>\n<li><a href="#nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</a></li>\n<li><a href="#nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</a></li>\n<li><a href="#ejemplo-existente">Ejemplo existente</a></li>\n<li><a href="#nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</a></li>\n<li><a href="#debug">Debug</a></li>\n<li><a href="#buenas-pr\xe1cticas">Buenas pr\xe1cticas</a></li>\n<li><a href="#ejemplos-docker-para-web">Ejemplos docker para web</a></li>\n<li><a href="#spa-build">SPA build</a></li>\n<li><a href="#spa-serve">SPA serve</a></li>\n<li><a href="#api">API</a></li>\n<li><a href="#links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</a></li>\n<li><a href="#comandos-para-compose">Comandos para compose</a></li>\n<li><a href="#anexo-docker-services">Anexo: Docker services</a></li>\n<li><a href="#operaciones-con-services">Operaciones con services</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1863,FuzzyWordCount:1900,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="proxies-en-es6">Proxies en ES6</h1>\n\n<hr />\n\n<h2 id="agenda">Agenda</h2>\n\n<p><small>\n  Terminolog\xeda<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n</small></p>\n\n<hr />\n\n<h2 id="terminolog\xeda">Terminolog\xeda</h2>\n\n<hr />\n\n<p>\xbfQue es un proxy?<br />\nOrigen: <em>prokecye</em><br />\n  &ldquo;agency of one who acts instead of another&rdquo;<br />\nEn espa\xf1ol significa <em>apoderado</em><br />\n  <em>adj.</em> Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre</p>\n\n<p>???\nEjemplo, firmar un poder para hacer un tr\xe1mite</p>\n\n<hr />\n\n<p>\xbfQue es un protocolo?<br />\nUn <em>protocolo</em> es un conjunto de normas. Esto podria verse como un conjunto interfaces con reglas para usarlas, y ECMAScript define un protocolo para manejar objetos. Este protocolo opera a nivel Meta.</p>\n\n<p>???\nLa definici\xf3n no es la misma que suele utilizarse de protocolos para interfaces de otros lenguajes porque tambi\xe9n incluye reglas.</p>\n\n<hr />\n\n<p><em>Metaprogramming</em><br />\nEn la programaci\xf3n hay niveles base y meta. El nivel base procesa el input del usuario, mientras que el meta procesa al base.</p>\n\n<p>???\nPueden incluso ser dos lenguajes distintos.\nEn es como los closures, los usamos sin saber.\nHay unos que usamos constantemente: Object.*</p>\n\n<hr />\n\n<p><em>Meta Object Protocol</em>  es como se lo llama al protocolo de manejo de objetos de ECMAScript. Como particularidad, son internos (no son accesibles desde JS). Los engines pueden usarlos o no.</p>\n\n<hr />\n\n<ul>\n<li>Los metodos de un objeto del MOP llaman operaciones del engine, algunas que llaman a otras como [[Get]], que se llaman <em>operaciones derivadas</em> y las que son independientes, que se llaman <em>operaciones fundamentales</em>.<br /></li>\n</ul>\n\n<p>???\nEjemplo [[Get]] usa getOwnProperty, getPrototypeOf y Call</p>\n\n<hr />\n\n<p><em>Tipos de metaprogramming</em><br />\n- Introspection: permite s\xf3lo leer la estructura\n- Self-modification: permite modificar la estructura\n- Intercession: redefine la semantica de algunas operaciones</p>\n\n<p>???\nEjemplos Object.keys, moveProperty, proxy respectivamente</p>\n\n<hr />\n\n<p><em>Elementos del proxy</em><br />\n- target: es el fallback del handler, el representado\n[[ProxyTarget]]\n- handler: es quien, en caso de definir el m\xe9todo indicado, intercepta la llamada, el representante\n[[ProxyHandler]]\n- proxy: el que compone ambos y delega a uno u otro</p>\n\n<pre><code>const proxy = new Proxy(target, handler); // OK\nvar p = Proxy(target, handler); // TypeError: calling a builtin Proxy constructor without new is forbidden\n</code></pre>\n\n<p>???\nEl m\xe9todo del handler se llama trap.<br />\nEs decir que el proxy &ldquo;wrappea&rdquo; al target.</p>\n\n<hr />\n\n<pre><code>class MyHandler {\n  get(target, key, receiver) {\n    return Reflect[key];\n  }\n}\n</code></pre>\n\n<p>???\nReflect no se puede instanciar, tiene los mismos metodos que el handler, es como Math, todo estatico\nPor ejemplo Reflect.apply es menos verboso que Function.prototype.apply\nAlgunas veces nos da informaci\xf3n adicional como Reflect.set -&gt; [boolean]</p>\n\n<hr />\n\n<p><em>\xbfQue operaciones pueden ser interceptadas?</em><br />\nEsto es selectivo, no se puede interceptar todo o solo las fundamentales como podria suponerse.<br />\nEsto es por dos razones\n- porque una operacion estable corre el riesgo de que un proxy la haga inestable\n- porque tener mucho codigo custom intercalado haria el programa muy dificil de entender y debuggear</p>\n\n<p>???\nejemplo el === que no puede ser trapeada.\nEstable: sin side effects, que produce siempre el mismo resultado ante los mismos argumentos<br />\nSe podr\xeda pensar como que con interceptar s\xf3lo operaciones fundamentales, pero esto no es tan \xfatil ya que no inlcuir\xeda get por ejemplo.\nVer codigo de api client.</p>\n\n<hr />\n\n<p><em>Prototype chain</em><br />\nLos engines en su comportamiento habitual, al subir por el chain, van a disparar las traps que encuentren.<br />\nSin embargo, hay ciertas operaciones que suben por el prototype chain si no encuentran la property en el handler como get, set y has, las demas no alteran el prototype chain.</p>\n\n<p>???\nVer codigo y test de ghost.\nInstanceof &ldquo;lies&rdquo;</p>\n\n<hr />\n\n<p><em>B\xe1sicas</em></p>\n\n<pre><code>defineProperty(target, propKey, propDesc) // \u2192 boolean  (fundamental)\n  // trigger: Object.defineProperty(proxy, propKey, propDesc)\ndeleteProperty(target, propKey) // \u2192 boolean  (fundamental)\n  // trigger: delete proxy[propKey], delete proxy.foo\nget(target, propKey, receiver) // \u2192 any\n  // trigger: receiver[propKey]\n  // trigger: receiver.foo\n</code></pre>\n\n<hr />\n\n<p><em>Casos de uso</em>\n  * API Client\n  * Tracing / Logging\n  * Trap undefined property access\n  * Type check</p>\n\n<p>???\n  Se\xf1alar el tracing puede implementarse cambiando el objeto.\n  Type check example: properties que son &ldquo;fieles&rdquo; a su tipo incial.\n  Ir viendo ejemplos de api client, logging y lock</p>\n\n<hr />\n\n<p><em>Preguntas</em></p>\n\n<hr />\n\n<p><em>Practica 1</em><br />\nHacer &ldquo;trap undefined&rdquo;<br />\n&ldquo;Objeto que tira excepcion cuando se accede a una propiedad undefined&rdquo;\n(30 minutos)</p>\n\n<p>???\nDebe tirar un ReferenceError si no esta. Debe devolver el valor si esta.\nProbar nested with lock.</p>\n\n<hr />\n\n<p><em>Compatibilidad</em>\n* Solo FF, CH, Edge, Opera, Safari 10, Node 6</p>\n\n<p>???\nNo hay polyfill.</p>\n\n<hr />\n\n<p><em>Tipos de proxy</em>\n* Wrappers (solo control) o Virtual Objects (agregan comporamiento)</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Propiedades del proxy</em>\n* Transparencia virtual: no podemos saber si un objeto es un proxy\n* Encapsulamiento: no podemos acceder al handler desde el proxy</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Mas casos de uso</em>\n* DOM\n* Indices negativos de array\n* Data binding (polemico)\n* Profiling\n* RMI</p>\n\n<p>Note:\nDOM: usualmente est\xe1 implementado entre C++ y JS, y el context switch es costoso, lo que nos lleva a querer hacer el dom en js puro, pero hay cosas que no son tan simples de implementar, y ello fue una importante razon para hacer los proxies en JS (dom mas eficiente) y ademas que nos permite emular el browser (jsdom).</p>\n\n<p>Indices negativos como en algunos lenguajes.\nMencionar Object.observe (ES7) creado para binding por la pobre performance de los proxy, aunque abandonado por react.\nObject.observe no es necesario con la inmutabilidad, tratar browser como remote rendering, no storage y query\n(undo, state). Se dice que es lo que queremos, no lo que necesitamos (Stateful dom).\nProfiling para medir tiempo.\nRMI permite por ejemplo db access directo.</p>\n\n<hr />\n\n<p><em>Invariants</em><br />\nSi el target es no extensible y no configurable, lo invariante es forzado por el engine.</p>\n\n<p>???\nno extensible protege objetos, non configurability protege properties.\nCon los proxy se podr\xeda violar la invariabilidad, pero el engine lo prohibe chequeando los parametros y los resultados de los handlers, preventExtension, true y luego false, e igual para isExtensible y getOwnPropertyDescriptor</p>\n\n<hr />\n\n<p><em>Practica 2</em><br />\nMejorar api client<br />\n(30 minutos)</p>\n\n<p>???\nelegir algunos de los TODO</p>\n\n<hr />\n\n<p><em>Avanzadas 1</em></p>\n\n<pre><code>getOwnPropertyDescriptor(target, propKey) // \u2192 PropDesc|Undefined  (fundamental)  \n  // tby: Object.getOwnPropertyDescriptor(proxy, propKey)  \ngetPrototypeOf(target) // \u2192 Object|Null  (fundamental)  \n  // tby: Object.getPrototypeOf(proxy)  \nhas(target, propKey) // \u2192 boolean  \n  // tby: propKey in proxy\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 2</em></p>\n\n<pre><code>isExtensible(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.isExtensible(proxy)  \nownKeys(target) // \u2192 Array&lt;PropertyKey&gt;  (fundamental)  \n  // tby: Object.getOwnPropertyPropertyNames(proxy) (only uses string-valued keys)  \n  // tby: Object.getOwnPropertyPropertySymbols(proxy) (only uses symbol-valued keys)  \n  // tby: Object.keys(proxy) (only uses enumerable string-valued keys;\n  // enumerability is checked via Object.getOwnPropertyDescriptor)\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 3</em></p>\n\n<pre><code>preventExtensions(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.preventExtensions(proxy)  \nset(target, propKey, value, receiver) // \u2192 boolean  \n  // tby: receiver[propKey] = value  \n  // tby: receiver.foo = value // propKey = \'foo\'  \nsetPrototypeOf(target, proto) // \u2192 boolean  (fundamental)  \n  // tby: Object.setPrototypeOf(proxy, proto)\n</code></pre>\n\n<hr />\n\n<p><em>Para funciones</em></p>\n\n<pre><code>apply(target, thisArgument, argumentsList) // \u2192 any  \n  // tby: proxy.apply(thisArgument, argumentsList) (fundamental)  \n  // tby: proxy.call(thisArgument, ...argumentsList)  \n  // tby: proxy(...argumentsList)  \nconstruct(target, argumentsList) // \u2192 Object  \n  // tby: new proxy(..argumentsList)\n</code></pre>\n\n<hr />\n\n<p><em>Conclusion</em><br />\n* Performance\n* Debug\n* Casos de uso\n* Complejidad\n* Compatibilidad</p>\n\n<p>Note:\nPerformance: Conviene medir la performance en cada caso, evaluar que tan critica es la performance en nuestra app y tomar una decision.\nA mas c\xf3digo interceptado, menor performance, mayor dificultad de entender el codigo y de debug.\nRiesgo: podemos &ldquo;romper&rdquo; comportamientos, hacerlo inconsistente\nCasos de uso:</p>\n\n<hr />\n\n<p><em>Preguntas / Discusion / Ideas</em></p>\n\n<hr />\n\n<p>Gracias!</p>\n',Summary:"Proxies en ES6 Agenda Terminolog\xeda Desarrollo Casos de uso Ejercitaci\xf3n Desarrollo Casos de uso Ejercitaci\xf3n Terminolog\xeda \xbfQue es un proxy? Origen: prokecye &ldquo;agency of one who acts instead of another&rdquo; En espa\xf1ol significa apoderado adj. Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre ??? Ejemplo, firmar un poder para hacer un tr\xe1mite \xbfQue es un protocolo? Un protocolo es un conjunto de normas.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#proxies-en-es6">Proxies en ES6</a>\n<ul>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#terminolog\xeda">Terminolog\xeda</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1238,FuzzyWordCount:1300,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"proxies",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="organize-your-thunks">Organize your thunks</h1>\n',Summary:"Organize your thunks",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#organize-your-thunks">Organize your thunks</a></li>\n</ul>\n</nav>',Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:3,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"tpipe redux",Description:"",Keywords:[],Date:"2016-10-05T17:14:32-03:00",Lastmod:"2016-10-05T17:14:32-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="react-native-en-ubuntu">React Native en Ubuntu</h1>\n\n<p>Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.</p>\n\n<h2 id="porque">Porque?</h2>\n\n<p>Como tengo cierto pasado en Java y Android, luego de unos intentos entend\xed lo que estaba sucediendo y lo hice funcionar en Ubuntu, pero como tengo tangos colegas que no pueden hacerlo funcionar y tampoco tienen una Mac, comparto el procedimiento con el mundo.</p>\n\n<h2 id="conociendo-los-elementos">Conociendo los elementos</h2>\n\n<p>Antes de ir elemento por elemento cabe destacar que si bien los componentes del SDK de android tienen una interfaz de usuario y vienen con su IDE oficial, tambi\xe9n se pueden utilizar por consola. Muchas instrucciones andan por ah\xed insistiendo en abrir este eclipse custom para acceder a las herramientas y esto no es la \xfanica opci\xf3n y para nada conveniente para un desarrollador javascript que suele utilizar Atom, Webstorm, Sublime o algo as\xed.</p>\n\n<h3 id="sdk">SDK</h3>\n\n<h3 id="driver">Driver</h3>\n\n<h3 id="emulador">Emulador</h3>\n\n<h3 id="dispositivo">Dispositivo</h3>\n\n<h2 id="comando-a-comando">Comando a comando</h2>\n\n<h2 id="entendiendo-todo">Entendiendo todo</h2>\n',Summary:"React Native en Ubuntu Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#react-native-en-ubuntu">React Native en Ubuntu</a>\n<ul>\n<li><a href="#porque">Porque?</a></li>\n<li><a href="#conociendo-los-elementos">Conociendo los elementos</a>\n<ul>\n<li><a href="#sdk">SDK</a></li>\n<li><a href="#driver">Driver</a></li>\n<li><a href="#emulador">Emulador</a></li>\n<li><a href="#dispositivo">Dispositivo</a></li>\n</ul></li>\n<li><a href="#comando-a-comando">Comando a comando</a></li>\n<li><a href="#entendiendo-todo">Entendiendo todo</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:225,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"react native ubuntu",Description:"",Keywords:[],Date:"2016-10-05T16:00:55-03:00",Lastmod:"2016-10-05T16:00:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="container-os">Container OS</h1>\n\n<p>En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto.</p>\n\n<p>Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.</p>\n\n<p><em>El futuro de los sistemas operativos son los contenedores para correr cualquier aplicaci\xf3n.</em></p>\n\n<p>Cuando uno comienza a jugar con Docker se empieza a dar cuenta de que puede ejecutar algo con un entorno controlado en cualquier otro entorno host. Podemos correr un apache en ubuntu dentro de un windows o de otro ubuntu. O un nginx en un coreos dentro de una mac. Otro ejemplo, se puede compilar un programa en go lang para cualquier plataforma desde un ubuntu sin siquiera instalar go. Una locura. Realmente.</p>\n\n<p>Esto en mi caso me hizo relacionarlo con el furor de las api rest con las que lidio d\xeda a d\xeda y con los procesos en s\xed mismos.</p>\n\n<p>Por otro lado pens\xe9 en los problemas que enfrentan el SO y los programas en cuanto a todo lo compartido entre procesos, memoria, puertos, archivos, etc.</p>\n\n<p>Todo esto fu\xe9 solucionado del lado de las aplicaciones y del SO con mucho esfuerzo en el tiempo y con desarrollos y configuraciones cuidadosas. Y fu\xe9 muy fruct\xedfero&hellip; pero con Docker todo esto sera mas sencillo.</p>\n\n<p><em>Ya no tendr\xe1 sentido tener windows, ubuntu, u OSX. Todo correr\xe1 en contenedores con su SO y su entorno optimo y controlado y el SO host decidir\xe1 que comparte con \xe9l. Los sistemas operativos ser\xe1n minimos y meros manejadores del engine de contenedores que solo tendran lo necesario para que este funcione.</em></p>\n\n<p>Las aplicaciones nativas careceran de sentido ya que vendran con su sistema operativo incorporado. Las ventanas seran simples consolas de los contenedores. La escalabilidad ser\xe1 natural. El hardware estar\xe1 finalmente desacoplado de las aplicaciones.</p>\n',Summary:"Container OS En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto. Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#container-os">Container OS</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:362,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"container os",Description:"",Keywords:[],Date:"2016-09-19T20:10:55-03:00",Lastmod:"2016-09-19T20:10:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="manejando-multiples-repositorios">Manejando multiples repositorios</h1>\n\n<h2 id="submodulos-con-git">Submodulos con git</h2>\n\n<p>Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias.</p>\n\n<p>El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.</p>\n\n<p>Las necesidades son:\n- Crear un repo que contenga a los demas (contenedor / workspace)\n- Hacer un pull de todos juntos de ser necesario</p>\n\n<h3 id="agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</h3>\n\n<p>Ahora tenemos que ir agregando nuestros repos como subm\xf3dulos.</p>\n\n<pre><code class="language-bash">git submodule add [repourl]\n</code></pre>\n\n<p>Cabe destacar que cada submodulo es un repo independiente cuando estamos dentro de el, pero en lugar de creat una carpeta .git, se crear\xe1 un archivo .git que tendr\xe1 el path a la carpeta .git del repositorio que lo contiene.\nPor otro lado, en el repositorio contenedor, se genera un archivo .gitmodules que nos dice los m\xf3dulos que este repositorio contiene.</p>\n\n<p>Nota: este archivo .gitmodules, si bien puede parecer redundante ya que est\xe1n los m\xf3dulos en la carpeta .git, es muy importante ya que al estar en el control de versiones nos permite sacar provecho de clonar a la vez muchos repositorios en el caso de uso que perseguimos aqu\xed.</p>\n\n<p>Una vez tenemos todos los repositorios agregados, comiteamos y pusheamos normalmente en el repositorio contenedor.</p>\n\n<h2 id="clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</h2>\n\n<p>Si bien la diferencia es ligera, me he topado con que git no hace nada si simplemente actualizamos en un repositorio que a\xfan no ha inicializado sus subm\xf3dulos, por ende luego del est\xe1ndar <code>git clone</code>, debemos inicializar los subm\xf3dulos de manera expl\xedcita:</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --init --recursive\n# just one\ngit submodule update --init path/to/subm\n</code></pre>\n\n<h2 id="update-de-submodulos">Update de submodulos</h2>\n\n<p>Si ya inicializamos nuestros submodulos aunque sea una vez, basta con lo siguiente</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --recursive\n# particular submodule\ngit submodule update path/to/subm\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Esto realmente es muy util, no solo por el batch update, sino porque al clonar el contenedor en una maquina, al inicializar nos puede traer los N repositorios de ese workspace, ahorrandonos muchos comandos git clone.\nUna vez que comenzas con esta practica, se convierte en un must-do rapidamente.</p>\n',Summary:"Manejando multiples repositorios Submodulos con git Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias. El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#manejando-multiples-repositorios">Manejando multiples repositorios</a>\n<ul>\n<li><a href="#submodulos-con-git">Submodulos con git</a>\n<ul>\n<li><a href="#agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</a></li>\n</ul></li>\n<li><a href="#clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</a></li>\n<li><a href="#update-de-submodulos">Update de submodulos</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:392,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"submodules",Description:"",Keywords:[],Date:"2016-09-19T14:54:14-03:00",Lastmod:"2016-09-19T14:54:14-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</h1>\n\n<p>En estos dias me puse como meta rehacer mi blog.\nPara esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts.</p>\n\n<p>Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.</p>\n\n<p>Dejar wordpress no es una tarea sencilla, ya que es una excelente plataforma, con la cual se puede hacer practicamente todo y de una manera muy sencilla. Desde SEO, pasando por analytics, infinitos temas, infinitos plugins, responsive design&hellip; en definitiva, un monton de cosas.</p>\n\n<p>Pero necesito algo mas orientado al desarrollador y no tanto a una persona &ldquo;normal&rdquo;.\nAsi que empece a buscar&hellip; y encontre gohugo, un framework hecho en golang que nos permite hacer nuestro sitio de una manera muy sencilla.</p>\n\n<p>Hugo me atrajo por diversos motivos. Me permite utilizar mi github page, con lo cual en una de esas me ahorro unos pesos de hosting, es muy personalizable (soporta arquetipos, temas, y muchas cosas mas), y es muy rapido, y cuando digo muy rapido no exagero&hellip; golang le da esa ventaja sobre por ejemplo ghost (otra platforma de blog un poco mas simple que wordpress hecha en nodejs, muy buena tambien por cierto&hellip;).</p>\n\n<p>Un tema que me jugaba en contra en Hugo era el hecho de que, al usar mi github page para el blog, la cual es open source y esta en una pagina de github, los drafts iban a quedar implicitamente publicos, y la verdad no es algo que me parezca muy adecuado.</p>\n\n<p>Asi que pense que como desarrollador y aficionado a unix esto lo podia resolver facilmente, y cree unos sencillos shell scripts para encriptar y desencriptar los drafts de manera simple y segura utilizando un archivo de key que poseo en otro repositorio que es privado.</p>\n\n<p>Quiero compartir el proceso de configuracion de un blog publico y gratis, ya que me parece interesante.\n- Primero cree un repositorio privado (se consiguen infinitos en gitlab y en bitbucket)\n- Clonamos el repo como de costumbre</p>\n\n<pre><code class="language-bash">git clone [url del repo privado]\n</code></pre>\n\n<ul>\n<li>Se agrega nuestro repo de github page como submodulo (el mio por ejemplo es git@github.com:nicosommi/nicosommi.github.io.git)\n<code>bash\ngit submodule add [url del repo del blog]\n</code></li>\n<li>Se agrega un archivo key en dicho repo parent con un contenido que servira para encriptar y desencriptar nuestros drafts</li>\n<li>Se hacen o se copian los scripts de encripcion y desencription (se pueden tomar <a href="https://github.com/nicosommi/nicosommi.github.io">de aqui</a> tal como yo los utilizo, son los archivos ddrafts.sh y edrafts.sh para desencriptar y encriptar respectivamente, notar que requieren el paquete gpg de linux o <a href="#" title="brew install -v gpg">de osx</a>)</li>\n<li>Se agrega al gitignore la carpeta de draft originales para que no vayan al repo (tambien se puede ver del <a href="https://github.com/nicosommi/nicosommi.github.io">repo de este blog</a>)</li>\n<li>Opcionalmente se puede agregar un pre commit hook para que agregue el archivo encriptado en los commits\n<code>bash\necho &quot;#\\!/usr/bin/env bash\\n./ddrafts.sh\\ngit add drafts.contents\\n&quot; &gt; ../.git/modules/nicosommi.github.io/hooks/pre-commit\n</code></li>\n</ul>\n',Summary:"Haciendo un blog con gohugo En estos dias me puse como meta rehacer mi blog. Para esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts. Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:513,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"gohugo",Description:"",Keywords:[],Date:"2016-09-18T12:16:51-03:00",Lastmod:"2016-09-18T12:16:51-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico"},Content:'<p>Please don&rsquo;t ask me for my CV and see my social profiles instead (<a href="https://www.linkedin.com/in/nicosommi/">linkedin</a>, <a href="https://github.com/nicosommi">github</a>, <a href="https://stackoverflow.com/users/1015217/nico">stackoverflow</a>).</p>\n\n<p>And if you want to contact me, send a message to <a href="maito:nicosommi@gmail.com" title="nicosommi@gmail.com">nicosommi@gmail.com</a></p>\n\n<p><a href="https://flattr.com/submit/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F" target="_blank"><img src="//button.flattr.com/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></p>\n\n<p>&nbsp;</p>\n',Summary:"Please don&rsquo;t ask me for my CV and see my social profiles instead (linkedin, github, stackoverflow). And if you want to contact me, send a message to nicosommi@gmail.com &nbsp;",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"page",WordCount:29,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Resume/Acerca de mi",Description:"",Keywords:[],Date:"2013-04-11T22:27:04Z",Lastmod:"2013-04-11T22:27:04Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}]},Title:"nicosommi",Description:"",Keywords:null,Params:null,Date:"2017-07-06T20:36:09-03:00",Lastmod:"2017-07-06T20:36:09-03:00",Sitemap:{ChangeFreq:"",Priority:0,Filename:""},URL:"/",Permalink:"http://localhost:1313/",Slug:"",Section:"",IsHome:!0},site:{BaseURL:"http://localhost:1313/",Taxonomies:{categories:{english:[{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"espa\xf1ol":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],experiences:[{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],experiencias:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],gdd:[{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}}],ideas:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],integration:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],technology:[{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],tecnicos:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],world:[{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1}}]},series:{},tags:{containers:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],debug:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],docker:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],javascript:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],js:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],linuxkit:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],moby:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"node.js":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],only:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"operative-systems":[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"tibco-business-works-designer-json-rest-esb":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],volume:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}]}},Authors:null,Social:{},Sections:{draft:[{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="scripts">Scripts</h1>\n\n<h2 id="problema">Problema</h2>\n\n<p>Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.\nUno de estos problemas, una vez elegidos los paquetes, es armar una serie de scripts que nos brinden todas las tareas que necesitamos.\nEnumerando, en escenarios tipicos necesitamos minimamente:\n- test\n- test watch\n- test con reporte de coverage completo\n- test watch con un reporte de coverage completo\n- start con live reload\n- start\n- lint\n- build (transpilacion, webpack, etc)\n- &hellip;etc&hellip; (chequeo de dependencias, )</p>\n\n<p>De proyecto en proyecto, cambiando clientes, equipos, lenguajes, estandares, y otras cosas, cambian las estructuras del proyecto, la ubicacion de los archivos, los frameworks, las costumbres, y muchas otras cosas mas.\nSin embargo, estos scripts, aunque cambian ligeramente, siempre estan, y si no estan, estaria bien que estuviesen, lo cual es un punto muy importante, ya que algunas veces esto nos lleva a tener menos &ldquo;comodidades&rdquo; para producir codigo de calidad.\nEste problema es el que vengo enfrentando una vez tras otra, y ya he probado varias alternativas:</p>\n\n<h2 id="intento-1-grunt-gulp">Intento 1: grunt/gulp</h2>\n\n<p>Grunt y gulp, para un recien iniciado, significa produccion rapida. Son sencillos de aprender y nos permiten realizar cosas relativamente complejas con dependencias entre tareas que ejecutan scripts.<br />\nSin embargo, a mi personalmente no me gusta la dependencia que se genera con dichos frameworks que a mi criterio, resuelven las cosas de una manera que no es la optima.<br />\nUno termina sospechando que con npm y sus scripts deberia ser suficiente. Nos queda el sabor de que son sobre disenos para la mayoria de los casos.</p>\n\n<h2 id="intento-2-npm-suelto">Intento 2: npm suelto</h2>\n\n<p>Luego del intento anterior, y con el criterio de utilizar lo que es realmente necesario, uno intenta sacarle el maximo provecho a npm. Esto es realmente muy sencillo y funciona muy bien.\nSimplemente agregamos scripts y combinamos comandos o llamamos a otros scripts.\nEsto sin embargo tiene una dependencia implicita: el sistema operativo. Muchos comandos son particulares de UNIX y no funcionan en Windows.</p>\n\n<h2 id="intento-3-makefile">Intento 3: makefile</h2>\n\n<p>Es una alternativa interesante, muy util, mucho mas performante que un manejador de dependencias en javascript, y mas sencillo tambien, aunque suele asustar a mucha gente.<br />\nLo cierto es que resuelve el core de grunt/gulp y nos permite luego hacer lo que queramos.<br />\nEs una de las mejores a mi parecer, y si bien no muchos la eligen, he visto varios projectos con su Makefile.</p>\n\n<p>En este post quiero probar dos ideas que aun no he visto por alli:</p>\n\n<h2 id="idea-1-shelljs">Idea 1: shelljs</h2>\n\n<p>Esta idea consiste en llamar, desde npm, a scripts que son una secuencia de comandos en shelljs.\nShell.js para quienes no la conocen es una libreria con una implementacion de POSIX en javascript. Es decir que con esto podemos utilizar comandos que funcionaran tambien en windows.\nUna solucion sencilla y eficaz.\nVeamos como seria un proyecto sencillo.</p>\n\n<h2 id="idea-2-docker">Idea 2: docker</h2>\n\n<p>Esta vez, yendo un paso mas alla, cada comando de npm podria correr en un contenedor efimero que utilice siempre la misma plataforma, por ejemplo un alpine linux o un ubuntu.\nEsto tiene la ventaja de utilizar los comandos del shell que mas nos guste, y del sistema operativo de nuestra preferencia.\nLa implementacion sin embargo nos genera una dependencia: docker.\nPersonalmente creo que docker debe estar instalado en todas las computadoras, ya que es el futuro&hellip; (en realidad ya es el presente) por lo que para mis proyectos no lo considero un impedimento.\nAdemas de la dependencia, hay una minima complejidad en la implementacion: se requiere un conocimiento de docker.\nAunque para esto ultimo, he desarrollado un paquete.\nVeamos como seria un ejemplo sin dicho paquete:\nY ahora uno utilizando este paquete:</p>\n\n<h2 id="un-poco-de-mi-historia">Un poco de mi historia</h2>\n\n<p>Cuando arranque con node.js, alla por el 2012, npm fue una las primeras cosas con las que tuve contacto al poco tiempo.<br />\nEs el lugar donde convergen los paquetes de la comunidad. Tan fuerte era dicho lazo que pronto npm se introdujo en node y ahora forma parte del mismo paquete.\nCasi automaticamente, y un poco agnostico de npm, adopte soluciones parecidas a mis experiencias previas en java (maven y ant).</p>\n\n\x3c!--\n<resumen />\n- npm suelto\n- grunt/gulp\n- npm suelto\n- shelljs\n- docker\n--\x3e\n',Summary:"Scripts Problema Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#scripts">Scripts</a>\n<ul>\n<li><a href="#problema">Problema</a></li>\n<li><a href="#intento-1-grunt-gulp">Intento 1: grunt/gulp</a></li>\n<li><a href="#intento-2-npm-suelto">Intento 2: npm suelto</a></li>\n<li><a href="#intento-3-makefile">Intento 3: makefile</a></li>\n<li><a href="#idea-1-shelljs">Idea 1: shelljs</a></li>\n<li><a href="#idea-2-docker">Idea 2: docker</a></li>\n<li><a href="#un-poco-de-mi-historia">Un poco de mi historia</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:765,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"scripts",Description:"",Keywords:[],Date:"2017-01-27T18:54:15-03:00",Lastmod:"2017-01-27T18:54:15-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="organize-your-thunks">Organize your thunks</h1>\n',Summary:"Organize your thunks",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#organize-your-thunks">Organize your thunks</a></li>\n</ul>\n</nav>',Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:3,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"tpipe redux",Description:"",Keywords:[],Date:"2016-10-05T17:14:32-03:00",Lastmod:"2016-10-05T17:14:32-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="react-native-en-ubuntu">React Native en Ubuntu</h1>\n\n<p>Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.</p>\n\n<h2 id="porque">Porque?</h2>\n\n<p>Como tengo cierto pasado en Java y Android, luego de unos intentos entend\xed lo que estaba sucediendo y lo hice funcionar en Ubuntu, pero como tengo tangos colegas que no pueden hacerlo funcionar y tampoco tienen una Mac, comparto el procedimiento con el mundo.</p>\n\n<h2 id="conociendo-los-elementos">Conociendo los elementos</h2>\n\n<p>Antes de ir elemento por elemento cabe destacar que si bien los componentes del SDK de android tienen una interfaz de usuario y vienen con su IDE oficial, tambi\xe9n se pueden utilizar por consola. Muchas instrucciones andan por ah\xed insistiendo en abrir este eclipse custom para acceder a las herramientas y esto no es la \xfanica opci\xf3n y para nada conveniente para un desarrollador javascript que suele utilizar Atom, Webstorm, Sublime o algo as\xed.</p>\n\n<h3 id="sdk">SDK</h3>\n\n<h3 id="driver">Driver</h3>\n\n<h3 id="emulador">Emulador</h3>\n\n<h3 id="dispositivo">Dispositivo</h3>\n\n<h2 id="comando-a-comando">Comando a comando</h2>\n\n<h2 id="entendiendo-todo">Entendiendo todo</h2>\n',Summary:"React Native en Ubuntu Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#react-native-en-ubuntu">React Native en Ubuntu</a>\n<ul>\n<li><a href="#porque">Porque?</a></li>\n<li><a href="#conociendo-los-elementos">Conociendo los elementos</a>\n<ul>\n<li><a href="#sdk">SDK</a></li>\n<li><a href="#driver">Driver</a></li>\n<li><a href="#emulador">Emulador</a></li>\n<li><a href="#dispositivo">Dispositivo</a></li>\n</ul></li>\n<li><a href="#comando-a-comando">Comando a comando</a></li>\n<li><a href="#entendiendo-todo">Entendiendo todo</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:225,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"react native ubuntu",Description:"",Keywords:[],Date:"2016-10-05T16:00:55-03:00",Lastmod:"2016-10-05T16:00:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="container-os">Container OS</h1>\n\n<p>En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto.</p>\n\n<p>Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.</p>\n\n<p><em>El futuro de los sistemas operativos son los contenedores para correr cualquier aplicaci\xf3n.</em></p>\n\n<p>Cuando uno comienza a jugar con Docker se empieza a dar cuenta de que puede ejecutar algo con un entorno controlado en cualquier otro entorno host. Podemos correr un apache en ubuntu dentro de un windows o de otro ubuntu. O un nginx en un coreos dentro de una mac. Otro ejemplo, se puede compilar un programa en go lang para cualquier plataforma desde un ubuntu sin siquiera instalar go. Una locura. Realmente.</p>\n\n<p>Esto en mi caso me hizo relacionarlo con el furor de las api rest con las que lidio d\xeda a d\xeda y con los procesos en s\xed mismos.</p>\n\n<p>Por otro lado pens\xe9 en los problemas que enfrentan el SO y los programas en cuanto a todo lo compartido entre procesos, memoria, puertos, archivos, etc.</p>\n\n<p>Todo esto fu\xe9 solucionado del lado de las aplicaciones y del SO con mucho esfuerzo en el tiempo y con desarrollos y configuraciones cuidadosas. Y fu\xe9 muy fruct\xedfero&hellip; pero con Docker todo esto sera mas sencillo.</p>\n\n<p><em>Ya no tendr\xe1 sentido tener windows, ubuntu, u OSX. Todo correr\xe1 en contenedores con su SO y su entorno optimo y controlado y el SO host decidir\xe1 que comparte con \xe9l. Los sistemas operativos ser\xe1n minimos y meros manejadores del engine de contenedores que solo tendran lo necesario para que este funcione.</em></p>\n\n<p>Las aplicaciones nativas careceran de sentido ya que vendran con su sistema operativo incorporado. Las ventanas seran simples consolas de los contenedores. La escalabilidad ser\xe1 natural. El hardware estar\xe1 finalmente desacoplado de las aplicaciones.</p>\n',Summary:"Container OS En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto. Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#container-os">Container OS</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:362,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"container os",Description:"",Keywords:[],Date:"2016-09-19T20:10:55-03:00",Lastmod:"2016-09-19T20:10:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="manejando-multiples-repositorios">Manejando multiples repositorios</h1>\n\n<h2 id="submodulos-con-git">Submodulos con git</h2>\n\n<p>Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias.</p>\n\n<p>El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.</p>\n\n<p>Las necesidades son:\n- Crear un repo que contenga a los demas (contenedor / workspace)\n- Hacer un pull de todos juntos de ser necesario</p>\n\n<h3 id="agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</h3>\n\n<p>Ahora tenemos que ir agregando nuestros repos como subm\xf3dulos.</p>\n\n<pre><code class="language-bash">git submodule add [repourl]\n</code></pre>\n\n<p>Cabe destacar que cada submodulo es un repo independiente cuando estamos dentro de el, pero en lugar de creat una carpeta .git, se crear\xe1 un archivo .git que tendr\xe1 el path a la carpeta .git del repositorio que lo contiene.\nPor otro lado, en el repositorio contenedor, se genera un archivo .gitmodules que nos dice los m\xf3dulos que este repositorio contiene.</p>\n\n<p>Nota: este archivo .gitmodules, si bien puede parecer redundante ya que est\xe1n los m\xf3dulos en la carpeta .git, es muy importante ya que al estar en el control de versiones nos permite sacar provecho de clonar a la vez muchos repositorios en el caso de uso que perseguimos aqu\xed.</p>\n\n<p>Una vez tenemos todos los repositorios agregados, comiteamos y pusheamos normalmente en el repositorio contenedor.</p>\n\n<h2 id="clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</h2>\n\n<p>Si bien la diferencia es ligera, me he topado con que git no hace nada si simplemente actualizamos en un repositorio que a\xfan no ha inicializado sus subm\xf3dulos, por ende luego del est\xe1ndar <code>git clone</code>, debemos inicializar los subm\xf3dulos de manera expl\xedcita:</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --init --recursive\n# just one\ngit submodule update --init path/to/subm\n</code></pre>\n\n<h2 id="update-de-submodulos">Update de submodulos</h2>\n\n<p>Si ya inicializamos nuestros submodulos aunque sea una vez, basta con lo siguiente</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --recursive\n# particular submodule\ngit submodule update path/to/subm\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Esto realmente es muy util, no solo por el batch update, sino porque al clonar el contenedor en una maquina, al inicializar nos puede traer los N repositorios de ese workspace, ahorrandonos muchos comandos git clone.\nUna vez que comenzas con esta practica, se convierte en un must-do rapidamente.</p>\n',Summary:"Manejando multiples repositorios Submodulos con git Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias. El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#manejando-multiples-repositorios">Manejando multiples repositorios</a>\n<ul>\n<li><a href="#submodulos-con-git">Submodulos con git</a>\n<ul>\n<li><a href="#agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</a></li>\n</ul></li>\n<li><a href="#clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</a></li>\n<li><a href="#update-de-submodulos">Update de submodulos</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:392,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"submodules",Description:"",Keywords:[],Date:"2016-09-19T14:54:14-03:00",Lastmod:"2016-09-19T14:54:14-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</h1>\n\n<p>En estos dias me puse como meta rehacer mi blog.\nPara esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts.</p>\n\n<p>Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.</p>\n\n<p>Dejar wordpress no es una tarea sencilla, ya que es una excelente plataforma, con la cual se puede hacer practicamente todo y de una manera muy sencilla. Desde SEO, pasando por analytics, infinitos temas, infinitos plugins, responsive design&hellip; en definitiva, un monton de cosas.</p>\n\n<p>Pero necesito algo mas orientado al desarrollador y no tanto a una persona &ldquo;normal&rdquo;.\nAsi que empece a buscar&hellip; y encontre gohugo, un framework hecho en golang que nos permite hacer nuestro sitio de una manera muy sencilla.</p>\n\n<p>Hugo me atrajo por diversos motivos. Me permite utilizar mi github page, con lo cual en una de esas me ahorro unos pesos de hosting, es muy personalizable (soporta arquetipos, temas, y muchas cosas mas), y es muy rapido, y cuando digo muy rapido no exagero&hellip; golang le da esa ventaja sobre por ejemplo ghost (otra platforma de blog un poco mas simple que wordpress hecha en nodejs, muy buena tambien por cierto&hellip;).</p>\n\n<p>Un tema que me jugaba en contra en Hugo era el hecho de que, al usar mi github page para el blog, la cual es open source y esta en una pagina de github, los drafts iban a quedar implicitamente publicos, y la verdad no es algo que me parezca muy adecuado.</p>\n\n<p>Asi que pense que como desarrollador y aficionado a unix esto lo podia resolver facilmente, y cree unos sencillos shell scripts para encriptar y desencriptar los drafts de manera simple y segura utilizando un archivo de key que poseo en otro repositorio que es privado.</p>\n\n<p>Quiero compartir el proceso de configuracion de un blog publico y gratis, ya que me parece interesante.\n- Primero cree un repositorio privado (se consiguen infinitos en gitlab y en bitbucket)\n- Clonamos el repo como de costumbre</p>\n\n<pre><code class="language-bash">git clone [url del repo privado]\n</code></pre>\n\n<ul>\n<li>Se agrega nuestro repo de github page como submodulo (el mio por ejemplo es git@github.com:nicosommi/nicosommi.github.io.git)\n<code>bash\ngit submodule add [url del repo del blog]\n</code></li>\n<li>Se agrega un archivo key en dicho repo parent con un contenido que servira para encriptar y desencriptar nuestros drafts</li>\n<li>Se hacen o se copian los scripts de encripcion y desencription (se pueden tomar <a href="https://github.com/nicosommi/nicosommi.github.io">de aqui</a> tal como yo los utilizo, son los archivos ddrafts.sh y edrafts.sh para desencriptar y encriptar respectivamente, notar que requieren el paquete gpg de linux o <a href="#" title="brew install -v gpg">de osx</a>)</li>\n<li>Se agrega al gitignore la carpeta de draft originales para que no vayan al repo (tambien se puede ver del <a href="https://github.com/nicosommi/nicosommi.github.io">repo de este blog</a>)</li>\n<li>Opcionalmente se puede agregar un pre commit hook para que agregue el archivo encriptado en los commits\n<code>bash\necho &quot;#\\!/usr/bin/env bash\\n./ddrafts.sh\\ngit add drafts.contents\\n&quot; &gt; ../.git/modules/nicosommi.github.io/hooks/pre-commit\n</code></li>\n</ul>\n',Summary:"Haciendo un blog con gohugo En estos dias me puse como meta rehacer mi blog. Para esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts. Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:513,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"gohugo",Description:"",Keywords:[],Date:"2016-09-18T12:16:51-03:00",Lastmod:"2016-09-18T12:16:51-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],post:[{Weight:0,Page:{Params:{},Content:'\n\n<p><em>Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size</em></p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository.</p>\n\n<p>A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.</p>\n\n<p>Let&rsquo;s start with this.</p>\n\n<h3 id="first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</h3>\n\n<p>Easy, go to <a href="https://www.docker.com/community-edition#/download">https://www.docker.com/community-edition#/download</a>\nChoose your platform AND, because we need multi stage builds and its still on the <em>edge channel</em> we need to choose that instead of the stable channel. Download, install.</p>\n\n<h3 id="second-step-building-a-spa">Second step: Building a SPA</h3>\n\n<p>A single page application is just a static web page that can be served through any traditional web server.</p>\n\n<p>For this example, let&rsquo;s pick a boilerplate SPA like create-react-app.</p>\n\n<pre><code class="language-shell">npm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\nnpm start # if you want to test it and check the browser for it\n</code></pre>\n\n<h3 id="third-step-create-a-dockerfile">Third step: create a Dockerfile</h3>\n\n<p>All right now the important thing, let&rsquo;s take a look at a candidate Dockerfile</p>\n\n<pre><code class="language-docker"># buildtime\nFROM node AS nodebase\nLABEL maintainer &quot;nicosommi@gmail.com&quot;\n\nADD . /usr/src/app\nWORKDIR /usr/src/app\nRUN npm i &amp;&amp; npm run build\n\n# runtime\nFROM nginx:alpine\nCOPY --from=nodebase /usr/src/app/build /usr/share/nginx/html\n</code></pre>\n\n<p>So let&rsquo;s see.</p>\n\n<p>We start with a node:latest image, no problem with the image size because now we have multi stage builds.</p>\n\n<p>The LABEL maintainer, that&rsquo;s recent too, no more MAINTAINER special instruction, now it&rsquo;s a label.</p>\n\n<p>We add the current directory to the appropiate location and set the working directory to it.</p>\n\n<p>Install, build&hellip; and that&rsquo;s all that we need to generate our artifacts in our build folder.</p>\n\n<p>So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.</p>\n\n<p>Done!</p>\n\n<h3 id="fourth-step-build-and-run">Fourth step: build and run!</h3>\n\n<p>So now, let&rsquo;s build the image\n<code>docker build -t my-app .</code></p>\n\n<p>And now let&rsquo;s look it&rsquo;s size\n<code>docker images</code></p>\n\n<p>All right! less than 16 MB! With the whole thing, linux, nginx and our app!</p>\n\n<p>That&rsquo;s great. Just the node_modules folder size after installation is around 130 MB&hellip; so this is a BIG win.</p>\n\n<p>Let&rsquo;s try it<br />\n<code>docker run -d --rm -p 8000:80 --name my-app my-app</code></p>\n\n<p>Open chrome in localhost:8000 and enjoy.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Multi stage builds are great, it let&rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.</p>\n\n<p>By making this clear distinction between different stages, docker let&rsquo;s you think in a more organized way about the Dockerfile.</p>\n\n<p>With multi stage builds the LAST stage is the one that is used on your final image. Don&rsquo;t forget that. <em>For example, the ONBUILD instruction on a previous stage wont have any effect</em> because it will be overwritten with the last stage of the Dockerfile.</p>\n\n<p>As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&rsquo;s really big very quickly.</p>\n\n<p>nicosommi</p>\n',Summary:"Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size Introduction With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository. A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#introduction">Introduction</a>\n<ul>\n<li><a href="#first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</a></li>\n<li><a href="#second-step-building-a-spa">Second step: Building a SPA</a></li>\n<li><a href="#third-step-create-a-dockerfile">Third step: create a Dockerfile</a></li>\n<li><a href="#fourth-step-build-and-run">Fourth step: build and run!</a></li>\n</ul></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:526,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Weekend experiment: a node.js SPA with multi stage builds from docker",Description:"",Keywords:[],Date:"2017-04-29T06:34:58-03:00",Lastmod:"2017-04-29T06:34:58-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],react:[{Weight:0,Page:{Params:{bundle:"default"},Content:"",Summary:"",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:0,FuzzyWordCount:100,ReadingTime:0,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"test",Description:"",Keywords:[],Date:"2017-07-06T20:36:09-03:00",Lastmod:"2017-07-06T20:36:09-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],resume:[{Weight:0,Page:{Params:{author:"nico"},Content:'<p>Please don&rsquo;t ask me for my CV and see my social profiles instead (<a href="https://www.linkedin.com/in/nicosommi/">linkedin</a>, <a href="https://github.com/nicosommi">github</a>, <a href="https://stackoverflow.com/users/1015217/nico">stackoverflow</a>).</p>\n\n<p>And if you want to contact me, send a message to <a href="maito:nicosommi@gmail.com" title="nicosommi@gmail.com">nicosommi@gmail.com</a></p>\n\n<p><a href="https://flattr.com/submit/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F" target="_blank"><img src="//button.flattr.com/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></p>\n\n<p>&nbsp;</p>\n',Summary:"Please don&rsquo;t ask me for my CV and see my social profiles instead (linkedin, github, stackoverflow). And if you want to contact me, send a message to nicosommi@gmail.com &nbsp;",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"page",WordCount:29,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Resume/Acerca de mi",Description:"",Keywords:[],Date:"2013-04-11T22:27:04Z",Lastmod:"2013-04-11T22:27:04Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],slide:[{Weight:0,Page:{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/2017-03-25-13-39-09.png" width="400px"></img></p>\n\n<h1 id="docker-secrets">Docker secrets</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda e introducci\xf3n</li>\n<li>Como surgen?</li>\n<li>\xbfQu\xe9 son los secrets?</li>\n<li>\xbfPara que sirven?</li>\n<li>Anotaciones de seguridad</li>\n<li>Detalles de utilizaci\xf3n</li>\n<li>Preparando nuestras im\xe1genes</li>\n<li>Creando un secreto sencillo</li>\n<li>Utilizando secrets con YML&rsquo;s de docker compose</li>\n<li>Usando https con secrets</li>\n<li>Resumen de comandos</li>\n<li>Q &amp; A</li>\n<li>Fin</li>\n</ol>\n\n<hr />\n\n<h2 id="como-surgen">\xbfComo surgen?</h2>\n\n<p>Porque la comunidad toma decisiones heterogeneas y peligrosas:\n- Usar variables de entorno (12 factor app)\n- Variables de entorno en build\n- Manual build (commit)\n- Custom hacks (curl a webserver)\n&hellip; Se necesitan do&rsquo;s and don&rsquo;ts</p>\n\n<p>???\n- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados</p>\n\n<h2 id="hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</h2>\n\n<h2 id="qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</h2>\n\n<p>Para docker es un BLOB de datos manejado de manera centralizada.\n- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan\n- Solo para swarm&hellip; por ahora\n- Hasta 500KB (no TAN large)\n- Por ahora solo para runtime\n<center>\n  <img src="/slide/assets/2017-03-22-21-47-13.png" width="800px"></img>\n</center></p>\n\n<p>???\nBinary Large OBjects\nSecure Sockets Layer (ahora Transport Layer Security)\nSwarmKit es una libreria que se encarga del node management</p>\n\n<h2 id="hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</h2>\n\n<h2 id="para-que-sirven">\xbfPara que sirven?</h2>\n\n<ul>\n<li>Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos&hellip; y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones</li>\n<li>Funciona como capa de abstraccion entre las credenciales y los contenedores</li>\n</ul>\n\n<p>???\n- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido</p>\n\n<hr />\n\n<h2 id="anotaciones-de-seguridad">Anotaciones de seguridad</h2>\n\n<ul>\n<li>Viajan a los managers del swarm por TLS</li>\n<li>Se almacenan en el Raft log, con todo lo que ello nos garantiza (que est\xe1 encriptado y es replicado a trav\xe9s de los managers, garantizando la misma HA que el resto de la informacion del swarm)</li>\n<li>Cuando se detiene un container, se hace unmount y se flushea la memoria</li>\n<li>Si se pierde conexi\xf3n con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucci\xf3n hasta que se vuelva a conectar al swarm<br />\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li>\n</ul>\n\n<p>???\n* Esta encriptado desde la 1.13\n* El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm\n* El &ldquo;Raft log&rdquo; se refiere al consensus algorithm que utiliza swarmkit <em>entre managers</em> para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue dise\xf1ado para ser simple de entender y que m\xe1s sistemas utilizen un buen algoritmo de consenso para ser m\xe1s tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y l\xedderes.\n* Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un l\xedder es elegido. Despu\xe9s hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a>\nTienen un log y una maquina de estados.\nSi una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, tambi\xe9n relegando su liderazgo.</p>\n\n<hr />\n\n<h2 id="detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</h2>\n\n<ul>\n<li>Se montan en /run/secrets/name</li>\n<li>Solo tiene acceso si es un manager o si tiene permisos espec\xedficos</li>\n<li>Se pueden ver, listar los secrets, pero no se puede borrar uno que est\xe1 siendo utilizado, para ello se debe rotar el secret</li>\n<li>Se recomienda poner en el nombre una fecha o numero de version, para hacer m\xe1s sencillo el control</li>\n</ul>\n\n<p>???\n- &ndash;secret source=mysql_password,target=wp_db_password,mode=0400</p>\n\n<hr />\n\n<h2 id="preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</h2>\n\n<ul>\n<li>Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE adem\xe1s de MYSQL_PASSWORD)</li>\n</ul>\n\n<hr />\n\n<h2 id="creando-un-secreto-sencillo">Creando un secreto sencillo</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ openssl rand -base64 20 | docker secret create mi_secreto -\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets\n$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto\n</code></pre>\n\n<p>???\nSi commiteamos el container a una imagen, el secreto es desmontado</p>\n\n<h2 id="si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</h2>\n\n<h2 id="utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</h2>\n\n<pre><code class="language-yaml">version: \'3.1\'\nservices:\n    test:\n        image: \'alpine\'\n        command: \'cat /run/secrets/my_secret\'\n        secrets: \n            - my_secret\nsecrets:\n    my_secret:\n        file: ./mysecret.txt\n        # o external: true para tomarlo del swarm\n</code></pre>\n\n<p>???\nGracias al stack del compose</p>\n\n<h2 id="docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</h2>\n\n<h2 id="usando-https-con-secrets">Usando https con secrets</h2>\n\n<ol>\n<li>Generar certificado con let&rsquo;s encrypt, self-signed u otra CA</li>\n<li>Preparar nginx config</li>\n<li>Preparar secrets en el swarm\n<code>shell\n$ docker secret create site.key site.key\n$ docker secret create site.crt site.crt\n$ docker secret create site.conf site.conf\n</code></li>\n\n<li><p>Crear el servicio</p>\n\n<pre><code class="language-shell">$ docker service create --name nginx --secret site.key \\\n --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \\\n sh -c &quot;ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf &amp;&amp; exec nginx -g \'daemon off;\'&quot;\n</code></pre>\n\n<p>???</p>\n\n<h2 id="daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</h2>\n\n<h2 id="resumen-de-comandos">Resumen de comandos</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ echo &quot;a&quot; | docker secret create mi_secreto -\n$ docker secret inspect mi_secreto\n$ docker secret ls\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker service update mi_servicio --secret-rm mi_secreto\n$ docker service update mi_servicio --secret-add mi_nuevo_secreto\n$ docker secret rm mi_secreto\n</code></pre>\n\n<p>???</p>\n\n<h2 id="aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</h2>\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1></li>\n</ol>\n',Summary:"Docker secrets Por nicosommi name: agenda Agenda Agenda e introducci\xf3n Como surgen? \xbfQu\xe9 son los secrets? \xbfPara que sirven? Anotaciones de seguridad Detalles de utilizaci\xf3n Preparando nuestras im\xe1genes Creando un secreto sencillo Utilizando secrets con YML&rsquo;s de docker compose Usando https con secrets Resumen de comandos Q &amp; A Fin \xbfComo surgen? Porque la comunidad toma decisiones heterogeneas y peligrosas: - Usar variables de entorno (12 factor app) - Variables de entorno en build - Manual build (commit) - Custom hacks (curl a webserver) &hellip; Se necesitan do&rsquo;s and don&rsquo;ts ???",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#docker-secrets">Docker secrets</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#como-surgen">\xbfComo surgen?</a></li>\n<li><a href="#hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</a></li>\n<li><a href="#qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</a></li>\n<li><a href="#hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</a></li>\n<li><a href="#para-que-sirven">\xbfPara que sirven?</a></li>\n<li><a href="#anotaciones-de-seguridad">Anotaciones de seguridad</a></li>\n<li><a href="#detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</a></li>\n<li><a href="#preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</a></li>\n<li><a href="#creando-un-secreto-sencillo">Creando un secreto sencillo</a></li>\n<li><a href="#si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</a></li>\n<li><a href="#utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</a></li>\n<li><a href="#docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</a></li>\n<li><a href="#usando-https-con-secrets">Usando https con secrets</a></li>\n<li><a href="#daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</a></li>\n<li><a href="#resumen-de-comandos">Resumen de comandos</a></li>\n<li><a href="#aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:990,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker secrets",Description:"",Keywords:[],Date:"2017-03-29T15:38:10-03:00",Lastmod:"2017-03-29T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/docker-74de8.png" width="400px"></img></p>\n\n<h1 id="introduccion-a-docker">Introduccion a docker</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda y alcance</li>\n<li>Fundamentos</li>\n<li>Casos de uso</li>\n<li>Por dentro</li>\n<li>Componentes</li>\n<li>Ejemplo sencillo</li>\n<li>Q &amp; A</li>\n<li>Mas componentes</li>\n<li>Comandos sobre contenedores e im\xe1genes</li>\n<li>Ejemplo lateral</li>\n<li>T\xe9cnica para construir un Dockerfile</li>\n<li>Buenas pr\xe1cticas</li>\n<li>Docker para SPA, web apps, etc</li>\n<li>Anexo: Services</li>\n<li>Q &amp; A</li>\n</ol>\n\n<hr />\n\n<p>class: center</p>\n\n<h2 id="que-es">Que es?</h2>\n\n<p><center>\n  <img src="/assets/docker-89c82.png" width="400px"></img>\n</center></p>\n\n<p>???\nDisculpen el teclado en ingles</p>\n\n<hr />\n\n<ul>\n<li>T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.</li>\n<li>Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.</li>\n<li>UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios</li>\n<li>Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)\n<center>\n<img src="/assets/docker-28b55.png" width="300px"></img>\n</center></li>\n</ul>\n\n<hr />\n\n<p>class: right\n<img style="position: absolute" src="/assets/docker-04a7d.png" width="200px"></img></p>\n\n<h2 id="es-una-maquina-virtual-no">Es una maquina virtual? No.</h2>\n\n<h2 id="como-se-diferencia-de-una">Como se diferencia de una?</h2>\n\n<hr />\n\n<p>Se diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.\n<center>\n  <img src="/assets/history.png" width="600px"></img>\n</center>\n???\nComentar:\n* historia\n* primero escalabilidad horizontal\n* despues optimizar recursos\n* adicionales: docker swarm independiente\nNos permite cambiar la unidad de medida de nuestra aplicaci\xf3n de m\xe1quinas virtuales o f\xedsicas a simples containers.</p>\n\n<hr />\n\n<h2 id="en-donde-corre">En donde corre?</h2>\n\n<p>En sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).\nTambien, recientemente incorporaron contenedores basados en windows server.\n<center>\n  <img src="/assets/platforms.png" width="400px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-6a999.png" width="100px"></img>\n</div></p>\n\n<h2 id="nbsp-para-que-sirve">&nbsp;Para que sirve?</h2>\n\n<p>Para isolar el entorno de ejecuci\xf3n de una aplicaci\xf3n.</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/pencil.png" width="80px"></img>\n</div></p>\n\n<h2 id="nbsp-datos">&nbsp;Datos</h2>\n\n<ul>\n<li>Es open source desde el 2013.</li>\n<li>Esta escrito en go.</li>\n<li>Lo comenz\xf3 Solomon Hykes en dotCloud.</li>\n</ul>\n\n<p>???\nGo esta pensado para concurrencia y productividad y tiene garbage collection</p>\n\n<hr />\n\n<h2 id="casos-de-uso">Casos de uso</h2>\n\n<p><img src="/assets/usecases.png" width="90%"></img>\n???\nInvitar a sugerir ideas u opinar sobre las mencionadas\nTexto:\n* CI/CD\n* Entornos de desarrollo\n* Compilar para distintos targets\n* PaaS\n* Escalabilidad horizontal\n* High availability cluster\n* Aislar ejecucion de codigo de manera segura (webpackbin, etc)\n* Aprendizaje/investigacion\n* Etc&hellip;</p>\n\n<hr />\n\n<h2 id="por-dentro">Por dentro</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="140px"></img>\n</div></p>\n\n<h2 id="nbsp-docker-image">&nbsp;Docker Image</h2>\n\n<ul>\n<li>Es un template con instrucciones para la construccion de contenedores</li>\n<li>Tiene una o varias capas de solo lectura a partir del cual se crean contenedores</li>\n<li>Se pueden extender o empezar de cero</li>\n<li>Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile</li>\n<li>El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.</li>\n<li>Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-container">Docker Container</h2>\n\n<ul>\n<li>Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.</li>\n<li>Contiene una fina capa adicional a las de su imagen con permisos de escritura.</li>\n<li>Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.</li>\n<li>Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.\n<center>\n<img src="/assets/docker-bb91f.png" width="300px"></img>\n</center></li>\n</ul>\n\n<p>???\nPreguntar diferencia entre contenedor e imagen y clarificar dudas</p>\n\n<hr />\n\n<h2 id="acerca-del-contenedor">Acerca del Contenedor</h2>\n\n<p>Previamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).\n<center>\n  <img src="/assets/docker-71f58.png" width="240px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-1c5ae.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-storage">&nbsp;Storage</h2>\n\n<ul>\n<li>Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor</li>\n<li>Docker utiliza &lsquo;copy on write&rsquo;, es decir que copia una capa s\xf3lo cuando la va a cambiar, lo que permite optimizar el tama\xf1o en disco ocupado por la imagen y el tiempo de arranque de los contenedores.</li>\n<li>Toda la data de imagenes y contenedores se guarda en una carpeta.</li>\n<li>Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir seg\xfan caso de uso, experiencia del equipo y linux distro.</li>\n</ul>\n\n<hr />\n\n<h2 id="componentes">Componentes</h2>\n\n<hr />\n\n<h2 id="docker-engine">Docker Engine</h2>\n\n<p>Aplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.\n<img src="/assets/docker-9cf40.png" alt="Docker engine" /></p>\n\n<hr />\n\n<h2 id="machine">Machine</h2>\n\n<ul>\n<li>Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.</li>\n<li>Nos deja instalar docker en terminales remotas y provisionar swarms.\n<img src="/assets/docker-7ada0.png" width="95%"></img>\n???\nPermite especificar drivers para distintos providers</li>\n</ul>\n\n<hr />\n\n<h2 id="compose">Compose</h2>\n\n<p>Es una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.\n* Detecta cambios y recrea solo lo necesario\n* Soporta variables en el compose file\n* Guarda la data persistida en los volumes\n* Es muy util para entornos de desarrollo, para deployment en un solo host\n<center>\n  <img src="/assets/docker-32d4f.png" width="200px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/ubuntu.png" width="50px"></img>\n</div></p>\n\n<h2 id="nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</h2>\n\n<pre><code class="language-bash">$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash\nroot@3883936319fb:/# lsb_release -a\n(...) Description:\tUbuntu 14.04.5 LTS (...)\n</code></pre>\n\n<ol>\n<li>Trae la ultima imagen, o si ya existe la utiliza.</li>\n<li>Crea, en base a la imagen, un contenedor.</li>\n<li>Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.</li>\n<li>Asigna una interfaz de red con la cual habla con el host</li>\n<li>Setea una IP de una pool</li>\n<li>Ejecuta el proceso solicitado (/bin/bash)</li>\n<li>Captura y devuelve el output del contenedor por haber indicado -it</li>\n</ol>\n\n<p>???\ni es para el interactive mode, que deja el stdin esperando\nt asigna un pseudo tty / pty\n* pull\n* hablar de pull y de los otros parametros como name, port, volume</p>\n\n<hr />\n\n<h2 id="wordpress">Wordpress</h2>\n\n<pre>\n  <code class="bash hljs remark-code remark-code-line" style="font-size: 13px;">\n  version: \'2\'\n\n  services:\n     db:\n       image: mysql:5.7\n       volumes:\n         - "./.data/db:/var/lib/mysql"\n       restart: always\n       environment: (...)\n\n     wordpress:\n       depends_on:\n         - db\n       image: wordpress:latest\n       links:\n         - db\n       ports:\n         - "8000:80"\n       restart: always\n       environment: (...)\n  </code>\n</pre>\n\n<p>???\nEnvironment est\xe1 cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la p\xe1gina oficial</p>\n\n<hr />\n\n<h1 id="q-a-parcial">Q &amp; A Parcial</h1>\n\n<hr />\n\n<h2 id="docker-registry">Docker Registry</h2>\n\n<ul>\n<li>Es una libreria de imagenes.</li>\n<li>Puede ser publico o privado.</li>\n<li>Una vez construida la imagen, hacemos un push al registry</li>\n<li>Docker hub es un registry publico oficial</li>\n<li>Hay una imagen publica registry y una para el trusted registry\n<center>\n<img src="/assets/docker-89504.png" width="240px"></img>\n</center>\n???\nTrusted registry es con soporte comercial</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volumes">Data volumes</h2>\n\n<ul>\n<li>Encontrar\n<code>bash\n$ docker inspect myContainer\n</code></li>\n<li>Se pueden crear vol\xfamenes o montar desde el host\n<code>bash\n$ docker run -d -P --name web -v /webapp myImage npm start\n$ docker run -d -P --name web -v /src:/webapp myImage npm start\n</code>\n???</li>\n<li>bypass a unionfs</li>\n<li>si no esta bindeado a host, copia el contenido adentro</li>\n<li>permite compartir entre containers con compose o con named volumes (flocker por ejemplo)</li>\n<li>esta dise\xf1ado para cambiar el container y que la data persista, incluso aunque ningun container la referencie</li>\n<li>soporta SCSI, NFS, etc.</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volume-containers">Data volume containers</h2>\n\n<ul>\n<li><em><a href="/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/">Es una pr\xe1ctica</a></em> que consiste en crear un contenedor que s\xf3lo contiene data que luego ser\xe1 utilizada por otros contenedores\n<code>bash\n$ docker create -v /dbdata --name mydb postgres /bin/true\n$ docker run -d --volumes-from mydb --name db1 postgres\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="network">Network</h2>\n\n<ul>\n<li>Puede ser bridge, none  y host\n<code>bash\n$ docker network ls\n</code></li>\n<li>Pueden verse los detalles\n<code>bash\n$ docker network inspect bridge\n</code></li>\n<li>Se pueden crear nuestras redes en las cuales correr containers\n???</li>\n<li>un container puede pertenecer a varias redes</li>\n<li>se ven entre los de la misma red</li>\n<li>puede ser overlay (swarm mode) o custom driver</li>\n<li>embedded dns en custom networks</li>\n<li>antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-aplicado">Docker Aplicado</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-28b55.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</h2>\n\n<ul>\n<li><p>Run, Start, Stop</p>\n\n<pre><code class="language-bash"># crea un contenedor en base a una imagen y corre el comando bash\n$ docker run --name miContenedor alpine echo &quot;Hola&quot;\n# arrancar un contenedor ya creado\n$ docker start miContenedor\n# parar contenedor con time to kill\n$ docker stop -t 10 miContenedor\n# also valid: docker restart -t 10 miContenedor\n</code></pre></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Listar, Inspeccionar\n<code>bash\n$ docker rm miContenedor\n$ docker ps\n$ docker ps --all\n$ docker inspect miContenedor\n</code></li>\n</ul>\n\n<p>???\n* hablar de se\xf1ales y su relacion con stop</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</h2>\n\n<ul>\n<li>Cargar, Listar, Inspeccionar\n<code>bash\n$ docker pull repo/image:tag\n$ docker load -i imagen.tar\n$ docker images\n$ docker inspect alpine\n</code></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Construir, Taggear, Subir\n<code>bash\n$ docker rmi repo/image:tag\n$ docker build -t image-name .\n$ docker tag image-name repo/image-name:tag\n$ docker push repo/image-name:tag\n</code></li>\n</ul>\n\n<p>???\n* es necesario un docker login myrepo:2376</p>\n\n<hr />\n\n<h2 id="ejemplo-existente">Ejemplo existente</h2>\n\n<pre><code class="language-bash">$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc\n</code></pre>\n\n<p><center>\n  <img src="/assets/vncffox.png" width="200px"></img>\n</center></p>\n\n<p>???\nLuego con un cliente vnc accedemos a un lxde con firefox instalado</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-08dc8.png" width="45px"></img>\n</div></p>\n\n<h2 id="nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</h2>\n\n<ol>\n<li>Se inicia un shell sobre una imagen base\n<code>bash\n$ docker run -it --name testC ubuntu sh\n</code></li>\n<li>Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile</li>\n</ol>\n\n<p>???\n- tar\n- scratch image (reserved word)\n- <em>history</em> de image\n- <em>commit</em> del container como no recomendada mas que para pruebas y debugging</p>\n\n<hr />\n\n<h2 id="debug">Debug</h2>\n\n<p>a. Entramos a un contenedor corriendo</p>\n\n<pre><code class="language-bash"># otra alternativa, tomar una\n$ docker exec -it nignxTest /bin/bash\n</code></pre>\n\n<p>b. Miramos los logs conectados</p>\n\n<pre><code class="language-bash">docker logs nginxTest\n</code></pre>\n\n<hr />\n\n<h2 id="buenas-pr\xe1cticas">Buenas pr\xe1cticas</h2>\n\n<ul>\n<li>Containers lo m\xe1s prescindibles posibles</li>\n<li>Usar .dockerignore</li>\n<li>Evitar instalar paquetes innecesarios</li>\n<li>Correr un s\xf3lo proceso por container</li>\n<li>Minimizar la cantidad de capas</li>\n<li>Organizar argumentos y comandos de multiples lineas con <br /></li>\n<li>Contemplar el build cache\n<center>\n<img src="/assets/docker-d0772.png" width="50%"></img>\n</center></li>\n</ul>\n\n<p>???\n* prescindible = efimero = pueden ser parados, destruidos y reemplazados\n* usar cache o no\n* el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente\n* una vez invalidado, ya no se utiliza para las subsecuentes capas</p>\n\n<hr />\n\n<h2 id="ejemplos-docker-para-web">Ejemplos docker para web</h2>\n\n<hr />\n\n<h2 id="spa-build">SPA build</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nADD . /src\nWORKDIR /src\nRUN rm -fR ./node_modules &amp;&amp; \\\n  npm i\nENTRYPOINT [&quot;npm&quot;, &quot;build&quot;]\n</code></pre>\n\n<p>???\nHay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el \xb4shell\xb4 form que hace &ldquo;/bin/sh -c&rdquo; lo que oculta se\xf1ales por ejemplo docker stop)\n&ndash;entrypoint overrides\n* tiene que haber al menos un cmd o entrypoint\n* entrypoint para ejecutables\n* cmd es mas para preparar parametros</p>\n\n<hr />\n\n<h2 id="spa-serve">SPA serve</h2>\n\n<pre><code class="language-Dockerfile">version: \'2\'\nservices:\n  spa:\n    image: nginx\n    volumes:\n      - &quot;.:/usr/share/nginx/html:ro&quot;\n    ports:\n      - &quot;10000:80&quot;\n</code></pre>\n\n<hr />\n\n<h2 id="api">API</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nEXPOSE 3000\nADD . /src\nWORKDIR /src\nRUN npm rebuild &amp;&amp; \\\n  npm test\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre>\n\n<p>???\nHay muchas alternativas, hay una tarea de dise\xf1o impl\xedcita</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-32d4f.png" width="50px"></img>\n</div>\n##&nbsp; Compose</p>\n\n<pre><code class="language-Dockerfile"># docker-compose.yml just for api\nversion: \'2\'\nservices:\n  api:\n    image: mirepo.com/api-image:production\n    ports:\n      - &quot;3000:3000&quot;\n    depends_on:\n      - mongo\n    environment:\n      PORT: 3000\n  mongo:\n    image: mongo\n    ports:\n      - &quot;27017:27017&quot;\n    volumes:\n      - ./mongodata:/data/db\n</code></pre>\n\n<p>???</p>\n\n<h2 id="links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</h2>\n\n<h2 id="comandos-para-compose">Comandos para compose</h2>\n\n<ul>\n<li>Correr, Parar, Borrar\n<code>bash\n$ docker-compose up -d\n$ docker-compose stop -t 10\n$ docker-compose rm\n$ docker-compose --help\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="anexo-docker-services">Anexo: Docker services</h2>\n\n<p>Es una abstracci\xf3n de los contenedores.\n* Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien\n* Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos\n* Para el cliente, el servicio luce como un docker daemon regular\n* Los servicios son los que brindan escalabilidad y flexibilidad de updates\n???\nswarm = el plural de docker nodes&hellip; manada/multitud/enjambre/nube\n* temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc</p>\n\n<hr />\n\n<h2 id="operaciones-con-services">Operaciones con services</h2>\n\n<pre><code class="language-bash">$ docker service create \\\n  --name my-service \\\n  --replicas 3 \\\n  nginx:alpine\n\n$ docker-compose scale service-name=2\n</code></pre>\n\n<p>???\n* services global/replicated</p>\n\n<hr />\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1>\n',Summary:"Introduccion a docker Por nicosommi name: agenda Agenda Agenda y alcance Fundamentos Casos de uso Por dentro Componentes Ejemplo sencillo Q &amp; A Mas componentes Comandos sobre contenedores e im\xe1genes Ejemplo lateral T\xe9cnica para construir un Dockerfile Buenas pr\xe1cticas Docker para SPA, web apps, etc Anexo: Services Q &amp; A class: center Que es? ??? Disculpen el teclado en ingles T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#introduccion-a-docker">Introduccion a docker</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#que-es">Que es?</a></li>\n<li><a href="#es-una-maquina-virtual-no">Es una maquina virtual? No.</a></li>\n<li><a href="#como-se-diferencia-de-una">Como se diferencia de una?</a></li>\n<li><a href="#en-donde-corre">En donde corre?</a></li>\n<li><a href="#nbsp-para-que-sirve">&nbsp;Para que sirve?</a></li>\n<li><a href="#nbsp-datos">&nbsp;Datos</a></li>\n<li><a href="#casos-de-uso">Casos de uso</a></li>\n<li><a href="#por-dentro">Por dentro</a></li>\n<li><a href="#nbsp-docker-image">&nbsp;Docker Image</a></li>\n<li><a href="#docker-container">Docker Container</a></li>\n<li><a href="#acerca-del-contenedor">Acerca del Contenedor</a></li>\n<li><a href="#nbsp-storage">&nbsp;Storage</a></li>\n<li><a href="#componentes">Componentes</a></li>\n<li><a href="#docker-engine">Docker Engine</a></li>\n<li><a href="#machine">Machine</a></li>\n<li><a href="#compose">Compose</a></li>\n<li><a href="#nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</a></li>\n<li><a href="#wordpress">Wordpress</a></li>\n</ul></li>\n<li><a href="#q-a-parcial">Q &amp; A Parcial</a>\n<ul>\n<li><a href="#docker-registry">Docker Registry</a></li>\n<li><a href="#data-volumes">Data volumes</a></li>\n<li><a href="#data-volume-containers">Data volume containers</a></li>\n<li><a href="#network">Network</a></li>\n<li><a href="#docker-aplicado">Docker Aplicado</a></li>\n<li><a href="#nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</a></li>\n<li><a href="#nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</a></li>\n<li><a href="#ejemplo-existente">Ejemplo existente</a></li>\n<li><a href="#nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</a></li>\n<li><a href="#debug">Debug</a></li>\n<li><a href="#buenas-pr\xe1cticas">Buenas pr\xe1cticas</a></li>\n<li><a href="#ejemplos-docker-para-web">Ejemplos docker para web</a></li>\n<li><a href="#spa-build">SPA build</a></li>\n<li><a href="#spa-serve">SPA serve</a></li>\n<li><a href="#api">API</a></li>\n<li><a href="#links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</a></li>\n<li><a href="#comandos-para-compose">Comandos para compose</a></li>\n<li><a href="#anexo-docker-services">Anexo: Docker services</a></li>\n<li><a href="#operaciones-con-services">Operaciones con services</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1863,FuzzyWordCount:1900,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="proxies-en-es6">Proxies en ES6</h1>\n\n<hr />\n\n<h2 id="agenda">Agenda</h2>\n\n<p><small>\n  Terminolog\xeda<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n</small></p>\n\n<hr />\n\n<h2 id="terminolog\xeda">Terminolog\xeda</h2>\n\n<hr />\n\n<p>\xbfQue es un proxy?<br />\nOrigen: <em>prokecye</em><br />\n  &ldquo;agency of one who acts instead of another&rdquo;<br />\nEn espa\xf1ol significa <em>apoderado</em><br />\n  <em>adj.</em> Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre</p>\n\n<p>???\nEjemplo, firmar un poder para hacer un tr\xe1mite</p>\n\n<hr />\n\n<p>\xbfQue es un protocolo?<br />\nUn <em>protocolo</em> es un conjunto de normas. Esto podria verse como un conjunto interfaces con reglas para usarlas, y ECMAScript define un protocolo para manejar objetos. Este protocolo opera a nivel Meta.</p>\n\n<p>???\nLa definici\xf3n no es la misma que suele utilizarse de protocolos para interfaces de otros lenguajes porque tambi\xe9n incluye reglas.</p>\n\n<hr />\n\n<p><em>Metaprogramming</em><br />\nEn la programaci\xf3n hay niveles base y meta. El nivel base procesa el input del usuario, mientras que el meta procesa al base.</p>\n\n<p>???\nPueden incluso ser dos lenguajes distintos.\nEn es como los closures, los usamos sin saber.\nHay unos que usamos constantemente: Object.*</p>\n\n<hr />\n\n<p><em>Meta Object Protocol</em>  es como se lo llama al protocolo de manejo de objetos de ECMAScript. Como particularidad, son internos (no son accesibles desde JS). Los engines pueden usarlos o no.</p>\n\n<hr />\n\n<ul>\n<li>Los metodos de un objeto del MOP llaman operaciones del engine, algunas que llaman a otras como [[Get]], que se llaman <em>operaciones derivadas</em> y las que son independientes, que se llaman <em>operaciones fundamentales</em>.<br /></li>\n</ul>\n\n<p>???\nEjemplo [[Get]] usa getOwnProperty, getPrototypeOf y Call</p>\n\n<hr />\n\n<p><em>Tipos de metaprogramming</em><br />\n- Introspection: permite s\xf3lo leer la estructura\n- Self-modification: permite modificar la estructura\n- Intercession: redefine la semantica de algunas operaciones</p>\n\n<p>???\nEjemplos Object.keys, moveProperty, proxy respectivamente</p>\n\n<hr />\n\n<p><em>Elementos del proxy</em><br />\n- target: es el fallback del handler, el representado\n[[ProxyTarget]]\n- handler: es quien, en caso de definir el m\xe9todo indicado, intercepta la llamada, el representante\n[[ProxyHandler]]\n- proxy: el que compone ambos y delega a uno u otro</p>\n\n<pre><code>const proxy = new Proxy(target, handler); // OK\nvar p = Proxy(target, handler); // TypeError: calling a builtin Proxy constructor without new is forbidden\n</code></pre>\n\n<p>???\nEl m\xe9todo del handler se llama trap.<br />\nEs decir que el proxy &ldquo;wrappea&rdquo; al target.</p>\n\n<hr />\n\n<pre><code>class MyHandler {\n  get(target, key, receiver) {\n    return Reflect[key];\n  }\n}\n</code></pre>\n\n<p>???\nReflect no se puede instanciar, tiene los mismos metodos que el handler, es como Math, todo estatico\nPor ejemplo Reflect.apply es menos verboso que Function.prototype.apply\nAlgunas veces nos da informaci\xf3n adicional como Reflect.set -&gt; [boolean]</p>\n\n<hr />\n\n<p><em>\xbfQue operaciones pueden ser interceptadas?</em><br />\nEsto es selectivo, no se puede interceptar todo o solo las fundamentales como podria suponerse.<br />\nEsto es por dos razones\n- porque una operacion estable corre el riesgo de que un proxy la haga inestable\n- porque tener mucho codigo custom intercalado haria el programa muy dificil de entender y debuggear</p>\n\n<p>???\nejemplo el === que no puede ser trapeada.\nEstable: sin side effects, que produce siempre el mismo resultado ante los mismos argumentos<br />\nSe podr\xeda pensar como que con interceptar s\xf3lo operaciones fundamentales, pero esto no es tan \xfatil ya que no inlcuir\xeda get por ejemplo.\nVer codigo de api client.</p>\n\n<hr />\n\n<p><em>Prototype chain</em><br />\nLos engines en su comportamiento habitual, al subir por el chain, van a disparar las traps que encuentren.<br />\nSin embargo, hay ciertas operaciones que suben por el prototype chain si no encuentran la property en el handler como get, set y has, las demas no alteran el prototype chain.</p>\n\n<p>???\nVer codigo y test de ghost.\nInstanceof &ldquo;lies&rdquo;</p>\n\n<hr />\n\n<p><em>B\xe1sicas</em></p>\n\n<pre><code>defineProperty(target, propKey, propDesc) // \u2192 boolean  (fundamental)\n  // trigger: Object.defineProperty(proxy, propKey, propDesc)\ndeleteProperty(target, propKey) // \u2192 boolean  (fundamental)\n  // trigger: delete proxy[propKey], delete proxy.foo\nget(target, propKey, receiver) // \u2192 any\n  // trigger: receiver[propKey]\n  // trigger: receiver.foo\n</code></pre>\n\n<hr />\n\n<p><em>Casos de uso</em>\n  * API Client\n  * Tracing / Logging\n  * Trap undefined property access\n  * Type check</p>\n\n<p>???\n  Se\xf1alar el tracing puede implementarse cambiando el objeto.\n  Type check example: properties que son &ldquo;fieles&rdquo; a su tipo incial.\n  Ir viendo ejemplos de api client, logging y lock</p>\n\n<hr />\n\n<p><em>Preguntas</em></p>\n\n<hr />\n\n<p><em>Practica 1</em><br />\nHacer &ldquo;trap undefined&rdquo;<br />\n&ldquo;Objeto que tira excepcion cuando se accede a una propiedad undefined&rdquo;\n(30 minutos)</p>\n\n<p>???\nDebe tirar un ReferenceError si no esta. Debe devolver el valor si esta.\nProbar nested with lock.</p>\n\n<hr />\n\n<p><em>Compatibilidad</em>\n* Solo FF, CH, Edge, Opera, Safari 10, Node 6</p>\n\n<p>???\nNo hay polyfill.</p>\n\n<hr />\n\n<p><em>Tipos de proxy</em>\n* Wrappers (solo control) o Virtual Objects (agregan comporamiento)</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Propiedades del proxy</em>\n* Transparencia virtual: no podemos saber si un objeto es un proxy\n* Encapsulamiento: no podemos acceder al handler desde el proxy</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Mas casos de uso</em>\n* DOM\n* Indices negativos de array\n* Data binding (polemico)\n* Profiling\n* RMI</p>\n\n<p>Note:\nDOM: usualmente est\xe1 implementado entre C++ y JS, y el context switch es costoso, lo que nos lleva a querer hacer el dom en js puro, pero hay cosas que no son tan simples de implementar, y ello fue una importante razon para hacer los proxies en JS (dom mas eficiente) y ademas que nos permite emular el browser (jsdom).</p>\n\n<p>Indices negativos como en algunos lenguajes.\nMencionar Object.observe (ES7) creado para binding por la pobre performance de los proxy, aunque abandonado por react.\nObject.observe no es necesario con la inmutabilidad, tratar browser como remote rendering, no storage y query\n(undo, state). Se dice que es lo que queremos, no lo que necesitamos (Stateful dom).\nProfiling para medir tiempo.\nRMI permite por ejemplo db access directo.</p>\n\n<hr />\n\n<p><em>Invariants</em><br />\nSi el target es no extensible y no configurable, lo invariante es forzado por el engine.</p>\n\n<p>???\nno extensible protege objetos, non configurability protege properties.\nCon los proxy se podr\xeda violar la invariabilidad, pero el engine lo prohibe chequeando los parametros y los resultados de los handlers, preventExtension, true y luego false, e igual para isExtensible y getOwnPropertyDescriptor</p>\n\n<hr />\n\n<p><em>Practica 2</em><br />\nMejorar api client<br />\n(30 minutos)</p>\n\n<p>???\nelegir algunos de los TODO</p>\n\n<hr />\n\n<p><em>Avanzadas 1</em></p>\n\n<pre><code>getOwnPropertyDescriptor(target, propKey) // \u2192 PropDesc|Undefined  (fundamental)  \n  // tby: Object.getOwnPropertyDescriptor(proxy, propKey)  \ngetPrototypeOf(target) // \u2192 Object|Null  (fundamental)  \n  // tby: Object.getPrototypeOf(proxy)  \nhas(target, propKey) // \u2192 boolean  \n  // tby: propKey in proxy\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 2</em></p>\n\n<pre><code>isExtensible(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.isExtensible(proxy)  \nownKeys(target) // \u2192 Array&lt;PropertyKey&gt;  (fundamental)  \n  // tby: Object.getOwnPropertyPropertyNames(proxy) (only uses string-valued keys)  \n  // tby: Object.getOwnPropertyPropertySymbols(proxy) (only uses symbol-valued keys)  \n  // tby: Object.keys(proxy) (only uses enumerable string-valued keys;\n  // enumerability is checked via Object.getOwnPropertyDescriptor)\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 3</em></p>\n\n<pre><code>preventExtensions(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.preventExtensions(proxy)  \nset(target, propKey, value, receiver) // \u2192 boolean  \n  // tby: receiver[propKey] = value  \n  // tby: receiver.foo = value // propKey = \'foo\'  \nsetPrototypeOf(target, proto) // \u2192 boolean  (fundamental)  \n  // tby: Object.setPrototypeOf(proxy, proto)\n</code></pre>\n\n<hr />\n\n<p><em>Para funciones</em></p>\n\n<pre><code>apply(target, thisArgument, argumentsList) // \u2192 any  \n  // tby: proxy.apply(thisArgument, argumentsList) (fundamental)  \n  // tby: proxy.call(thisArgument, ...argumentsList)  \n  // tby: proxy(...argumentsList)  \nconstruct(target, argumentsList) // \u2192 Object  \n  // tby: new proxy(..argumentsList)\n</code></pre>\n\n<hr />\n\n<p><em>Conclusion</em><br />\n* Performance\n* Debug\n* Casos de uso\n* Complejidad\n* Compatibilidad</p>\n\n<p>Note:\nPerformance: Conviene medir la performance en cada caso, evaluar que tan critica es la performance en nuestra app y tomar una decision.\nA mas c\xf3digo interceptado, menor performance, mayor dificultad de entender el codigo y de debug.\nRiesgo: podemos &ldquo;romper&rdquo; comportamientos, hacerlo inconsistente\nCasos de uso:</p>\n\n<hr />\n\n<p><em>Preguntas / Discusion / Ideas</em></p>\n\n<hr />\n\n<p>Gracias!</p>\n',Summary:"Proxies en ES6 Agenda Terminolog\xeda Desarrollo Casos de uso Ejercitaci\xf3n Desarrollo Casos de uso Ejercitaci\xf3n Terminolog\xeda \xbfQue es un proxy? Origen: prokecye &ldquo;agency of one who acts instead of another&rdquo; En espa\xf1ol significa apoderado adj. Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre ??? Ejemplo, firmar un poder para hacer un tr\xe1mite \xbfQue es un protocolo? Un protocolo es un conjunto de normas.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#proxies-en-es6">Proxies en ES6</a>\n<ul>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#terminolog\xeda">Terminolog\xeda</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1238,FuzzyWordCount:1300,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"proxies",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}]},Pages:[{Params:{bundle:"default"},Content:"",Summary:"",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:0,FuzzyWordCount:100,ReadingTime:0,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"test",Description:"",Keywords:[],Date:"2017-07-06T20:36:09-03:00",Lastmod:"2017-07-06T20:36:09-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<p><em>Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size</em></p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository.</p>\n\n<p>A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.</p>\n\n<p>Let&rsquo;s start with this.</p>\n\n<h3 id="first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</h3>\n\n<p>Easy, go to <a href="https://www.docker.com/community-edition#/download">https://www.docker.com/community-edition#/download</a>\nChoose your platform AND, because we need multi stage builds and its still on the <em>edge channel</em> we need to choose that instead of the stable channel. Download, install.</p>\n\n<h3 id="second-step-building-a-spa">Second step: Building a SPA</h3>\n\n<p>A single page application is just a static web page that can be served through any traditional web server.</p>\n\n<p>For this example, let&rsquo;s pick a boilerplate SPA like create-react-app.</p>\n\n<pre><code class="language-shell">npm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\nnpm start # if you want to test it and check the browser for it\n</code></pre>\n\n<h3 id="third-step-create-a-dockerfile">Third step: create a Dockerfile</h3>\n\n<p>All right now the important thing, let&rsquo;s take a look at a candidate Dockerfile</p>\n\n<pre><code class="language-docker"># buildtime\nFROM node AS nodebase\nLABEL maintainer &quot;nicosommi@gmail.com&quot;\n\nADD . /usr/src/app\nWORKDIR /usr/src/app\nRUN npm i &amp;&amp; npm run build\n\n# runtime\nFROM nginx:alpine\nCOPY --from=nodebase /usr/src/app/build /usr/share/nginx/html\n</code></pre>\n\n<p>So let&rsquo;s see.</p>\n\n<p>We start with a node:latest image, no problem with the image size because now we have multi stage builds.</p>\n\n<p>The LABEL maintainer, that&rsquo;s recent too, no more MAINTAINER special instruction, now it&rsquo;s a label.</p>\n\n<p>We add the current directory to the appropiate location and set the working directory to it.</p>\n\n<p>Install, build&hellip; and that&rsquo;s all that we need to generate our artifacts in our build folder.</p>\n\n<p>So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.</p>\n\n<p>Done!</p>\n\n<h3 id="fourth-step-build-and-run">Fourth step: build and run!</h3>\n\n<p>So now, let&rsquo;s build the image\n<code>docker build -t my-app .</code></p>\n\n<p>And now let&rsquo;s look it&rsquo;s size\n<code>docker images</code></p>\n\n<p>All right! less than 16 MB! With the whole thing, linux, nginx and our app!</p>\n\n<p>That&rsquo;s great. Just the node_modules folder size after installation is around 130 MB&hellip; so this is a BIG win.</p>\n\n<p>Let&rsquo;s try it<br />\n<code>docker run -d --rm -p 8000:80 --name my-app my-app</code></p>\n\n<p>Open chrome in localhost:8000 and enjoy.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Multi stage builds are great, it let&rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.</p>\n\n<p>By making this clear distinction between different stages, docker let&rsquo;s you think in a more organized way about the Dockerfile.</p>\n\n<p>With multi stage builds the LAST stage is the one that is used on your final image. Don&rsquo;t forget that. <em>For example, the ONBUILD instruction on a previous stage wont have any effect</em> because it will be overwritten with the last stage of the Dockerfile.</p>\n\n<p>As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&rsquo;s really big very quickly.</p>\n\n<p>nicosommi</p>\n',Summary:"Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size Introduction With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository. A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#introduction">Introduction</a>\n<ul>\n<li><a href="#first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</a></li>\n<li><a href="#second-step-building-a-spa">Second step: Building a SPA</a></li>\n<li><a href="#third-step-create-a-dockerfile">Third step: create a Dockerfile</a></li>\n<li><a href="#fourth-step-build-and-run">Fourth step: build and run!</a></li>\n</ul></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:526,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Weekend experiment: a node.js SPA with multi stage builds from docker",Description:"",Keywords:[],Date:"2017-04-29T06:34:58-03:00",Lastmod:"2017-04-29T06:34:58-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/2017-03-25-13-39-09.png" width="400px"></img></p>\n\n<h1 id="docker-secrets">Docker secrets</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda e introducci\xf3n</li>\n<li>Como surgen?</li>\n<li>\xbfQu\xe9 son los secrets?</li>\n<li>\xbfPara que sirven?</li>\n<li>Anotaciones de seguridad</li>\n<li>Detalles de utilizaci\xf3n</li>\n<li>Preparando nuestras im\xe1genes</li>\n<li>Creando un secreto sencillo</li>\n<li>Utilizando secrets con YML&rsquo;s de docker compose</li>\n<li>Usando https con secrets</li>\n<li>Resumen de comandos</li>\n<li>Q &amp; A</li>\n<li>Fin</li>\n</ol>\n\n<hr />\n\n<h2 id="como-surgen">\xbfComo surgen?</h2>\n\n<p>Porque la comunidad toma decisiones heterogeneas y peligrosas:\n- Usar variables de entorno (12 factor app)\n- Variables de entorno en build\n- Manual build (commit)\n- Custom hacks (curl a webserver)\n&hellip; Se necesitan do&rsquo;s and don&rsquo;ts</p>\n\n<p>???\n- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados</p>\n\n<h2 id="hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</h2>\n\n<h2 id="qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</h2>\n\n<p>Para docker es un BLOB de datos manejado de manera centralizada.\n- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan\n- Solo para swarm&hellip; por ahora\n- Hasta 500KB (no TAN large)\n- Por ahora solo para runtime\n<center>\n  <img src="/slide/assets/2017-03-22-21-47-13.png" width="800px"></img>\n</center></p>\n\n<p>???\nBinary Large OBjects\nSecure Sockets Layer (ahora Transport Layer Security)\nSwarmKit es una libreria que se encarga del node management</p>\n\n<h2 id="hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</h2>\n\n<h2 id="para-que-sirven">\xbfPara que sirven?</h2>\n\n<ul>\n<li>Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos&hellip; y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones</li>\n<li>Funciona como capa de abstraccion entre las credenciales y los contenedores</li>\n</ul>\n\n<p>???\n- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido</p>\n\n<hr />\n\n<h2 id="anotaciones-de-seguridad">Anotaciones de seguridad</h2>\n\n<ul>\n<li>Viajan a los managers del swarm por TLS</li>\n<li>Se almacenan en el Raft log, con todo lo que ello nos garantiza (que est\xe1 encriptado y es replicado a trav\xe9s de los managers, garantizando la misma HA que el resto de la informacion del swarm)</li>\n<li>Cuando se detiene un container, se hace unmount y se flushea la memoria</li>\n<li>Si se pierde conexi\xf3n con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucci\xf3n hasta que se vuelva a conectar al swarm<br />\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li>\n</ul>\n\n<p>???\n* Esta encriptado desde la 1.13\n* El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm\n* El &ldquo;Raft log&rdquo; se refiere al consensus algorithm que utiliza swarmkit <em>entre managers</em> para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue dise\xf1ado para ser simple de entender y que m\xe1s sistemas utilizen un buen algoritmo de consenso para ser m\xe1s tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y l\xedderes.\n* Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un l\xedder es elegido. Despu\xe9s hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a>\nTienen un log y una maquina de estados.\nSi una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, tambi\xe9n relegando su liderazgo.</p>\n\n<hr />\n\n<h2 id="detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</h2>\n\n<ul>\n<li>Se montan en /run/secrets/name</li>\n<li>Solo tiene acceso si es un manager o si tiene permisos espec\xedficos</li>\n<li>Se pueden ver, listar los secrets, pero no se puede borrar uno que est\xe1 siendo utilizado, para ello se debe rotar el secret</li>\n<li>Se recomienda poner en el nombre una fecha o numero de version, para hacer m\xe1s sencillo el control</li>\n</ul>\n\n<p>???\n- &ndash;secret source=mysql_password,target=wp_db_password,mode=0400</p>\n\n<hr />\n\n<h2 id="preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</h2>\n\n<ul>\n<li>Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE adem\xe1s de MYSQL_PASSWORD)</li>\n</ul>\n\n<hr />\n\n<h2 id="creando-un-secreto-sencillo">Creando un secreto sencillo</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ openssl rand -base64 20 | docker secret create mi_secreto -\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets\n$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto\n</code></pre>\n\n<p>???\nSi commiteamos el container a una imagen, el secreto es desmontado</p>\n\n<h2 id="si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</h2>\n\n<h2 id="utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</h2>\n\n<pre><code class="language-yaml">version: \'3.1\'\nservices:\n    test:\n        image: \'alpine\'\n        command: \'cat /run/secrets/my_secret\'\n        secrets: \n            - my_secret\nsecrets:\n    my_secret:\n        file: ./mysecret.txt\n        # o external: true para tomarlo del swarm\n</code></pre>\n\n<p>???\nGracias al stack del compose</p>\n\n<h2 id="docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</h2>\n\n<h2 id="usando-https-con-secrets">Usando https con secrets</h2>\n\n<ol>\n<li>Generar certificado con let&rsquo;s encrypt, self-signed u otra CA</li>\n<li>Preparar nginx config</li>\n<li>Preparar secrets en el swarm\n<code>shell\n$ docker secret create site.key site.key\n$ docker secret create site.crt site.crt\n$ docker secret create site.conf site.conf\n</code></li>\n\n<li><p>Crear el servicio</p>\n\n<pre><code class="language-shell">$ docker service create --name nginx --secret site.key \\\n --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \\\n sh -c &quot;ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf &amp;&amp; exec nginx -g \'daemon off;\'&quot;\n</code></pre>\n\n<p>???</p>\n\n<h2 id="daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</h2>\n\n<h2 id="resumen-de-comandos">Resumen de comandos</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ echo &quot;a&quot; | docker secret create mi_secreto -\n$ docker secret inspect mi_secreto\n$ docker secret ls\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker service update mi_servicio --secret-rm mi_secreto\n$ docker service update mi_servicio --secret-add mi_nuevo_secreto\n$ docker secret rm mi_secreto\n</code></pre>\n\n<p>???</p>\n\n<h2 id="aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</h2>\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1></li>\n</ol>\n',Summary:"Docker secrets Por nicosommi name: agenda Agenda Agenda e introducci\xf3n Como surgen? \xbfQu\xe9 son los secrets? \xbfPara que sirven? Anotaciones de seguridad Detalles de utilizaci\xf3n Preparando nuestras im\xe1genes Creando un secreto sencillo Utilizando secrets con YML&rsquo;s de docker compose Usando https con secrets Resumen de comandos Q &amp; A Fin \xbfComo surgen? Porque la comunidad toma decisiones heterogeneas y peligrosas: - Usar variables de entorno (12 factor app) - Variables de entorno en build - Manual build (commit) - Custom hacks (curl a webserver) &hellip; Se necesitan do&rsquo;s and don&rsquo;ts ???",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#docker-secrets">Docker secrets</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#como-surgen">\xbfComo surgen?</a></li>\n<li><a href="#hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</a></li>\n<li><a href="#qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</a></li>\n<li><a href="#hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</a></li>\n<li><a href="#para-que-sirven">\xbfPara que sirven?</a></li>\n<li><a href="#anotaciones-de-seguridad">Anotaciones de seguridad</a></li>\n<li><a href="#detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</a></li>\n<li><a href="#preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</a></li>\n<li><a href="#creando-un-secreto-sencillo">Creando un secreto sencillo</a></li>\n<li><a href="#si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</a></li>\n<li><a href="#utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</a></li>\n<li><a href="#docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</a></li>\n<li><a href="#usando-https-con-secrets">Usando https con secrets</a></li>\n<li><a href="#daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</a></li>\n<li><a href="#resumen-de-comandos">Resumen de comandos</a></li>\n<li><a href="#aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:990,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker secrets",Description:"",Keywords:[],Date:"2017-03-29T15:38:10-03:00",Lastmod:"2017-03-29T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="scripts">Scripts</h1>\n\n<h2 id="problema">Problema</h2>\n\n<p>Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.\nUno de estos problemas, una vez elegidos los paquetes, es armar una serie de scripts que nos brinden todas las tareas que necesitamos.\nEnumerando, en escenarios tipicos necesitamos minimamente:\n- test\n- test watch\n- test con reporte de coverage completo\n- test watch con un reporte de coverage completo\n- start con live reload\n- start\n- lint\n- build (transpilacion, webpack, etc)\n- &hellip;etc&hellip; (chequeo de dependencias, )</p>\n\n<p>De proyecto en proyecto, cambiando clientes, equipos, lenguajes, estandares, y otras cosas, cambian las estructuras del proyecto, la ubicacion de los archivos, los frameworks, las costumbres, y muchas otras cosas mas.\nSin embargo, estos scripts, aunque cambian ligeramente, siempre estan, y si no estan, estaria bien que estuviesen, lo cual es un punto muy importante, ya que algunas veces esto nos lleva a tener menos &ldquo;comodidades&rdquo; para producir codigo de calidad.\nEste problema es el que vengo enfrentando una vez tras otra, y ya he probado varias alternativas:</p>\n\n<h2 id="intento-1-grunt-gulp">Intento 1: grunt/gulp</h2>\n\n<p>Grunt y gulp, para un recien iniciado, significa produccion rapida. Son sencillos de aprender y nos permiten realizar cosas relativamente complejas con dependencias entre tareas que ejecutan scripts.<br />\nSin embargo, a mi personalmente no me gusta la dependencia que se genera con dichos frameworks que a mi criterio, resuelven las cosas de una manera que no es la optima.<br />\nUno termina sospechando que con npm y sus scripts deberia ser suficiente. Nos queda el sabor de que son sobre disenos para la mayoria de los casos.</p>\n\n<h2 id="intento-2-npm-suelto">Intento 2: npm suelto</h2>\n\n<p>Luego del intento anterior, y con el criterio de utilizar lo que es realmente necesario, uno intenta sacarle el maximo provecho a npm. Esto es realmente muy sencillo y funciona muy bien.\nSimplemente agregamos scripts y combinamos comandos o llamamos a otros scripts.\nEsto sin embargo tiene una dependencia implicita: el sistema operativo. Muchos comandos son particulares de UNIX y no funcionan en Windows.</p>\n\n<h2 id="intento-3-makefile">Intento 3: makefile</h2>\n\n<p>Es una alternativa interesante, muy util, mucho mas performante que un manejador de dependencias en javascript, y mas sencillo tambien, aunque suele asustar a mucha gente.<br />\nLo cierto es que resuelve el core de grunt/gulp y nos permite luego hacer lo que queramos.<br />\nEs una de las mejores a mi parecer, y si bien no muchos la eligen, he visto varios projectos con su Makefile.</p>\n\n<p>En este post quiero probar dos ideas que aun no he visto por alli:</p>\n\n<h2 id="idea-1-shelljs">Idea 1: shelljs</h2>\n\n<p>Esta idea consiste en llamar, desde npm, a scripts que son una secuencia de comandos en shelljs.\nShell.js para quienes no la conocen es una libreria con una implementacion de POSIX en javascript. Es decir que con esto podemos utilizar comandos que funcionaran tambien en windows.\nUna solucion sencilla y eficaz.\nVeamos como seria un proyecto sencillo.</p>\n\n<h2 id="idea-2-docker">Idea 2: docker</h2>\n\n<p>Esta vez, yendo un paso mas alla, cada comando de npm podria correr en un contenedor efimero que utilice siempre la misma plataforma, por ejemplo un alpine linux o un ubuntu.\nEsto tiene la ventaja de utilizar los comandos del shell que mas nos guste, y del sistema operativo de nuestra preferencia.\nLa implementacion sin embargo nos genera una dependencia: docker.\nPersonalmente creo que docker debe estar instalado en todas las computadoras, ya que es el futuro&hellip; (en realidad ya es el presente) por lo que para mis proyectos no lo considero un impedimento.\nAdemas de la dependencia, hay una minima complejidad en la implementacion: se requiere un conocimiento de docker.\nAunque para esto ultimo, he desarrollado un paquete.\nVeamos como seria un ejemplo sin dicho paquete:\nY ahora uno utilizando este paquete:</p>\n\n<h2 id="un-poco-de-mi-historia">Un poco de mi historia</h2>\n\n<p>Cuando arranque con node.js, alla por el 2012, npm fue una las primeras cosas con las que tuve contacto al poco tiempo.<br />\nEs el lugar donde convergen los paquetes de la comunidad. Tan fuerte era dicho lazo que pronto npm se introdujo en node y ahora forma parte del mismo paquete.\nCasi automaticamente, y un poco agnostico de npm, adopte soluciones parecidas a mis experiencias previas en java (maven y ant).</p>\n\n\x3c!--\n<resumen />\n- npm suelto\n- grunt/gulp\n- npm suelto\n- shelljs\n- docker\n--\x3e\n',Summary:"Scripts Problema Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#scripts">Scripts</a>\n<ul>\n<li><a href="#problema">Problema</a></li>\n<li><a href="#intento-1-grunt-gulp">Intento 1: grunt/gulp</a></li>\n<li><a href="#intento-2-npm-suelto">Intento 2: npm suelto</a></li>\n<li><a href="#intento-3-makefile">Intento 3: makefile</a></li>\n<li><a href="#idea-1-shelljs">Idea 1: shelljs</a></li>\n<li><a href="#idea-2-docker">Idea 2: docker</a></li>\n<li><a href="#un-poco-de-mi-historia">Un poco de mi historia</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:765,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"scripts",Description:"",Keywords:[],Date:"2017-01-27T18:54:15-03:00",Lastmod:"2017-01-27T18:54:15-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/docker-74de8.png" width="400px"></img></p>\n\n<h1 id="introduccion-a-docker">Introduccion a docker</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda y alcance</li>\n<li>Fundamentos</li>\n<li>Casos de uso</li>\n<li>Por dentro</li>\n<li>Componentes</li>\n<li>Ejemplo sencillo</li>\n<li>Q &amp; A</li>\n<li>Mas componentes</li>\n<li>Comandos sobre contenedores e im\xe1genes</li>\n<li>Ejemplo lateral</li>\n<li>T\xe9cnica para construir un Dockerfile</li>\n<li>Buenas pr\xe1cticas</li>\n<li>Docker para SPA, web apps, etc</li>\n<li>Anexo: Services</li>\n<li>Q &amp; A</li>\n</ol>\n\n<hr />\n\n<p>class: center</p>\n\n<h2 id="que-es">Que es?</h2>\n\n<p><center>\n  <img src="/assets/docker-89c82.png" width="400px"></img>\n</center></p>\n\n<p>???\nDisculpen el teclado en ingles</p>\n\n<hr />\n\n<ul>\n<li>T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.</li>\n<li>Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.</li>\n<li>UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios</li>\n<li>Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)\n<center>\n<img src="/assets/docker-28b55.png" width="300px"></img>\n</center></li>\n</ul>\n\n<hr />\n\n<p>class: right\n<img style="position: absolute" src="/assets/docker-04a7d.png" width="200px"></img></p>\n\n<h2 id="es-una-maquina-virtual-no">Es una maquina virtual? No.</h2>\n\n<h2 id="como-se-diferencia-de-una">Como se diferencia de una?</h2>\n\n<hr />\n\n<p>Se diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.\n<center>\n  <img src="/assets/history.png" width="600px"></img>\n</center>\n???\nComentar:\n* historia\n* primero escalabilidad horizontal\n* despues optimizar recursos\n* adicionales: docker swarm independiente\nNos permite cambiar la unidad de medida de nuestra aplicaci\xf3n de m\xe1quinas virtuales o f\xedsicas a simples containers.</p>\n\n<hr />\n\n<h2 id="en-donde-corre">En donde corre?</h2>\n\n<p>En sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).\nTambien, recientemente incorporaron contenedores basados en windows server.\n<center>\n  <img src="/assets/platforms.png" width="400px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-6a999.png" width="100px"></img>\n</div></p>\n\n<h2 id="nbsp-para-que-sirve">&nbsp;Para que sirve?</h2>\n\n<p>Para isolar el entorno de ejecuci\xf3n de una aplicaci\xf3n.</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/pencil.png" width="80px"></img>\n</div></p>\n\n<h2 id="nbsp-datos">&nbsp;Datos</h2>\n\n<ul>\n<li>Es open source desde el 2013.</li>\n<li>Esta escrito en go.</li>\n<li>Lo comenz\xf3 Solomon Hykes en dotCloud.</li>\n</ul>\n\n<p>???\nGo esta pensado para concurrencia y productividad y tiene garbage collection</p>\n\n<hr />\n\n<h2 id="casos-de-uso">Casos de uso</h2>\n\n<p><img src="/assets/usecases.png" width="90%"></img>\n???\nInvitar a sugerir ideas u opinar sobre las mencionadas\nTexto:\n* CI/CD\n* Entornos de desarrollo\n* Compilar para distintos targets\n* PaaS\n* Escalabilidad horizontal\n* High availability cluster\n* Aislar ejecucion de codigo de manera segura (webpackbin, etc)\n* Aprendizaje/investigacion\n* Etc&hellip;</p>\n\n<hr />\n\n<h2 id="por-dentro">Por dentro</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="140px"></img>\n</div></p>\n\n<h2 id="nbsp-docker-image">&nbsp;Docker Image</h2>\n\n<ul>\n<li>Es un template con instrucciones para la construccion de contenedores</li>\n<li>Tiene una o varias capas de solo lectura a partir del cual se crean contenedores</li>\n<li>Se pueden extender o empezar de cero</li>\n<li>Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile</li>\n<li>El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.</li>\n<li>Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-container">Docker Container</h2>\n\n<ul>\n<li>Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.</li>\n<li>Contiene una fina capa adicional a las de su imagen con permisos de escritura.</li>\n<li>Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.</li>\n<li>Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.\n<center>\n<img src="/assets/docker-bb91f.png" width="300px"></img>\n</center></li>\n</ul>\n\n<p>???\nPreguntar diferencia entre contenedor e imagen y clarificar dudas</p>\n\n<hr />\n\n<h2 id="acerca-del-contenedor">Acerca del Contenedor</h2>\n\n<p>Previamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).\n<center>\n  <img src="/assets/docker-71f58.png" width="240px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-1c5ae.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-storage">&nbsp;Storage</h2>\n\n<ul>\n<li>Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor</li>\n<li>Docker utiliza &lsquo;copy on write&rsquo;, es decir que copia una capa s\xf3lo cuando la va a cambiar, lo que permite optimizar el tama\xf1o en disco ocupado por la imagen y el tiempo de arranque de los contenedores.</li>\n<li>Toda la data de imagenes y contenedores se guarda en una carpeta.</li>\n<li>Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir seg\xfan caso de uso, experiencia del equipo y linux distro.</li>\n</ul>\n\n<hr />\n\n<h2 id="componentes">Componentes</h2>\n\n<hr />\n\n<h2 id="docker-engine">Docker Engine</h2>\n\n<p>Aplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.\n<img src="/assets/docker-9cf40.png" alt="Docker engine" /></p>\n\n<hr />\n\n<h2 id="machine">Machine</h2>\n\n<ul>\n<li>Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.</li>\n<li>Nos deja instalar docker en terminales remotas y provisionar swarms.\n<img src="/assets/docker-7ada0.png" width="95%"></img>\n???\nPermite especificar drivers para distintos providers</li>\n</ul>\n\n<hr />\n\n<h2 id="compose">Compose</h2>\n\n<p>Es una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.\n* Detecta cambios y recrea solo lo necesario\n* Soporta variables en el compose file\n* Guarda la data persistida en los volumes\n* Es muy util para entornos de desarrollo, para deployment en un solo host\n<center>\n  <img src="/assets/docker-32d4f.png" width="200px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/ubuntu.png" width="50px"></img>\n</div></p>\n\n<h2 id="nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</h2>\n\n<pre><code class="language-bash">$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash\nroot@3883936319fb:/# lsb_release -a\n(...) Description:\tUbuntu 14.04.5 LTS (...)\n</code></pre>\n\n<ol>\n<li>Trae la ultima imagen, o si ya existe la utiliza.</li>\n<li>Crea, en base a la imagen, un contenedor.</li>\n<li>Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.</li>\n<li>Asigna una interfaz de red con la cual habla con el host</li>\n<li>Setea una IP de una pool</li>\n<li>Ejecuta el proceso solicitado (/bin/bash)</li>\n<li>Captura y devuelve el output del contenedor por haber indicado -it</li>\n</ol>\n\n<p>???\ni es para el interactive mode, que deja el stdin esperando\nt asigna un pseudo tty / pty\n* pull\n* hablar de pull y de los otros parametros como name, port, volume</p>\n\n<hr />\n\n<h2 id="wordpress">Wordpress</h2>\n\n<pre>\n  <code class="bash hljs remark-code remark-code-line" style="font-size: 13px;">\n  version: \'2\'\n\n  services:\n     db:\n       image: mysql:5.7\n       volumes:\n         - "./.data/db:/var/lib/mysql"\n       restart: always\n       environment: (...)\n\n     wordpress:\n       depends_on:\n         - db\n       image: wordpress:latest\n       links:\n         - db\n       ports:\n         - "8000:80"\n       restart: always\n       environment: (...)\n  </code>\n</pre>\n\n<p>???\nEnvironment est\xe1 cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la p\xe1gina oficial</p>\n\n<hr />\n\n<h1 id="q-a-parcial">Q &amp; A Parcial</h1>\n\n<hr />\n\n<h2 id="docker-registry">Docker Registry</h2>\n\n<ul>\n<li>Es una libreria de imagenes.</li>\n<li>Puede ser publico o privado.</li>\n<li>Una vez construida la imagen, hacemos un push al registry</li>\n<li>Docker hub es un registry publico oficial</li>\n<li>Hay una imagen publica registry y una para el trusted registry\n<center>\n<img src="/assets/docker-89504.png" width="240px"></img>\n</center>\n???\nTrusted registry es con soporte comercial</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volumes">Data volumes</h2>\n\n<ul>\n<li>Encontrar\n<code>bash\n$ docker inspect myContainer\n</code></li>\n<li>Se pueden crear vol\xfamenes o montar desde el host\n<code>bash\n$ docker run -d -P --name web -v /webapp myImage npm start\n$ docker run -d -P --name web -v /src:/webapp myImage npm start\n</code>\n???</li>\n<li>bypass a unionfs</li>\n<li>si no esta bindeado a host, copia el contenido adentro</li>\n<li>permite compartir entre containers con compose o con named volumes (flocker por ejemplo)</li>\n<li>esta dise\xf1ado para cambiar el container y que la data persista, incluso aunque ningun container la referencie</li>\n<li>soporta SCSI, NFS, etc.</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volume-containers">Data volume containers</h2>\n\n<ul>\n<li><em><a href="/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/">Es una pr\xe1ctica</a></em> que consiste en crear un contenedor que s\xf3lo contiene data que luego ser\xe1 utilizada por otros contenedores\n<code>bash\n$ docker create -v /dbdata --name mydb postgres /bin/true\n$ docker run -d --volumes-from mydb --name db1 postgres\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="network">Network</h2>\n\n<ul>\n<li>Puede ser bridge, none  y host\n<code>bash\n$ docker network ls\n</code></li>\n<li>Pueden verse los detalles\n<code>bash\n$ docker network inspect bridge\n</code></li>\n<li>Se pueden crear nuestras redes en las cuales correr containers\n???</li>\n<li>un container puede pertenecer a varias redes</li>\n<li>se ven entre los de la misma red</li>\n<li>puede ser overlay (swarm mode) o custom driver</li>\n<li>embedded dns en custom networks</li>\n<li>antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-aplicado">Docker Aplicado</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-28b55.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</h2>\n\n<ul>\n<li><p>Run, Start, Stop</p>\n\n<pre><code class="language-bash"># crea un contenedor en base a una imagen y corre el comando bash\n$ docker run --name miContenedor alpine echo &quot;Hola&quot;\n# arrancar un contenedor ya creado\n$ docker start miContenedor\n# parar contenedor con time to kill\n$ docker stop -t 10 miContenedor\n# also valid: docker restart -t 10 miContenedor\n</code></pre></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Listar, Inspeccionar\n<code>bash\n$ docker rm miContenedor\n$ docker ps\n$ docker ps --all\n$ docker inspect miContenedor\n</code></li>\n</ul>\n\n<p>???\n* hablar de se\xf1ales y su relacion con stop</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</h2>\n\n<ul>\n<li>Cargar, Listar, Inspeccionar\n<code>bash\n$ docker pull repo/image:tag\n$ docker load -i imagen.tar\n$ docker images\n$ docker inspect alpine\n</code></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Construir, Taggear, Subir\n<code>bash\n$ docker rmi repo/image:tag\n$ docker build -t image-name .\n$ docker tag image-name repo/image-name:tag\n$ docker push repo/image-name:tag\n</code></li>\n</ul>\n\n<p>???\n* es necesario un docker login myrepo:2376</p>\n\n<hr />\n\n<h2 id="ejemplo-existente">Ejemplo existente</h2>\n\n<pre><code class="language-bash">$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc\n</code></pre>\n\n<p><center>\n  <img src="/assets/vncffox.png" width="200px"></img>\n</center></p>\n\n<p>???\nLuego con un cliente vnc accedemos a un lxde con firefox instalado</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-08dc8.png" width="45px"></img>\n</div></p>\n\n<h2 id="nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</h2>\n\n<ol>\n<li>Se inicia un shell sobre una imagen base\n<code>bash\n$ docker run -it --name testC ubuntu sh\n</code></li>\n<li>Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile</li>\n</ol>\n\n<p>???\n- tar\n- scratch image (reserved word)\n- <em>history</em> de image\n- <em>commit</em> del container como no recomendada mas que para pruebas y debugging</p>\n\n<hr />\n\n<h2 id="debug">Debug</h2>\n\n<p>a. Entramos a un contenedor corriendo</p>\n\n<pre><code class="language-bash"># otra alternativa, tomar una\n$ docker exec -it nignxTest /bin/bash\n</code></pre>\n\n<p>b. Miramos los logs conectados</p>\n\n<pre><code class="language-bash">docker logs nginxTest\n</code></pre>\n\n<hr />\n\n<h2 id="buenas-pr\xe1cticas">Buenas pr\xe1cticas</h2>\n\n<ul>\n<li>Containers lo m\xe1s prescindibles posibles</li>\n<li>Usar .dockerignore</li>\n<li>Evitar instalar paquetes innecesarios</li>\n<li>Correr un s\xf3lo proceso por container</li>\n<li>Minimizar la cantidad de capas</li>\n<li>Organizar argumentos y comandos de multiples lineas con <br /></li>\n<li>Contemplar el build cache\n<center>\n<img src="/assets/docker-d0772.png" width="50%"></img>\n</center></li>\n</ul>\n\n<p>???\n* prescindible = efimero = pueden ser parados, destruidos y reemplazados\n* usar cache o no\n* el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente\n* una vez invalidado, ya no se utiliza para las subsecuentes capas</p>\n\n<hr />\n\n<h2 id="ejemplos-docker-para-web">Ejemplos docker para web</h2>\n\n<hr />\n\n<h2 id="spa-build">SPA build</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nADD . /src\nWORKDIR /src\nRUN rm -fR ./node_modules &amp;&amp; \\\n  npm i\nENTRYPOINT [&quot;npm&quot;, &quot;build&quot;]\n</code></pre>\n\n<p>???\nHay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el \xb4shell\xb4 form que hace &ldquo;/bin/sh -c&rdquo; lo que oculta se\xf1ales por ejemplo docker stop)\n&ndash;entrypoint overrides\n* tiene que haber al menos un cmd o entrypoint\n* entrypoint para ejecutables\n* cmd es mas para preparar parametros</p>\n\n<hr />\n\n<h2 id="spa-serve">SPA serve</h2>\n\n<pre><code class="language-Dockerfile">version: \'2\'\nservices:\n  spa:\n    image: nginx\n    volumes:\n      - &quot;.:/usr/share/nginx/html:ro&quot;\n    ports:\n      - &quot;10000:80&quot;\n</code></pre>\n\n<hr />\n\n<h2 id="api">API</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nEXPOSE 3000\nADD . /src\nWORKDIR /src\nRUN npm rebuild &amp;&amp; \\\n  npm test\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre>\n\n<p>???\nHay muchas alternativas, hay una tarea de dise\xf1o impl\xedcita</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-32d4f.png" width="50px"></img>\n</div>\n##&nbsp; Compose</p>\n\n<pre><code class="language-Dockerfile"># docker-compose.yml just for api\nversion: \'2\'\nservices:\n  api:\n    image: mirepo.com/api-image:production\n    ports:\n      - &quot;3000:3000&quot;\n    depends_on:\n      - mongo\n    environment:\n      PORT: 3000\n  mongo:\n    image: mongo\n    ports:\n      - &quot;27017:27017&quot;\n    volumes:\n      - ./mongodata:/data/db\n</code></pre>\n\n<p>???</p>\n\n<h2 id="links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</h2>\n\n<h2 id="comandos-para-compose">Comandos para compose</h2>\n\n<ul>\n<li>Correr, Parar, Borrar\n<code>bash\n$ docker-compose up -d\n$ docker-compose stop -t 10\n$ docker-compose rm\n$ docker-compose --help\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="anexo-docker-services">Anexo: Docker services</h2>\n\n<p>Es una abstracci\xf3n de los contenedores.\n* Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien\n* Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos\n* Para el cliente, el servicio luce como un docker daemon regular\n* Los servicios son los que brindan escalabilidad y flexibilidad de updates\n???\nswarm = el plural de docker nodes&hellip; manada/multitud/enjambre/nube\n* temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc</p>\n\n<hr />\n\n<h2 id="operaciones-con-services">Operaciones con services</h2>\n\n<pre><code class="language-bash">$ docker service create \\\n  --name my-service \\\n  --replicas 3 \\\n  nginx:alpine\n\n$ docker-compose scale service-name=2\n</code></pre>\n\n<p>???\n* services global/replicated</p>\n\n<hr />\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1>\n',Summary:"Introduccion a docker Por nicosommi name: agenda Agenda Agenda y alcance Fundamentos Casos de uso Por dentro Componentes Ejemplo sencillo Q &amp; A Mas componentes Comandos sobre contenedores e im\xe1genes Ejemplo lateral T\xe9cnica para construir un Dockerfile Buenas pr\xe1cticas Docker para SPA, web apps, etc Anexo: Services Q &amp; A class: center Que es? ??? Disculpen el teclado en ingles T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#introduccion-a-docker">Introduccion a docker</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#que-es">Que es?</a></li>\n<li><a href="#es-una-maquina-virtual-no">Es una maquina virtual? No.</a></li>\n<li><a href="#como-se-diferencia-de-una">Como se diferencia de una?</a></li>\n<li><a href="#en-donde-corre">En donde corre?</a></li>\n<li><a href="#nbsp-para-que-sirve">&nbsp;Para que sirve?</a></li>\n<li><a href="#nbsp-datos">&nbsp;Datos</a></li>\n<li><a href="#casos-de-uso">Casos de uso</a></li>\n<li><a href="#por-dentro">Por dentro</a></li>\n<li><a href="#nbsp-docker-image">&nbsp;Docker Image</a></li>\n<li><a href="#docker-container">Docker Container</a></li>\n<li><a href="#acerca-del-contenedor">Acerca del Contenedor</a></li>\n<li><a href="#nbsp-storage">&nbsp;Storage</a></li>\n<li><a href="#componentes">Componentes</a></li>\n<li><a href="#docker-engine">Docker Engine</a></li>\n<li><a href="#machine">Machine</a></li>\n<li><a href="#compose">Compose</a></li>\n<li><a href="#nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</a></li>\n<li><a href="#wordpress">Wordpress</a></li>\n</ul></li>\n<li><a href="#q-a-parcial">Q &amp; A Parcial</a>\n<ul>\n<li><a href="#docker-registry">Docker Registry</a></li>\n<li><a href="#data-volumes">Data volumes</a></li>\n<li><a href="#data-volume-containers">Data volume containers</a></li>\n<li><a href="#network">Network</a></li>\n<li><a href="#docker-aplicado">Docker Aplicado</a></li>\n<li><a href="#nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</a></li>\n<li><a href="#nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</a></li>\n<li><a href="#ejemplo-existente">Ejemplo existente</a></li>\n<li><a href="#nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</a></li>\n<li><a href="#debug">Debug</a></li>\n<li><a href="#buenas-pr\xe1cticas">Buenas pr\xe1cticas</a></li>\n<li><a href="#ejemplos-docker-para-web">Ejemplos docker para web</a></li>\n<li><a href="#spa-build">SPA build</a></li>\n<li><a href="#spa-serve">SPA serve</a></li>\n<li><a href="#api">API</a></li>\n<li><a href="#links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</a></li>\n<li><a href="#comandos-para-compose">Comandos para compose</a></li>\n<li><a href="#anexo-docker-services">Anexo: Docker services</a></li>\n<li><a href="#operaciones-con-services">Operaciones con services</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1863,FuzzyWordCount:1900,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="proxies-en-es6">Proxies en ES6</h1>\n\n<hr />\n\n<h2 id="agenda">Agenda</h2>\n\n<p><small>\n  Terminolog\xeda<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n</small></p>\n\n<hr />\n\n<h2 id="terminolog\xeda">Terminolog\xeda</h2>\n\n<hr />\n\n<p>\xbfQue es un proxy?<br />\nOrigen: <em>prokecye</em><br />\n  &ldquo;agency of one who acts instead of another&rdquo;<br />\nEn espa\xf1ol significa <em>apoderado</em><br />\n  <em>adj.</em> Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre</p>\n\n<p>???\nEjemplo, firmar un poder para hacer un tr\xe1mite</p>\n\n<hr />\n\n<p>\xbfQue es un protocolo?<br />\nUn <em>protocolo</em> es un conjunto de normas. Esto podria verse como un conjunto interfaces con reglas para usarlas, y ECMAScript define un protocolo para manejar objetos. Este protocolo opera a nivel Meta.</p>\n\n<p>???\nLa definici\xf3n no es la misma que suele utilizarse de protocolos para interfaces de otros lenguajes porque tambi\xe9n incluye reglas.</p>\n\n<hr />\n\n<p><em>Metaprogramming</em><br />\nEn la programaci\xf3n hay niveles base y meta. El nivel base procesa el input del usuario, mientras que el meta procesa al base.</p>\n\n<p>???\nPueden incluso ser dos lenguajes distintos.\nEn es como los closures, los usamos sin saber.\nHay unos que usamos constantemente: Object.*</p>\n\n<hr />\n\n<p><em>Meta Object Protocol</em>  es como se lo llama al protocolo de manejo de objetos de ECMAScript. Como particularidad, son internos (no son accesibles desde JS). Los engines pueden usarlos o no.</p>\n\n<hr />\n\n<ul>\n<li>Los metodos de un objeto del MOP llaman operaciones del engine, algunas que llaman a otras como [[Get]], que se llaman <em>operaciones derivadas</em> y las que son independientes, que se llaman <em>operaciones fundamentales</em>.<br /></li>\n</ul>\n\n<p>???\nEjemplo [[Get]] usa getOwnProperty, getPrototypeOf y Call</p>\n\n<hr />\n\n<p><em>Tipos de metaprogramming</em><br />\n- Introspection: permite s\xf3lo leer la estructura\n- Self-modification: permite modificar la estructura\n- Intercession: redefine la semantica de algunas operaciones</p>\n\n<p>???\nEjemplos Object.keys, moveProperty, proxy respectivamente</p>\n\n<hr />\n\n<p><em>Elementos del proxy</em><br />\n- target: es el fallback del handler, el representado\n[[ProxyTarget]]\n- handler: es quien, en caso de definir el m\xe9todo indicado, intercepta la llamada, el representante\n[[ProxyHandler]]\n- proxy: el que compone ambos y delega a uno u otro</p>\n\n<pre><code>const proxy = new Proxy(target, handler); // OK\nvar p = Proxy(target, handler); // TypeError: calling a builtin Proxy constructor without new is forbidden\n</code></pre>\n\n<p>???\nEl m\xe9todo del handler se llama trap.<br />\nEs decir que el proxy &ldquo;wrappea&rdquo; al target.</p>\n\n<hr />\n\n<pre><code>class MyHandler {\n  get(target, key, receiver) {\n    return Reflect[key];\n  }\n}\n</code></pre>\n\n<p>???\nReflect no se puede instanciar, tiene los mismos metodos que el handler, es como Math, todo estatico\nPor ejemplo Reflect.apply es menos verboso que Function.prototype.apply\nAlgunas veces nos da informaci\xf3n adicional como Reflect.set -&gt; [boolean]</p>\n\n<hr />\n\n<p><em>\xbfQue operaciones pueden ser interceptadas?</em><br />\nEsto es selectivo, no se puede interceptar todo o solo las fundamentales como podria suponerse.<br />\nEsto es por dos razones\n- porque una operacion estable corre el riesgo de que un proxy la haga inestable\n- porque tener mucho codigo custom intercalado haria el programa muy dificil de entender y debuggear</p>\n\n<p>???\nejemplo el === que no puede ser trapeada.\nEstable: sin side effects, que produce siempre el mismo resultado ante los mismos argumentos<br />\nSe podr\xeda pensar como que con interceptar s\xf3lo operaciones fundamentales, pero esto no es tan \xfatil ya que no inlcuir\xeda get por ejemplo.\nVer codigo de api client.</p>\n\n<hr />\n\n<p><em>Prototype chain</em><br />\nLos engines en su comportamiento habitual, al subir por el chain, van a disparar las traps que encuentren.<br />\nSin embargo, hay ciertas operaciones que suben por el prototype chain si no encuentran la property en el handler como get, set y has, las demas no alteran el prototype chain.</p>\n\n<p>???\nVer codigo y test de ghost.\nInstanceof &ldquo;lies&rdquo;</p>\n\n<hr />\n\n<p><em>B\xe1sicas</em></p>\n\n<pre><code>defineProperty(target, propKey, propDesc) // \u2192 boolean  (fundamental)\n  // trigger: Object.defineProperty(proxy, propKey, propDesc)\ndeleteProperty(target, propKey) // \u2192 boolean  (fundamental)\n  // trigger: delete proxy[propKey], delete proxy.foo\nget(target, propKey, receiver) // \u2192 any\n  // trigger: receiver[propKey]\n  // trigger: receiver.foo\n</code></pre>\n\n<hr />\n\n<p><em>Casos de uso</em>\n  * API Client\n  * Tracing / Logging\n  * Trap undefined property access\n  * Type check</p>\n\n<p>???\n  Se\xf1alar el tracing puede implementarse cambiando el objeto.\n  Type check example: properties que son &ldquo;fieles&rdquo; a su tipo incial.\n  Ir viendo ejemplos de api client, logging y lock</p>\n\n<hr />\n\n<p><em>Preguntas</em></p>\n\n<hr />\n\n<p><em>Practica 1</em><br />\nHacer &ldquo;trap undefined&rdquo;<br />\n&ldquo;Objeto que tira excepcion cuando se accede a una propiedad undefined&rdquo;\n(30 minutos)</p>\n\n<p>???\nDebe tirar un ReferenceError si no esta. Debe devolver el valor si esta.\nProbar nested with lock.</p>\n\n<hr />\n\n<p><em>Compatibilidad</em>\n* Solo FF, CH, Edge, Opera, Safari 10, Node 6</p>\n\n<p>???\nNo hay polyfill.</p>\n\n<hr />\n\n<p><em>Tipos de proxy</em>\n* Wrappers (solo control) o Virtual Objects (agregan comporamiento)</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Propiedades del proxy</em>\n* Transparencia virtual: no podemos saber si un objeto es un proxy\n* Encapsulamiento: no podemos acceder al handler desde el proxy</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Mas casos de uso</em>\n* DOM\n* Indices negativos de array\n* Data binding (polemico)\n* Profiling\n* RMI</p>\n\n<p>Note:\nDOM: usualmente est\xe1 implementado entre C++ y JS, y el context switch es costoso, lo que nos lleva a querer hacer el dom en js puro, pero hay cosas que no son tan simples de implementar, y ello fue una importante razon para hacer los proxies en JS (dom mas eficiente) y ademas que nos permite emular el browser (jsdom).</p>\n\n<p>Indices negativos como en algunos lenguajes.\nMencionar Object.observe (ES7) creado para binding por la pobre performance de los proxy, aunque abandonado por react.\nObject.observe no es necesario con la inmutabilidad, tratar browser como remote rendering, no storage y query\n(undo, state). Se dice que es lo que queremos, no lo que necesitamos (Stateful dom).\nProfiling para medir tiempo.\nRMI permite por ejemplo db access directo.</p>\n\n<hr />\n\n<p><em>Invariants</em><br />\nSi el target es no extensible y no configurable, lo invariante es forzado por el engine.</p>\n\n<p>???\nno extensible protege objetos, non configurability protege properties.\nCon los proxy se podr\xeda violar la invariabilidad, pero el engine lo prohibe chequeando los parametros y los resultados de los handlers, preventExtension, true y luego false, e igual para isExtensible y getOwnPropertyDescriptor</p>\n\n<hr />\n\n<p><em>Practica 2</em><br />\nMejorar api client<br />\n(30 minutos)</p>\n\n<p>???\nelegir algunos de los TODO</p>\n\n<hr />\n\n<p><em>Avanzadas 1</em></p>\n\n<pre><code>getOwnPropertyDescriptor(target, propKey) // \u2192 PropDesc|Undefined  (fundamental)  \n  // tby: Object.getOwnPropertyDescriptor(proxy, propKey)  \ngetPrototypeOf(target) // \u2192 Object|Null  (fundamental)  \n  // tby: Object.getPrototypeOf(proxy)  \nhas(target, propKey) // \u2192 boolean  \n  // tby: propKey in proxy\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 2</em></p>\n\n<pre><code>isExtensible(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.isExtensible(proxy)  \nownKeys(target) // \u2192 Array&lt;PropertyKey&gt;  (fundamental)  \n  // tby: Object.getOwnPropertyPropertyNames(proxy) (only uses string-valued keys)  \n  // tby: Object.getOwnPropertyPropertySymbols(proxy) (only uses symbol-valued keys)  \n  // tby: Object.keys(proxy) (only uses enumerable string-valued keys;\n  // enumerability is checked via Object.getOwnPropertyDescriptor)\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 3</em></p>\n\n<pre><code>preventExtensions(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.preventExtensions(proxy)  \nset(target, propKey, value, receiver) // \u2192 boolean  \n  // tby: receiver[propKey] = value  \n  // tby: receiver.foo = value // propKey = \'foo\'  \nsetPrototypeOf(target, proto) // \u2192 boolean  (fundamental)  \n  // tby: Object.setPrototypeOf(proxy, proto)\n</code></pre>\n\n<hr />\n\n<p><em>Para funciones</em></p>\n\n<pre><code>apply(target, thisArgument, argumentsList) // \u2192 any  \n  // tby: proxy.apply(thisArgument, argumentsList) (fundamental)  \n  // tby: proxy.call(thisArgument, ...argumentsList)  \n  // tby: proxy(...argumentsList)  \nconstruct(target, argumentsList) // \u2192 Object  \n  // tby: new proxy(..argumentsList)\n</code></pre>\n\n<hr />\n\n<p><em>Conclusion</em><br />\n* Performance\n* Debug\n* Casos de uso\n* Complejidad\n* Compatibilidad</p>\n\n<p>Note:\nPerformance: Conviene medir la performance en cada caso, evaluar que tan critica es la performance en nuestra app y tomar una decision.\nA mas c\xf3digo interceptado, menor performance, mayor dificultad de entender el codigo y de debug.\nRiesgo: podemos &ldquo;romper&rdquo; comportamientos, hacerlo inconsistente\nCasos de uso:</p>\n\n<hr />\n\n<p><em>Preguntas / Discusion / Ideas</em></p>\n\n<hr />\n\n<p>Gracias!</p>\n',Summary:"Proxies en ES6 Agenda Terminolog\xeda Desarrollo Casos de uso Ejercitaci\xf3n Desarrollo Casos de uso Ejercitaci\xf3n Terminolog\xeda \xbfQue es un proxy? Origen: prokecye &ldquo;agency of one who acts instead of another&rdquo; En espa\xf1ol significa apoderado adj. Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre ??? Ejemplo, firmar un poder para hacer un tr\xe1mite \xbfQue es un protocolo? Un protocolo es un conjunto de normas.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#proxies-en-es6">Proxies en ES6</a>\n<ul>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#terminolog\xeda">Terminolog\xeda</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1238,FuzzyWordCount:1300,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"proxies",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="organize-your-thunks">Organize your thunks</h1>\n',Summary:"Organize your thunks",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#organize-your-thunks">Organize your thunks</a></li>\n</ul>\n</nav>',Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:3,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"tpipe redux",Description:"",Keywords:[],Date:"2016-10-05T17:14:32-03:00",Lastmod:"2016-10-05T17:14:32-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="react-native-en-ubuntu">React Native en Ubuntu</h1>\n\n<p>Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.</p>\n\n<h2 id="porque">Porque?</h2>\n\n<p>Como tengo cierto pasado en Java y Android, luego de unos intentos entend\xed lo que estaba sucediendo y lo hice funcionar en Ubuntu, pero como tengo tangos colegas que no pueden hacerlo funcionar y tampoco tienen una Mac, comparto el procedimiento con el mundo.</p>\n\n<h2 id="conociendo-los-elementos">Conociendo los elementos</h2>\n\n<p>Antes de ir elemento por elemento cabe destacar que si bien los componentes del SDK de android tienen una interfaz de usuario y vienen con su IDE oficial, tambi\xe9n se pueden utilizar por consola. Muchas instrucciones andan por ah\xed insistiendo en abrir este eclipse custom para acceder a las herramientas y esto no es la \xfanica opci\xf3n y para nada conveniente para un desarrollador javascript que suele utilizar Atom, Webstorm, Sublime o algo as\xed.</p>\n\n<h3 id="sdk">SDK</h3>\n\n<h3 id="driver">Driver</h3>\n\n<h3 id="emulador">Emulador</h3>\n\n<h3 id="dispositivo">Dispositivo</h3>\n\n<h2 id="comando-a-comando">Comando a comando</h2>\n\n<h2 id="entendiendo-todo">Entendiendo todo</h2>\n',Summary:"React Native en Ubuntu Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#react-native-en-ubuntu">React Native en Ubuntu</a>\n<ul>\n<li><a href="#porque">Porque?</a></li>\n<li><a href="#conociendo-los-elementos">Conociendo los elementos</a>\n<ul>\n<li><a href="#sdk">SDK</a></li>\n<li><a href="#driver">Driver</a></li>\n<li><a href="#emulador">Emulador</a></li>\n<li><a href="#dispositivo">Dispositivo</a></li>\n</ul></li>\n<li><a href="#comando-a-comando">Comando a comando</a></li>\n<li><a href="#entendiendo-todo">Entendiendo todo</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:225,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"react native ubuntu",Description:"",Keywords:[],Date:"2016-10-05T16:00:55-03:00",Lastmod:"2016-10-05T16:00:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="container-os">Container OS</h1>\n\n<p>En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto.</p>\n\n<p>Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.</p>\n\n<p><em>El futuro de los sistemas operativos son los contenedores para correr cualquier aplicaci\xf3n.</em></p>\n\n<p>Cuando uno comienza a jugar con Docker se empieza a dar cuenta de que puede ejecutar algo con un entorno controlado en cualquier otro entorno host. Podemos correr un apache en ubuntu dentro de un windows o de otro ubuntu. O un nginx en un coreos dentro de una mac. Otro ejemplo, se puede compilar un programa en go lang para cualquier plataforma desde un ubuntu sin siquiera instalar go. Una locura. Realmente.</p>\n\n<p>Esto en mi caso me hizo relacionarlo con el furor de las api rest con las que lidio d\xeda a d\xeda y con los procesos en s\xed mismos.</p>\n\n<p>Por otro lado pens\xe9 en los problemas que enfrentan el SO y los programas en cuanto a todo lo compartido entre procesos, memoria, puertos, archivos, etc.</p>\n\n<p>Todo esto fu\xe9 solucionado del lado de las aplicaciones y del SO con mucho esfuerzo en el tiempo y con desarrollos y configuraciones cuidadosas. Y fu\xe9 muy fruct\xedfero&hellip; pero con Docker todo esto sera mas sencillo.</p>\n\n<p><em>Ya no tendr\xe1 sentido tener windows, ubuntu, u OSX. Todo correr\xe1 en contenedores con su SO y su entorno optimo y controlado y el SO host decidir\xe1 que comparte con \xe9l. Los sistemas operativos ser\xe1n minimos y meros manejadores del engine de contenedores que solo tendran lo necesario para que este funcione.</em></p>\n\n<p>Las aplicaciones nativas careceran de sentido ya que vendran con su sistema operativo incorporado. Las ventanas seran simples consolas de los contenedores. La escalabilidad ser\xe1 natural. El hardware estar\xe1 finalmente desacoplado de las aplicaciones.</p>\n',Summary:"Container OS En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto. Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#container-os">Container OS</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:362,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"container os",Description:"",Keywords:[],Date:"2016-09-19T20:10:55-03:00",Lastmod:"2016-09-19T20:10:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="manejando-multiples-repositorios">Manejando multiples repositorios</h1>\n\n<h2 id="submodulos-con-git">Submodulos con git</h2>\n\n<p>Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias.</p>\n\n<p>El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.</p>\n\n<p>Las necesidades son:\n- Crear un repo que contenga a los demas (contenedor / workspace)\n- Hacer un pull de todos juntos de ser necesario</p>\n\n<h3 id="agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</h3>\n\n<p>Ahora tenemos que ir agregando nuestros repos como subm\xf3dulos.</p>\n\n<pre><code class="language-bash">git submodule add [repourl]\n</code></pre>\n\n<p>Cabe destacar que cada submodulo es un repo independiente cuando estamos dentro de el, pero en lugar de creat una carpeta .git, se crear\xe1 un archivo .git que tendr\xe1 el path a la carpeta .git del repositorio que lo contiene.\nPor otro lado, en el repositorio contenedor, se genera un archivo .gitmodules que nos dice los m\xf3dulos que este repositorio contiene.</p>\n\n<p>Nota: este archivo .gitmodules, si bien puede parecer redundante ya que est\xe1n los m\xf3dulos en la carpeta .git, es muy importante ya que al estar en el control de versiones nos permite sacar provecho de clonar a la vez muchos repositorios en el caso de uso que perseguimos aqu\xed.</p>\n\n<p>Una vez tenemos todos los repositorios agregados, comiteamos y pusheamos normalmente en el repositorio contenedor.</p>\n\n<h2 id="clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</h2>\n\n<p>Si bien la diferencia es ligera, me he topado con que git no hace nada si simplemente actualizamos en un repositorio que a\xfan no ha inicializado sus subm\xf3dulos, por ende luego del est\xe1ndar <code>git clone</code>, debemos inicializar los subm\xf3dulos de manera expl\xedcita:</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --init --recursive\n# just one\ngit submodule update --init path/to/subm\n</code></pre>\n\n<h2 id="update-de-submodulos">Update de submodulos</h2>\n\n<p>Si ya inicializamos nuestros submodulos aunque sea una vez, basta con lo siguiente</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --recursive\n# particular submodule\ngit submodule update path/to/subm\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Esto realmente es muy util, no solo por el batch update, sino porque al clonar el contenedor en una maquina, al inicializar nos puede traer los N repositorios de ese workspace, ahorrandonos muchos comandos git clone.\nUna vez que comenzas con esta practica, se convierte en un must-do rapidamente.</p>\n',Summary:"Manejando multiples repositorios Submodulos con git Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias. El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#manejando-multiples-repositorios">Manejando multiples repositorios</a>\n<ul>\n<li><a href="#submodulos-con-git">Submodulos con git</a>\n<ul>\n<li><a href="#agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</a></li>\n</ul></li>\n<li><a href="#clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</a></li>\n<li><a href="#update-de-submodulos">Update de submodulos</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:392,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"submodules",Description:"",Keywords:[],Date:"2016-09-19T14:54:14-03:00",Lastmod:"2016-09-19T14:54:14-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</h1>\n\n<p>En estos dias me puse como meta rehacer mi blog.\nPara esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts.</p>\n\n<p>Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.</p>\n\n<p>Dejar wordpress no es una tarea sencilla, ya que es una excelente plataforma, con la cual se puede hacer practicamente todo y de una manera muy sencilla. Desde SEO, pasando por analytics, infinitos temas, infinitos plugins, responsive design&hellip; en definitiva, un monton de cosas.</p>\n\n<p>Pero necesito algo mas orientado al desarrollador y no tanto a una persona &ldquo;normal&rdquo;.\nAsi que empece a buscar&hellip; y encontre gohugo, un framework hecho en golang que nos permite hacer nuestro sitio de una manera muy sencilla.</p>\n\n<p>Hugo me atrajo por diversos motivos. Me permite utilizar mi github page, con lo cual en una de esas me ahorro unos pesos de hosting, es muy personalizable (soporta arquetipos, temas, y muchas cosas mas), y es muy rapido, y cuando digo muy rapido no exagero&hellip; golang le da esa ventaja sobre por ejemplo ghost (otra platforma de blog un poco mas simple que wordpress hecha en nodejs, muy buena tambien por cierto&hellip;).</p>\n\n<p>Un tema que me jugaba en contra en Hugo era el hecho de que, al usar mi github page para el blog, la cual es open source y esta en una pagina de github, los drafts iban a quedar implicitamente publicos, y la verdad no es algo que me parezca muy adecuado.</p>\n\n<p>Asi que pense que como desarrollador y aficionado a unix esto lo podia resolver facilmente, y cree unos sencillos shell scripts para encriptar y desencriptar los drafts de manera simple y segura utilizando un archivo de key que poseo en otro repositorio que es privado.</p>\n\n<p>Quiero compartir el proceso de configuracion de un blog publico y gratis, ya que me parece interesante.\n- Primero cree un repositorio privado (se consiguen infinitos en gitlab y en bitbucket)\n- Clonamos el repo como de costumbre</p>\n\n<pre><code class="language-bash">git clone [url del repo privado]\n</code></pre>\n\n<ul>\n<li>Se agrega nuestro repo de github page como submodulo (el mio por ejemplo es git@github.com:nicosommi/nicosommi.github.io.git)\n<code>bash\ngit submodule add [url del repo del blog]\n</code></li>\n<li>Se agrega un archivo key en dicho repo parent con un contenido que servira para encriptar y desencriptar nuestros drafts</li>\n<li>Se hacen o se copian los scripts de encripcion y desencription (se pueden tomar <a href="https://github.com/nicosommi/nicosommi.github.io">de aqui</a> tal como yo los utilizo, son los archivos ddrafts.sh y edrafts.sh para desencriptar y encriptar respectivamente, notar que requieren el paquete gpg de linux o <a href="#" title="brew install -v gpg">de osx</a>)</li>\n<li>Se agrega al gitignore la carpeta de draft originales para que no vayan al repo (tambien se puede ver del <a href="https://github.com/nicosommi/nicosommi.github.io">repo de este blog</a>)</li>\n<li>Opcionalmente se puede agregar un pre commit hook para que agregue el archivo encriptado en los commits\n<code>bash\necho &quot;#\\!/usr/bin/env bash\\n./ddrafts.sh\\ngit add drafts.contents\\n&quot; &gt; ../.git/modules/nicosommi.github.io/hooks/pre-commit\n</code></li>\n</ul>\n',Summary:"Haciendo un blog con gohugo En estos dias me puse como meta rehacer mi blog. Para esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts. Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:513,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"gohugo",Description:"",Keywords:[],Date:"2016-09-18T12:16:51-03:00",Lastmod:"2016-09-18T12:16:51-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico"},Content:'<p>Please don&rsquo;t ask me for my CV and see my social profiles instead (<a href="https://www.linkedin.com/in/nicosommi/">linkedin</a>, <a href="https://github.com/nicosommi">github</a>, <a href="https://stackoverflow.com/users/1015217/nico">stackoverflow</a>).</p>\n\n<p>And if you want to contact me, send a message to <a href="maito:nicosommi@gmail.com" title="nicosommi@gmail.com">nicosommi@gmail.com</a></p>\n\n<p><a href="https://flattr.com/submit/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F" target="_blank"><img src="//button.flattr.com/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></p>\n\n<p>&nbsp;</p>\n',Summary:"Please don&rsquo;t ask me for my CV and see my social profiles instead (linkedin, github, stackoverflow). And if you want to contact me, send a message to nicosommi@gmail.com &nbsp;",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"page",WordCount:29,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Resume/Acerca de mi",Description:"",Keywords:[],Date:"2013-04-11T22:27:04Z",Lastmod:"2013-04-11T22:27:04Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}],Files:[{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}}],Menus:{},Hugo:null,Title:"nicosommi",RSSLink:"http://localhost:1313/index.xml",Author:{},LanguageCode:"es-AR",DisqusShortname:"",GoogleAnalytics:"",Copyright:"",LastChange:"2017-07-06T20:36:09-03:00",Permalinks:{},Params:{description:"a developer's blog",disqusShortname:"nicosommi",google_analytics:"UA-44929876-1",ignoreFiles:["\\.gitignore\\*$","\\*drafts\\*$"],slideDescription:"slide",theme:"hugo-nicosommi"},BuildDrafts:!0,Data:{translations:{"en-US":{hello:"hello"},"es-AR":{hello:"hola"}}}}}},function(e,o){e.exports={app:{Params:{author:"nico"},Content:'<p>Please don&rsquo;t ask me for my CV and see my social profiles instead (<a href="https://www.linkedin.com/in/nicosommi/">linkedin</a>, <a href="https://github.com/nicosommi">github</a>, <a href="https://stackoverflow.com/users/1015217/nico">stackoverflow</a>).</p>\n\n<p>And if you want to contact me, send a message to <a href="maito:nicosommi@gmail.com" title="nicosommi@gmail.com">nicosommi@gmail.com</a></p>\n\n<p><a href="https://flattr.com/submit/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F" target="_blank"><img src="//button.flattr.com/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></p>\n\n<p>&nbsp;</p>\n',Summary:"Please don&rsquo;t ask me for my CV and see my social profiles instead (linkedin, github, stackoverflow). And if you want to contact me, send a message to nicosommi@gmail.com &nbsp;",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"page",WordCount:29,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Resume/Acerca de mi",Description:"",Keywords:[],Date:"2013-04-11T22:27:04Z",Lastmod:"2013-04-11T22:27:04Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"http://localhost:1313/resume/",Slug:"",Section:"",IsHome:!1},site:{BaseURL:"http://localhost:1313/",Taxonomies:{categories:{english:[{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"espa\xf1ol":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],experiences:[{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],experiencias:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],gdd:[{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}}],ideas:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],integration:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],technology:[{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],tecnicos:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],world:[{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1}}]},series:{},tags:{containers:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],debug:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],docker:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],javascript:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],js:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],linuxkit:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],moby:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"node.js":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],only:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"operative-systems":[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"tibco-business-works-designer-json-rest-esb":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],volume:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}]}},Authors:null,Social:{},Sections:{draft:[{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="scripts">Scripts</h1>\n\n<h2 id="problema">Problema</h2>\n\n<p>Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.\nUno de estos problemas, una vez elegidos los paquetes, es armar una serie de scripts que nos brinden todas las tareas que necesitamos.\nEnumerando, en escenarios tipicos necesitamos minimamente:\n- test\n- test watch\n- test con reporte de coverage completo\n- test watch con un reporte de coverage completo\n- start con live reload\n- start\n- lint\n- build (transpilacion, webpack, etc)\n- &hellip;etc&hellip; (chequeo de dependencias, )</p>\n\n<p>De proyecto en proyecto, cambiando clientes, equipos, lenguajes, estandares, y otras cosas, cambian las estructuras del proyecto, la ubicacion de los archivos, los frameworks, las costumbres, y muchas otras cosas mas.\nSin embargo, estos scripts, aunque cambian ligeramente, siempre estan, y si no estan, estaria bien que estuviesen, lo cual es un punto muy importante, ya que algunas veces esto nos lleva a tener menos &ldquo;comodidades&rdquo; para producir codigo de calidad.\nEste problema es el que vengo enfrentando una vez tras otra, y ya he probado varias alternativas:</p>\n\n<h2 id="intento-1-grunt-gulp">Intento 1: grunt/gulp</h2>\n\n<p>Grunt y gulp, para un recien iniciado, significa produccion rapida. Son sencillos de aprender y nos permiten realizar cosas relativamente complejas con dependencias entre tareas que ejecutan scripts.<br />\nSin embargo, a mi personalmente no me gusta la dependencia que se genera con dichos frameworks que a mi criterio, resuelven las cosas de una manera que no es la optima.<br />\nUno termina sospechando que con npm y sus scripts deberia ser suficiente. Nos queda el sabor de que son sobre disenos para la mayoria de los casos.</p>\n\n<h2 id="intento-2-npm-suelto">Intento 2: npm suelto</h2>\n\n<p>Luego del intento anterior, y con el criterio de utilizar lo que es realmente necesario, uno intenta sacarle el maximo provecho a npm. Esto es realmente muy sencillo y funciona muy bien.\nSimplemente agregamos scripts y combinamos comandos o llamamos a otros scripts.\nEsto sin embargo tiene una dependencia implicita: el sistema operativo. Muchos comandos son particulares de UNIX y no funcionan en Windows.</p>\n\n<h2 id="intento-3-makefile">Intento 3: makefile</h2>\n\n<p>Es una alternativa interesante, muy util, mucho mas performante que un manejador de dependencias en javascript, y mas sencillo tambien, aunque suele asustar a mucha gente.<br />\nLo cierto es que resuelve el core de grunt/gulp y nos permite luego hacer lo que queramos.<br />\nEs una de las mejores a mi parecer, y si bien no muchos la eligen, he visto varios projectos con su Makefile.</p>\n\n<p>En este post quiero probar dos ideas que aun no he visto por alli:</p>\n\n<h2 id="idea-1-shelljs">Idea 1: shelljs</h2>\n\n<p>Esta idea consiste en llamar, desde npm, a scripts que son una secuencia de comandos en shelljs.\nShell.js para quienes no la conocen es una libreria con una implementacion de POSIX en javascript. Es decir que con esto podemos utilizar comandos que funcionaran tambien en windows.\nUna solucion sencilla y eficaz.\nVeamos como seria un proyecto sencillo.</p>\n\n<h2 id="idea-2-docker">Idea 2: docker</h2>\n\n<p>Esta vez, yendo un paso mas alla, cada comando de npm podria correr en un contenedor efimero que utilice siempre la misma plataforma, por ejemplo un alpine linux o un ubuntu.\nEsto tiene la ventaja de utilizar los comandos del shell que mas nos guste, y del sistema operativo de nuestra preferencia.\nLa implementacion sin embargo nos genera una dependencia: docker.\nPersonalmente creo que docker debe estar instalado en todas las computadoras, ya que es el futuro&hellip; (en realidad ya es el presente) por lo que para mis proyectos no lo considero un impedimento.\nAdemas de la dependencia, hay una minima complejidad en la implementacion: se requiere un conocimiento de docker.\nAunque para esto ultimo, he desarrollado un paquete.\nVeamos como seria un ejemplo sin dicho paquete:\nY ahora uno utilizando este paquete:</p>\n\n<h2 id="un-poco-de-mi-historia">Un poco de mi historia</h2>\n\n<p>Cuando arranque con node.js, alla por el 2012, npm fue una las primeras cosas con las que tuve contacto al poco tiempo.<br />\nEs el lugar donde convergen los paquetes de la comunidad. Tan fuerte era dicho lazo que pronto npm se introdujo en node y ahora forma parte del mismo paquete.\nCasi automaticamente, y un poco agnostico de npm, adopte soluciones parecidas a mis experiencias previas en java (maven y ant).</p>\n\n\x3c!--\n<resumen />\n- npm suelto\n- grunt/gulp\n- npm suelto\n- shelljs\n- docker\n--\x3e\n',Summary:"Scripts Problema Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#scripts">Scripts</a>\n<ul>\n<li><a href="#problema">Problema</a></li>\n<li><a href="#intento-1-grunt-gulp">Intento 1: grunt/gulp</a></li>\n<li><a href="#intento-2-npm-suelto">Intento 2: npm suelto</a></li>\n<li><a href="#intento-3-makefile">Intento 3: makefile</a></li>\n<li><a href="#idea-1-shelljs">Idea 1: shelljs</a></li>\n<li><a href="#idea-2-docker">Idea 2: docker</a></li>\n<li><a href="#un-poco-de-mi-historia">Un poco de mi historia</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:765,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"scripts",Description:"",Keywords:[],Date:"2017-01-27T18:54:15-03:00",Lastmod:"2017-01-27T18:54:15-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="organize-your-thunks">Organize your thunks</h1>\n',Summary:"Organize your thunks",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#organize-your-thunks">Organize your thunks</a></li>\n</ul>\n</nav>',Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:3,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"tpipe redux",Description:"",Keywords:[],Date:"2016-10-05T17:14:32-03:00",Lastmod:"2016-10-05T17:14:32-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="react-native-en-ubuntu">React Native en Ubuntu</h1>\n\n<p>Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.</p>\n\n<h2 id="porque">Porque?</h2>\n\n<p>Como tengo cierto pasado en Java y Android, luego de unos intentos entend\xed lo que estaba sucediendo y lo hice funcionar en Ubuntu, pero como tengo tangos colegas que no pueden hacerlo funcionar y tampoco tienen una Mac, comparto el procedimiento con el mundo.</p>\n\n<h2 id="conociendo-los-elementos">Conociendo los elementos</h2>\n\n<p>Antes de ir elemento por elemento cabe destacar que si bien los componentes del SDK de android tienen una interfaz de usuario y vienen con su IDE oficial, tambi\xe9n se pueden utilizar por consola. Muchas instrucciones andan por ah\xed insistiendo en abrir este eclipse custom para acceder a las herramientas y esto no es la \xfanica opci\xf3n y para nada conveniente para un desarrollador javascript que suele utilizar Atom, Webstorm, Sublime o algo as\xed.</p>\n\n<h3 id="sdk">SDK</h3>\n\n<h3 id="driver">Driver</h3>\n\n<h3 id="emulador">Emulador</h3>\n\n<h3 id="dispositivo">Dispositivo</h3>\n\n<h2 id="comando-a-comando">Comando a comando</h2>\n\n<h2 id="entendiendo-todo">Entendiendo todo</h2>\n',Summary:"React Native en Ubuntu Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#react-native-en-ubuntu">React Native en Ubuntu</a>\n<ul>\n<li><a href="#porque">Porque?</a></li>\n<li><a href="#conociendo-los-elementos">Conociendo los elementos</a>\n<ul>\n<li><a href="#sdk">SDK</a></li>\n<li><a href="#driver">Driver</a></li>\n<li><a href="#emulador">Emulador</a></li>\n<li><a href="#dispositivo">Dispositivo</a></li>\n</ul></li>\n<li><a href="#comando-a-comando">Comando a comando</a></li>\n<li><a href="#entendiendo-todo">Entendiendo todo</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:225,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"react native ubuntu",Description:"",Keywords:[],Date:"2016-10-05T16:00:55-03:00",Lastmod:"2016-10-05T16:00:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="container-os">Container OS</h1>\n\n<p>En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto.</p>\n\n<p>Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.</p>\n\n<p><em>El futuro de los sistemas operativos son los contenedores para correr cualquier aplicaci\xf3n.</em></p>\n\n<p>Cuando uno comienza a jugar con Docker se empieza a dar cuenta de que puede ejecutar algo con un entorno controlado en cualquier otro entorno host. Podemos correr un apache en ubuntu dentro de un windows o de otro ubuntu. O un nginx en un coreos dentro de una mac. Otro ejemplo, se puede compilar un programa en go lang para cualquier plataforma desde un ubuntu sin siquiera instalar go. Una locura. Realmente.</p>\n\n<p>Esto en mi caso me hizo relacionarlo con el furor de las api rest con las que lidio d\xeda a d\xeda y con los procesos en s\xed mismos.</p>\n\n<p>Por otro lado pens\xe9 en los problemas que enfrentan el SO y los programas en cuanto a todo lo compartido entre procesos, memoria, puertos, archivos, etc.</p>\n\n<p>Todo esto fu\xe9 solucionado del lado de las aplicaciones y del SO con mucho esfuerzo en el tiempo y con desarrollos y configuraciones cuidadosas. Y fu\xe9 muy fruct\xedfero&hellip; pero con Docker todo esto sera mas sencillo.</p>\n\n<p><em>Ya no tendr\xe1 sentido tener windows, ubuntu, u OSX. Todo correr\xe1 en contenedores con su SO y su entorno optimo y controlado y el SO host decidir\xe1 que comparte con \xe9l. Los sistemas operativos ser\xe1n minimos y meros manejadores del engine de contenedores que solo tendran lo necesario para que este funcione.</em></p>\n\n<p>Las aplicaciones nativas careceran de sentido ya que vendran con su sistema operativo incorporado. Las ventanas seran simples consolas de los contenedores. La escalabilidad ser\xe1 natural. El hardware estar\xe1 finalmente desacoplado de las aplicaciones.</p>\n',Summary:"Container OS En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto. Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#container-os">Container OS</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:362,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"container os",Description:"",Keywords:[],Date:"2016-09-19T20:10:55-03:00",Lastmod:"2016-09-19T20:10:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="manejando-multiples-repositorios">Manejando multiples repositorios</h1>\n\n<h2 id="submodulos-con-git">Submodulos con git</h2>\n\n<p>Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias.</p>\n\n<p>El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.</p>\n\n<p>Las necesidades son:\n- Crear un repo que contenga a los demas (contenedor / workspace)\n- Hacer un pull de todos juntos de ser necesario</p>\n\n<h3 id="agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</h3>\n\n<p>Ahora tenemos que ir agregando nuestros repos como subm\xf3dulos.</p>\n\n<pre><code class="language-bash">git submodule add [repourl]\n</code></pre>\n\n<p>Cabe destacar que cada submodulo es un repo independiente cuando estamos dentro de el, pero en lugar de creat una carpeta .git, se crear\xe1 un archivo .git que tendr\xe1 el path a la carpeta .git del repositorio que lo contiene.\nPor otro lado, en el repositorio contenedor, se genera un archivo .gitmodules que nos dice los m\xf3dulos que este repositorio contiene.</p>\n\n<p>Nota: este archivo .gitmodules, si bien puede parecer redundante ya que est\xe1n los m\xf3dulos en la carpeta .git, es muy importante ya que al estar en el control de versiones nos permite sacar provecho de clonar a la vez muchos repositorios en el caso de uso que perseguimos aqu\xed.</p>\n\n<p>Una vez tenemos todos los repositorios agregados, comiteamos y pusheamos normalmente en el repositorio contenedor.</p>\n\n<h2 id="clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</h2>\n\n<p>Si bien la diferencia es ligera, me he topado con que git no hace nada si simplemente actualizamos en un repositorio que a\xfan no ha inicializado sus subm\xf3dulos, por ende luego del est\xe1ndar <code>git clone</code>, debemos inicializar los subm\xf3dulos de manera expl\xedcita:</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --init --recursive\n# just one\ngit submodule update --init path/to/subm\n</code></pre>\n\n<h2 id="update-de-submodulos">Update de submodulos</h2>\n\n<p>Si ya inicializamos nuestros submodulos aunque sea una vez, basta con lo siguiente</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --recursive\n# particular submodule\ngit submodule update path/to/subm\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Esto realmente es muy util, no solo por el batch update, sino porque al clonar el contenedor en una maquina, al inicializar nos puede traer los N repositorios de ese workspace, ahorrandonos muchos comandos git clone.\nUna vez que comenzas con esta practica, se convierte en un must-do rapidamente.</p>\n',Summary:"Manejando multiples repositorios Submodulos con git Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias. El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#manejando-multiples-repositorios">Manejando multiples repositorios</a>\n<ul>\n<li><a href="#submodulos-con-git">Submodulos con git</a>\n<ul>\n<li><a href="#agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</a></li>\n</ul></li>\n<li><a href="#clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</a></li>\n<li><a href="#update-de-submodulos">Update de submodulos</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:392,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"submodules",Description:"",Keywords:[],Date:"2016-09-19T14:54:14-03:00",Lastmod:"2016-09-19T14:54:14-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</h1>\n\n<p>En estos dias me puse como meta rehacer mi blog.\nPara esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts.</p>\n\n<p>Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.</p>\n\n<p>Dejar wordpress no es una tarea sencilla, ya que es una excelente plataforma, con la cual se puede hacer practicamente todo y de una manera muy sencilla. Desde SEO, pasando por analytics, infinitos temas, infinitos plugins, responsive design&hellip; en definitiva, un monton de cosas.</p>\n\n<p>Pero necesito algo mas orientado al desarrollador y no tanto a una persona &ldquo;normal&rdquo;.\nAsi que empece a buscar&hellip; y encontre gohugo, un framework hecho en golang que nos permite hacer nuestro sitio de una manera muy sencilla.</p>\n\n<p>Hugo me atrajo por diversos motivos. Me permite utilizar mi github page, con lo cual en una de esas me ahorro unos pesos de hosting, es muy personalizable (soporta arquetipos, temas, y muchas cosas mas), y es muy rapido, y cuando digo muy rapido no exagero&hellip; golang le da esa ventaja sobre por ejemplo ghost (otra platforma de blog un poco mas simple que wordpress hecha en nodejs, muy buena tambien por cierto&hellip;).</p>\n\n<p>Un tema que me jugaba en contra en Hugo era el hecho de que, al usar mi github page para el blog, la cual es open source y esta en una pagina de github, los drafts iban a quedar implicitamente publicos, y la verdad no es algo que me parezca muy adecuado.</p>\n\n<p>Asi que pense que como desarrollador y aficionado a unix esto lo podia resolver facilmente, y cree unos sencillos shell scripts para encriptar y desencriptar los drafts de manera simple y segura utilizando un archivo de key que poseo en otro repositorio que es privado.</p>\n\n<p>Quiero compartir el proceso de configuracion de un blog publico y gratis, ya que me parece interesante.\n- Primero cree un repositorio privado (se consiguen infinitos en gitlab y en bitbucket)\n- Clonamos el repo como de costumbre</p>\n\n<pre><code class="language-bash">git clone [url del repo privado]\n</code></pre>\n\n<ul>\n<li>Se agrega nuestro repo de github page como submodulo (el mio por ejemplo es git@github.com:nicosommi/nicosommi.github.io.git)\n<code>bash\ngit submodule add [url del repo del blog]\n</code></li>\n<li>Se agrega un archivo key en dicho repo parent con un contenido que servira para encriptar y desencriptar nuestros drafts</li>\n<li>Se hacen o se copian los scripts de encripcion y desencription (se pueden tomar <a href="https://github.com/nicosommi/nicosommi.github.io">de aqui</a> tal como yo los utilizo, son los archivos ddrafts.sh y edrafts.sh para desencriptar y encriptar respectivamente, notar que requieren el paquete gpg de linux o <a href="#" title="brew install -v gpg">de osx</a>)</li>\n<li>Se agrega al gitignore la carpeta de draft originales para que no vayan al repo (tambien se puede ver del <a href="https://github.com/nicosommi/nicosommi.github.io">repo de este blog</a>)</li>\n<li>Opcionalmente se puede agregar un pre commit hook para que agregue el archivo encriptado en los commits\n<code>bash\necho &quot;#\\!/usr/bin/env bash\\n./ddrafts.sh\\ngit add drafts.contents\\n&quot; &gt; ../.git/modules/nicosommi.github.io/hooks/pre-commit\n</code></li>\n</ul>\n',Summary:"Haciendo un blog con gohugo En estos dias me puse como meta rehacer mi blog. Para esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts. Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:513,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"gohugo",Description:"",Keywords:[],Date:"2016-09-18T12:16:51-03:00",Lastmod:"2016-09-18T12:16:51-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],post:[{Weight:0,Page:{Params:{},Content:'\n\n<p><em>Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size</em></p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository.</p>\n\n<p>A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.</p>\n\n<p>Let&rsquo;s start with this.</p>\n\n<h3 id="first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</h3>\n\n<p>Easy, go to <a href="https://www.docker.com/community-edition#/download">https://www.docker.com/community-edition#/download</a>\nChoose your platform AND, because we need multi stage builds and its still on the <em>edge channel</em> we need to choose that instead of the stable channel. Download, install.</p>\n\n<h3 id="second-step-building-a-spa">Second step: Building a SPA</h3>\n\n<p>A single page application is just a static web page that can be served through any traditional web server.</p>\n\n<p>For this example, let&rsquo;s pick a boilerplate SPA like create-react-app.</p>\n\n<pre><code class="language-shell">npm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\nnpm start # if you want to test it and check the browser for it\n</code></pre>\n\n<h3 id="third-step-create-a-dockerfile">Third step: create a Dockerfile</h3>\n\n<p>All right now the important thing, let&rsquo;s take a look at a candidate Dockerfile</p>\n\n<pre><code class="language-docker"># buildtime\nFROM node AS nodebase\nLABEL maintainer &quot;nicosommi@gmail.com&quot;\n\nADD . /usr/src/app\nWORKDIR /usr/src/app\nRUN npm i &amp;&amp; npm run build\n\n# runtime\nFROM nginx:alpine\nCOPY --from=nodebase /usr/src/app/build /usr/share/nginx/html\n</code></pre>\n\n<p>So let&rsquo;s see.</p>\n\n<p>We start with a node:latest image, no problem with the image size because now we have multi stage builds.</p>\n\n<p>The LABEL maintainer, that&rsquo;s recent too, no more MAINTAINER special instruction, now it&rsquo;s a label.</p>\n\n<p>We add the current directory to the appropiate location and set the working directory to it.</p>\n\n<p>Install, build&hellip; and that&rsquo;s all that we need to generate our artifacts in our build folder.</p>\n\n<p>So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.</p>\n\n<p>Done!</p>\n\n<h3 id="fourth-step-build-and-run">Fourth step: build and run!</h3>\n\n<p>So now, let&rsquo;s build the image\n<code>docker build -t my-app .</code></p>\n\n<p>And now let&rsquo;s look it&rsquo;s size\n<code>docker images</code></p>\n\n<p>All right! less than 16 MB! With the whole thing, linux, nginx and our app!</p>\n\n<p>That&rsquo;s great. Just the node_modules folder size after installation is around 130 MB&hellip; so this is a BIG win.</p>\n\n<p>Let&rsquo;s try it<br />\n<code>docker run -d --rm -p 8000:80 --name my-app my-app</code></p>\n\n<p>Open chrome in localhost:8000 and enjoy.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Multi stage builds are great, it let&rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.</p>\n\n<p>By making this clear distinction between different stages, docker let&rsquo;s you think in a more organized way about the Dockerfile.</p>\n\n<p>With multi stage builds the LAST stage is the one that is used on your final image. Don&rsquo;t forget that. <em>For example, the ONBUILD instruction on a previous stage wont have any effect</em> because it will be overwritten with the last stage of the Dockerfile.</p>\n\n<p>As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&rsquo;s really big very quickly.</p>\n\n<p>nicosommi</p>\n',Summary:"Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size Introduction With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository. A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#introduction">Introduction</a>\n<ul>\n<li><a href="#first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</a></li>\n<li><a href="#second-step-building-a-spa">Second step: Building a SPA</a></li>\n<li><a href="#third-step-create-a-dockerfile">Third step: create a Dockerfile</a></li>\n<li><a href="#fourth-step-build-and-run">Fourth step: build and run!</a></li>\n</ul></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:526,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Weekend experiment: a node.js SPA with multi stage builds from docker",Description:"",Keywords:[],Date:"2017-04-29T06:34:58-03:00",Lastmod:"2017-04-29T06:34:58-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],react:[{Weight:0,Page:{Params:{bundle:"default"},Content:"",Summary:"",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:0,FuzzyWordCount:100,ReadingTime:0,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"test",Description:"",Keywords:[],Date:"2017-07-06T20:36:09-03:00",Lastmod:"2017-07-06T20:36:09-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],resume:[{Weight:0,Page:{Params:{author:"nico"},Content:'<p>Please don&rsquo;t ask me for my CV and see my social profiles instead (<a href="https://www.linkedin.com/in/nicosommi/">linkedin</a>, <a href="https://github.com/nicosommi">github</a>, <a href="https://stackoverflow.com/users/1015217/nico">stackoverflow</a>).</p>\n\n<p>And if you want to contact me, send a message to <a href="maito:nicosommi@gmail.com" title="nicosommi@gmail.com">nicosommi@gmail.com</a></p>\n\n<p><a href="https://flattr.com/submit/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F" target="_blank"><img src="//button.flattr.com/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></p>\n\n<p>&nbsp;</p>\n',Summary:"Please don&rsquo;t ask me for my CV and see my social profiles instead (linkedin, github, stackoverflow). And if you want to contact me, send a message to nicosommi@gmail.com &nbsp;",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"page",WordCount:29,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Resume/Acerca de mi",Description:"",Keywords:[],Date:"2013-04-11T22:27:04Z",Lastmod:"2013-04-11T22:27:04Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],slide:[{Weight:0,Page:{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/2017-03-25-13-39-09.png" width="400px"></img></p>\n\n<h1 id="docker-secrets">Docker secrets</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda e introducci\xf3n</li>\n<li>Como surgen?</li>\n<li>\xbfQu\xe9 son los secrets?</li>\n<li>\xbfPara que sirven?</li>\n<li>Anotaciones de seguridad</li>\n<li>Detalles de utilizaci\xf3n</li>\n<li>Preparando nuestras im\xe1genes</li>\n<li>Creando un secreto sencillo</li>\n<li>Utilizando secrets con YML&rsquo;s de docker compose</li>\n<li>Usando https con secrets</li>\n<li>Resumen de comandos</li>\n<li>Q &amp; A</li>\n<li>Fin</li>\n</ol>\n\n<hr />\n\n<h2 id="como-surgen">\xbfComo surgen?</h2>\n\n<p>Porque la comunidad toma decisiones heterogeneas y peligrosas:\n- Usar variables de entorno (12 factor app)\n- Variables de entorno en build\n- Manual build (commit)\n- Custom hacks (curl a webserver)\n&hellip; Se necesitan do&rsquo;s and don&rsquo;ts</p>\n\n<p>???\n- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados</p>\n\n<h2 id="hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</h2>\n\n<h2 id="qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</h2>\n\n<p>Para docker es un BLOB de datos manejado de manera centralizada.\n- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan\n- Solo para swarm&hellip; por ahora\n- Hasta 500KB (no TAN large)\n- Por ahora solo para runtime\n<center>\n  <img src="/slide/assets/2017-03-22-21-47-13.png" width="800px"></img>\n</center></p>\n\n<p>???\nBinary Large OBjects\nSecure Sockets Layer (ahora Transport Layer Security)\nSwarmKit es una libreria que se encarga del node management</p>\n\n<h2 id="hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</h2>\n\n<h2 id="para-que-sirven">\xbfPara que sirven?</h2>\n\n<ul>\n<li>Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos&hellip; y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones</li>\n<li>Funciona como capa de abstraccion entre las credenciales y los contenedores</li>\n</ul>\n\n<p>???\n- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido</p>\n\n<hr />\n\n<h2 id="anotaciones-de-seguridad">Anotaciones de seguridad</h2>\n\n<ul>\n<li>Viajan a los managers del swarm por TLS</li>\n<li>Se almacenan en el Raft log, con todo lo que ello nos garantiza (que est\xe1 encriptado y es replicado a trav\xe9s de los managers, garantizando la misma HA que el resto de la informacion del swarm)</li>\n<li>Cuando se detiene un container, se hace unmount y se flushea la memoria</li>\n<li>Si se pierde conexi\xf3n con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucci\xf3n hasta que se vuelva a conectar al swarm<br />\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li>\n</ul>\n\n<p>???\n* Esta encriptado desde la 1.13\n* El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm\n* El &ldquo;Raft log&rdquo; se refiere al consensus algorithm que utiliza swarmkit <em>entre managers</em> para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue dise\xf1ado para ser simple de entender y que m\xe1s sistemas utilizen un buen algoritmo de consenso para ser m\xe1s tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y l\xedderes.\n* Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un l\xedder es elegido. Despu\xe9s hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a>\nTienen un log y una maquina de estados.\nSi una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, tambi\xe9n relegando su liderazgo.</p>\n\n<hr />\n\n<h2 id="detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</h2>\n\n<ul>\n<li>Se montan en /run/secrets/name</li>\n<li>Solo tiene acceso si es un manager o si tiene permisos espec\xedficos</li>\n<li>Se pueden ver, listar los secrets, pero no se puede borrar uno que est\xe1 siendo utilizado, para ello se debe rotar el secret</li>\n<li>Se recomienda poner en el nombre una fecha o numero de version, para hacer m\xe1s sencillo el control</li>\n</ul>\n\n<p>???\n- &ndash;secret source=mysql_password,target=wp_db_password,mode=0400</p>\n\n<hr />\n\n<h2 id="preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</h2>\n\n<ul>\n<li>Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE adem\xe1s de MYSQL_PASSWORD)</li>\n</ul>\n\n<hr />\n\n<h2 id="creando-un-secreto-sencillo">Creando un secreto sencillo</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ openssl rand -base64 20 | docker secret create mi_secreto -\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets\n$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto\n</code></pre>\n\n<p>???\nSi commiteamos el container a una imagen, el secreto es desmontado</p>\n\n<h2 id="si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</h2>\n\n<h2 id="utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</h2>\n\n<pre><code class="language-yaml">version: \'3.1\'\nservices:\n    test:\n        image: \'alpine\'\n        command: \'cat /run/secrets/my_secret\'\n        secrets: \n            - my_secret\nsecrets:\n    my_secret:\n        file: ./mysecret.txt\n        # o external: true para tomarlo del swarm\n</code></pre>\n\n<p>???\nGracias al stack del compose</p>\n\n<h2 id="docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</h2>\n\n<h2 id="usando-https-con-secrets">Usando https con secrets</h2>\n\n<ol>\n<li>Generar certificado con let&rsquo;s encrypt, self-signed u otra CA</li>\n<li>Preparar nginx config</li>\n<li>Preparar secrets en el swarm\n<code>shell\n$ docker secret create site.key site.key\n$ docker secret create site.crt site.crt\n$ docker secret create site.conf site.conf\n</code></li>\n\n<li><p>Crear el servicio</p>\n\n<pre><code class="language-shell">$ docker service create --name nginx --secret site.key \\\n --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \\\n sh -c &quot;ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf &amp;&amp; exec nginx -g \'daemon off;\'&quot;\n</code></pre>\n\n<p>???</p>\n\n<h2 id="daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</h2>\n\n<h2 id="resumen-de-comandos">Resumen de comandos</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ echo &quot;a&quot; | docker secret create mi_secreto -\n$ docker secret inspect mi_secreto\n$ docker secret ls\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker service update mi_servicio --secret-rm mi_secreto\n$ docker service update mi_servicio --secret-add mi_nuevo_secreto\n$ docker secret rm mi_secreto\n</code></pre>\n\n<p>???</p>\n\n<h2 id="aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</h2>\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1></li>\n</ol>\n',Summary:"Docker secrets Por nicosommi name: agenda Agenda Agenda e introducci\xf3n Como surgen? \xbfQu\xe9 son los secrets? \xbfPara que sirven? Anotaciones de seguridad Detalles de utilizaci\xf3n Preparando nuestras im\xe1genes Creando un secreto sencillo Utilizando secrets con YML&rsquo;s de docker compose Usando https con secrets Resumen de comandos Q &amp; A Fin \xbfComo surgen? Porque la comunidad toma decisiones heterogeneas y peligrosas: - Usar variables de entorno (12 factor app) - Variables de entorno en build - Manual build (commit) - Custom hacks (curl a webserver) &hellip; Se necesitan do&rsquo;s and don&rsquo;ts ???",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#docker-secrets">Docker secrets</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#como-surgen">\xbfComo surgen?</a></li>\n<li><a href="#hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</a></li>\n<li><a href="#qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</a></li>\n<li><a href="#hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</a></li>\n<li><a href="#para-que-sirven">\xbfPara que sirven?</a></li>\n<li><a href="#anotaciones-de-seguridad">Anotaciones de seguridad</a></li>\n<li><a href="#detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</a></li>\n<li><a href="#preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</a></li>\n<li><a href="#creando-un-secreto-sencillo">Creando un secreto sencillo</a></li>\n<li><a href="#si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</a></li>\n<li><a href="#utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</a></li>\n<li><a href="#docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</a></li>\n<li><a href="#usando-https-con-secrets">Usando https con secrets</a></li>\n<li><a href="#daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</a></li>\n<li><a href="#resumen-de-comandos">Resumen de comandos</a></li>\n<li><a href="#aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:990,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker secrets",Description:"",Keywords:[],Date:"2017-03-29T15:38:10-03:00",Lastmod:"2017-03-29T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/docker-74de8.png" width="400px"></img></p>\n\n<h1 id="introduccion-a-docker">Introduccion a docker</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda y alcance</li>\n<li>Fundamentos</li>\n<li>Casos de uso</li>\n<li>Por dentro</li>\n<li>Componentes</li>\n<li>Ejemplo sencillo</li>\n<li>Q &amp; A</li>\n<li>Mas componentes</li>\n<li>Comandos sobre contenedores e im\xe1genes</li>\n<li>Ejemplo lateral</li>\n<li>T\xe9cnica para construir un Dockerfile</li>\n<li>Buenas pr\xe1cticas</li>\n<li>Docker para SPA, web apps, etc</li>\n<li>Anexo: Services</li>\n<li>Q &amp; A</li>\n</ol>\n\n<hr />\n\n<p>class: center</p>\n\n<h2 id="que-es">Que es?</h2>\n\n<p><center>\n  <img src="/assets/docker-89c82.png" width="400px"></img>\n</center></p>\n\n<p>???\nDisculpen el teclado en ingles</p>\n\n<hr />\n\n<ul>\n<li>T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.</li>\n<li>Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.</li>\n<li>UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios</li>\n<li>Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)\n<center>\n<img src="/assets/docker-28b55.png" width="300px"></img>\n</center></li>\n</ul>\n\n<hr />\n\n<p>class: right\n<img style="position: absolute" src="/assets/docker-04a7d.png" width="200px"></img></p>\n\n<h2 id="es-una-maquina-virtual-no">Es una maquina virtual? No.</h2>\n\n<h2 id="como-se-diferencia-de-una">Como se diferencia de una?</h2>\n\n<hr />\n\n<p>Se diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.\n<center>\n  <img src="/assets/history.png" width="600px"></img>\n</center>\n???\nComentar:\n* historia\n* primero escalabilidad horizontal\n* despues optimizar recursos\n* adicionales: docker swarm independiente\nNos permite cambiar la unidad de medida de nuestra aplicaci\xf3n de m\xe1quinas virtuales o f\xedsicas a simples containers.</p>\n\n<hr />\n\n<h2 id="en-donde-corre">En donde corre?</h2>\n\n<p>En sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).\nTambien, recientemente incorporaron contenedores basados en windows server.\n<center>\n  <img src="/assets/platforms.png" width="400px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-6a999.png" width="100px"></img>\n</div></p>\n\n<h2 id="nbsp-para-que-sirve">&nbsp;Para que sirve?</h2>\n\n<p>Para isolar el entorno de ejecuci\xf3n de una aplicaci\xf3n.</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/pencil.png" width="80px"></img>\n</div></p>\n\n<h2 id="nbsp-datos">&nbsp;Datos</h2>\n\n<ul>\n<li>Es open source desde el 2013.</li>\n<li>Esta escrito en go.</li>\n<li>Lo comenz\xf3 Solomon Hykes en dotCloud.</li>\n</ul>\n\n<p>???\nGo esta pensado para concurrencia y productividad y tiene garbage collection</p>\n\n<hr />\n\n<h2 id="casos-de-uso">Casos de uso</h2>\n\n<p><img src="/assets/usecases.png" width="90%"></img>\n???\nInvitar a sugerir ideas u opinar sobre las mencionadas\nTexto:\n* CI/CD\n* Entornos de desarrollo\n* Compilar para distintos targets\n* PaaS\n* Escalabilidad horizontal\n* High availability cluster\n* Aislar ejecucion de codigo de manera segura (webpackbin, etc)\n* Aprendizaje/investigacion\n* Etc&hellip;</p>\n\n<hr />\n\n<h2 id="por-dentro">Por dentro</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="140px"></img>\n</div></p>\n\n<h2 id="nbsp-docker-image">&nbsp;Docker Image</h2>\n\n<ul>\n<li>Es un template con instrucciones para la construccion de contenedores</li>\n<li>Tiene una o varias capas de solo lectura a partir del cual se crean contenedores</li>\n<li>Se pueden extender o empezar de cero</li>\n<li>Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile</li>\n<li>El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.</li>\n<li>Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-container">Docker Container</h2>\n\n<ul>\n<li>Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.</li>\n<li>Contiene una fina capa adicional a las de su imagen con permisos de escritura.</li>\n<li>Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.</li>\n<li>Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.\n<center>\n<img src="/assets/docker-bb91f.png" width="300px"></img>\n</center></li>\n</ul>\n\n<p>???\nPreguntar diferencia entre contenedor e imagen y clarificar dudas</p>\n\n<hr />\n\n<h2 id="acerca-del-contenedor">Acerca del Contenedor</h2>\n\n<p>Previamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).\n<center>\n  <img src="/assets/docker-71f58.png" width="240px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-1c5ae.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-storage">&nbsp;Storage</h2>\n\n<ul>\n<li>Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor</li>\n<li>Docker utiliza &lsquo;copy on write&rsquo;, es decir que copia una capa s\xf3lo cuando la va a cambiar, lo que permite optimizar el tama\xf1o en disco ocupado por la imagen y el tiempo de arranque de los contenedores.</li>\n<li>Toda la data de imagenes y contenedores se guarda en una carpeta.</li>\n<li>Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir seg\xfan caso de uso, experiencia del equipo y linux distro.</li>\n</ul>\n\n<hr />\n\n<h2 id="componentes">Componentes</h2>\n\n<hr />\n\n<h2 id="docker-engine">Docker Engine</h2>\n\n<p>Aplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.\n<img src="/assets/docker-9cf40.png" alt="Docker engine" /></p>\n\n<hr />\n\n<h2 id="machine">Machine</h2>\n\n<ul>\n<li>Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.</li>\n<li>Nos deja instalar docker en terminales remotas y provisionar swarms.\n<img src="/assets/docker-7ada0.png" width="95%"></img>\n???\nPermite especificar drivers para distintos providers</li>\n</ul>\n\n<hr />\n\n<h2 id="compose">Compose</h2>\n\n<p>Es una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.\n* Detecta cambios y recrea solo lo necesario\n* Soporta variables en el compose file\n* Guarda la data persistida en los volumes\n* Es muy util para entornos de desarrollo, para deployment en un solo host\n<center>\n  <img src="/assets/docker-32d4f.png" width="200px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/ubuntu.png" width="50px"></img>\n</div></p>\n\n<h2 id="nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</h2>\n\n<pre><code class="language-bash">$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash\nroot@3883936319fb:/# lsb_release -a\n(...) Description:\tUbuntu 14.04.5 LTS (...)\n</code></pre>\n\n<ol>\n<li>Trae la ultima imagen, o si ya existe la utiliza.</li>\n<li>Crea, en base a la imagen, un contenedor.</li>\n<li>Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.</li>\n<li>Asigna una interfaz de red con la cual habla con el host</li>\n<li>Setea una IP de una pool</li>\n<li>Ejecuta el proceso solicitado (/bin/bash)</li>\n<li>Captura y devuelve el output del contenedor por haber indicado -it</li>\n</ol>\n\n<p>???\ni es para el interactive mode, que deja el stdin esperando\nt asigna un pseudo tty / pty\n* pull\n* hablar de pull y de los otros parametros como name, port, volume</p>\n\n<hr />\n\n<h2 id="wordpress">Wordpress</h2>\n\n<pre>\n  <code class="bash hljs remark-code remark-code-line" style="font-size: 13px;">\n  version: \'2\'\n\n  services:\n     db:\n       image: mysql:5.7\n       volumes:\n         - "./.data/db:/var/lib/mysql"\n       restart: always\n       environment: (...)\n\n     wordpress:\n       depends_on:\n         - db\n       image: wordpress:latest\n       links:\n         - db\n       ports:\n         - "8000:80"\n       restart: always\n       environment: (...)\n  </code>\n</pre>\n\n<p>???\nEnvironment est\xe1 cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la p\xe1gina oficial</p>\n\n<hr />\n\n<h1 id="q-a-parcial">Q &amp; A Parcial</h1>\n\n<hr />\n\n<h2 id="docker-registry">Docker Registry</h2>\n\n<ul>\n<li>Es una libreria de imagenes.</li>\n<li>Puede ser publico o privado.</li>\n<li>Una vez construida la imagen, hacemos un push al registry</li>\n<li>Docker hub es un registry publico oficial</li>\n<li>Hay una imagen publica registry y una para el trusted registry\n<center>\n<img src="/assets/docker-89504.png" width="240px"></img>\n</center>\n???\nTrusted registry es con soporte comercial</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volumes">Data volumes</h2>\n\n<ul>\n<li>Encontrar\n<code>bash\n$ docker inspect myContainer\n</code></li>\n<li>Se pueden crear vol\xfamenes o montar desde el host\n<code>bash\n$ docker run -d -P --name web -v /webapp myImage npm start\n$ docker run -d -P --name web -v /src:/webapp myImage npm start\n</code>\n???</li>\n<li>bypass a unionfs</li>\n<li>si no esta bindeado a host, copia el contenido adentro</li>\n<li>permite compartir entre containers con compose o con named volumes (flocker por ejemplo)</li>\n<li>esta dise\xf1ado para cambiar el container y que la data persista, incluso aunque ningun container la referencie</li>\n<li>soporta SCSI, NFS, etc.</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volume-containers">Data volume containers</h2>\n\n<ul>\n<li><em><a href="/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/">Es una pr\xe1ctica</a></em> que consiste en crear un contenedor que s\xf3lo contiene data que luego ser\xe1 utilizada por otros contenedores\n<code>bash\n$ docker create -v /dbdata --name mydb postgres /bin/true\n$ docker run -d --volumes-from mydb --name db1 postgres\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="network">Network</h2>\n\n<ul>\n<li>Puede ser bridge, none  y host\n<code>bash\n$ docker network ls\n</code></li>\n<li>Pueden verse los detalles\n<code>bash\n$ docker network inspect bridge\n</code></li>\n<li>Se pueden crear nuestras redes en las cuales correr containers\n???</li>\n<li>un container puede pertenecer a varias redes</li>\n<li>se ven entre los de la misma red</li>\n<li>puede ser overlay (swarm mode) o custom driver</li>\n<li>embedded dns en custom networks</li>\n<li>antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-aplicado">Docker Aplicado</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-28b55.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</h2>\n\n<ul>\n<li><p>Run, Start, Stop</p>\n\n<pre><code class="language-bash"># crea un contenedor en base a una imagen y corre el comando bash\n$ docker run --name miContenedor alpine echo &quot;Hola&quot;\n# arrancar un contenedor ya creado\n$ docker start miContenedor\n# parar contenedor con time to kill\n$ docker stop -t 10 miContenedor\n# also valid: docker restart -t 10 miContenedor\n</code></pre></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Listar, Inspeccionar\n<code>bash\n$ docker rm miContenedor\n$ docker ps\n$ docker ps --all\n$ docker inspect miContenedor\n</code></li>\n</ul>\n\n<p>???\n* hablar de se\xf1ales y su relacion con stop</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</h2>\n\n<ul>\n<li>Cargar, Listar, Inspeccionar\n<code>bash\n$ docker pull repo/image:tag\n$ docker load -i imagen.tar\n$ docker images\n$ docker inspect alpine\n</code></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Construir, Taggear, Subir\n<code>bash\n$ docker rmi repo/image:tag\n$ docker build -t image-name .\n$ docker tag image-name repo/image-name:tag\n$ docker push repo/image-name:tag\n</code></li>\n</ul>\n\n<p>???\n* es necesario un docker login myrepo:2376</p>\n\n<hr />\n\n<h2 id="ejemplo-existente">Ejemplo existente</h2>\n\n<pre><code class="language-bash">$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc\n</code></pre>\n\n<p><center>\n  <img src="/assets/vncffox.png" width="200px"></img>\n</center></p>\n\n<p>???\nLuego con un cliente vnc accedemos a un lxde con firefox instalado</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-08dc8.png" width="45px"></img>\n</div></p>\n\n<h2 id="nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</h2>\n\n<ol>\n<li>Se inicia un shell sobre una imagen base\n<code>bash\n$ docker run -it --name testC ubuntu sh\n</code></li>\n<li>Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile</li>\n</ol>\n\n<p>???\n- tar\n- scratch image (reserved word)\n- <em>history</em> de image\n- <em>commit</em> del container como no recomendada mas que para pruebas y debugging</p>\n\n<hr />\n\n<h2 id="debug">Debug</h2>\n\n<p>a. Entramos a un contenedor corriendo</p>\n\n<pre><code class="language-bash"># otra alternativa, tomar una\n$ docker exec -it nignxTest /bin/bash\n</code></pre>\n\n<p>b. Miramos los logs conectados</p>\n\n<pre><code class="language-bash">docker logs nginxTest\n</code></pre>\n\n<hr />\n\n<h2 id="buenas-pr\xe1cticas">Buenas pr\xe1cticas</h2>\n\n<ul>\n<li>Containers lo m\xe1s prescindibles posibles</li>\n<li>Usar .dockerignore</li>\n<li>Evitar instalar paquetes innecesarios</li>\n<li>Correr un s\xf3lo proceso por container</li>\n<li>Minimizar la cantidad de capas</li>\n<li>Organizar argumentos y comandos de multiples lineas con <br /></li>\n<li>Contemplar el build cache\n<center>\n<img src="/assets/docker-d0772.png" width="50%"></img>\n</center></li>\n</ul>\n\n<p>???\n* prescindible = efimero = pueden ser parados, destruidos y reemplazados\n* usar cache o no\n* el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente\n* una vez invalidado, ya no se utiliza para las subsecuentes capas</p>\n\n<hr />\n\n<h2 id="ejemplos-docker-para-web">Ejemplos docker para web</h2>\n\n<hr />\n\n<h2 id="spa-build">SPA build</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nADD . /src\nWORKDIR /src\nRUN rm -fR ./node_modules &amp;&amp; \\\n  npm i\nENTRYPOINT [&quot;npm&quot;, &quot;build&quot;]\n</code></pre>\n\n<p>???\nHay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el \xb4shell\xb4 form que hace &ldquo;/bin/sh -c&rdquo; lo que oculta se\xf1ales por ejemplo docker stop)\n&ndash;entrypoint overrides\n* tiene que haber al menos un cmd o entrypoint\n* entrypoint para ejecutables\n* cmd es mas para preparar parametros</p>\n\n<hr />\n\n<h2 id="spa-serve">SPA serve</h2>\n\n<pre><code class="language-Dockerfile">version: \'2\'\nservices:\n  spa:\n    image: nginx\n    volumes:\n      - &quot;.:/usr/share/nginx/html:ro&quot;\n    ports:\n      - &quot;10000:80&quot;\n</code></pre>\n\n<hr />\n\n<h2 id="api">API</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nEXPOSE 3000\nADD . /src\nWORKDIR /src\nRUN npm rebuild &amp;&amp; \\\n  npm test\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre>\n\n<p>???\nHay muchas alternativas, hay una tarea de dise\xf1o impl\xedcita</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-32d4f.png" width="50px"></img>\n</div>\n##&nbsp; Compose</p>\n\n<pre><code class="language-Dockerfile"># docker-compose.yml just for api\nversion: \'2\'\nservices:\n  api:\n    image: mirepo.com/api-image:production\n    ports:\n      - &quot;3000:3000&quot;\n    depends_on:\n      - mongo\n    environment:\n      PORT: 3000\n  mongo:\n    image: mongo\n    ports:\n      - &quot;27017:27017&quot;\n    volumes:\n      - ./mongodata:/data/db\n</code></pre>\n\n<p>???</p>\n\n<h2 id="links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</h2>\n\n<h2 id="comandos-para-compose">Comandos para compose</h2>\n\n<ul>\n<li>Correr, Parar, Borrar\n<code>bash\n$ docker-compose up -d\n$ docker-compose stop -t 10\n$ docker-compose rm\n$ docker-compose --help\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="anexo-docker-services">Anexo: Docker services</h2>\n\n<p>Es una abstracci\xf3n de los contenedores.\n* Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien\n* Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos\n* Para el cliente, el servicio luce como un docker daemon regular\n* Los servicios son los que brindan escalabilidad y flexibilidad de updates\n???\nswarm = el plural de docker nodes&hellip; manada/multitud/enjambre/nube\n* temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc</p>\n\n<hr />\n\n<h2 id="operaciones-con-services">Operaciones con services</h2>\n\n<pre><code class="language-bash">$ docker service create \\\n  --name my-service \\\n  --replicas 3 \\\n  nginx:alpine\n\n$ docker-compose scale service-name=2\n</code></pre>\n\n<p>???\n* services global/replicated</p>\n\n<hr />\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1>\n',Summary:"Introduccion a docker Por nicosommi name: agenda Agenda Agenda y alcance Fundamentos Casos de uso Por dentro Componentes Ejemplo sencillo Q &amp; A Mas componentes Comandos sobre contenedores e im\xe1genes Ejemplo lateral T\xe9cnica para construir un Dockerfile Buenas pr\xe1cticas Docker para SPA, web apps, etc Anexo: Services Q &amp; A class: center Que es? ??? Disculpen el teclado en ingles T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#introduccion-a-docker">Introduccion a docker</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#que-es">Que es?</a></li>\n<li><a href="#es-una-maquina-virtual-no">Es una maquina virtual? No.</a></li>\n<li><a href="#como-se-diferencia-de-una">Como se diferencia de una?</a></li>\n<li><a href="#en-donde-corre">En donde corre?</a></li>\n<li><a href="#nbsp-para-que-sirve">&nbsp;Para que sirve?</a></li>\n<li><a href="#nbsp-datos">&nbsp;Datos</a></li>\n<li><a href="#casos-de-uso">Casos de uso</a></li>\n<li><a href="#por-dentro">Por dentro</a></li>\n<li><a href="#nbsp-docker-image">&nbsp;Docker Image</a></li>\n<li><a href="#docker-container">Docker Container</a></li>\n<li><a href="#acerca-del-contenedor">Acerca del Contenedor</a></li>\n<li><a href="#nbsp-storage">&nbsp;Storage</a></li>\n<li><a href="#componentes">Componentes</a></li>\n<li><a href="#docker-engine">Docker Engine</a></li>\n<li><a href="#machine">Machine</a></li>\n<li><a href="#compose">Compose</a></li>\n<li><a href="#nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</a></li>\n<li><a href="#wordpress">Wordpress</a></li>\n</ul></li>\n<li><a href="#q-a-parcial">Q &amp; A Parcial</a>\n<ul>\n<li><a href="#docker-registry">Docker Registry</a></li>\n<li><a href="#data-volumes">Data volumes</a></li>\n<li><a href="#data-volume-containers">Data volume containers</a></li>\n<li><a href="#network">Network</a></li>\n<li><a href="#docker-aplicado">Docker Aplicado</a></li>\n<li><a href="#nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</a></li>\n<li><a href="#nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</a></li>\n<li><a href="#ejemplo-existente">Ejemplo existente</a></li>\n<li><a href="#nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</a></li>\n<li><a href="#debug">Debug</a></li>\n<li><a href="#buenas-pr\xe1cticas">Buenas pr\xe1cticas</a></li>\n<li><a href="#ejemplos-docker-para-web">Ejemplos docker para web</a></li>\n<li><a href="#spa-build">SPA build</a></li>\n<li><a href="#spa-serve">SPA serve</a></li>\n<li><a href="#api">API</a></li>\n<li><a href="#links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</a></li>\n<li><a href="#comandos-para-compose">Comandos para compose</a></li>\n<li><a href="#anexo-docker-services">Anexo: Docker services</a></li>\n<li><a href="#operaciones-con-services">Operaciones con services</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1863,FuzzyWordCount:1900,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="proxies-en-es6">Proxies en ES6</h1>\n\n<hr />\n\n<h2 id="agenda">Agenda</h2>\n\n<p><small>\n  Terminolog\xeda<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n</small></p>\n\n<hr />\n\n<h2 id="terminolog\xeda">Terminolog\xeda</h2>\n\n<hr />\n\n<p>\xbfQue es un proxy?<br />\nOrigen: <em>prokecye</em><br />\n  &ldquo;agency of one who acts instead of another&rdquo;<br />\nEn espa\xf1ol significa <em>apoderado</em><br />\n  <em>adj.</em> Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre</p>\n\n<p>???\nEjemplo, firmar un poder para hacer un tr\xe1mite</p>\n\n<hr />\n\n<p>\xbfQue es un protocolo?<br />\nUn <em>protocolo</em> es un conjunto de normas. Esto podria verse como un conjunto interfaces con reglas para usarlas, y ECMAScript define un protocolo para manejar objetos. Este protocolo opera a nivel Meta.</p>\n\n<p>???\nLa definici\xf3n no es la misma que suele utilizarse de protocolos para interfaces de otros lenguajes porque tambi\xe9n incluye reglas.</p>\n\n<hr />\n\n<p><em>Metaprogramming</em><br />\nEn la programaci\xf3n hay niveles base y meta. El nivel base procesa el input del usuario, mientras que el meta procesa al base.</p>\n\n<p>???\nPueden incluso ser dos lenguajes distintos.\nEn es como los closures, los usamos sin saber.\nHay unos que usamos constantemente: Object.*</p>\n\n<hr />\n\n<p><em>Meta Object Protocol</em>  es como se lo llama al protocolo de manejo de objetos de ECMAScript. Como particularidad, son internos (no son accesibles desde JS). Los engines pueden usarlos o no.</p>\n\n<hr />\n\n<ul>\n<li>Los metodos de un objeto del MOP llaman operaciones del engine, algunas que llaman a otras como [[Get]], que se llaman <em>operaciones derivadas</em> y las que son independientes, que se llaman <em>operaciones fundamentales</em>.<br /></li>\n</ul>\n\n<p>???\nEjemplo [[Get]] usa getOwnProperty, getPrototypeOf y Call</p>\n\n<hr />\n\n<p><em>Tipos de metaprogramming</em><br />\n- Introspection: permite s\xf3lo leer la estructura\n- Self-modification: permite modificar la estructura\n- Intercession: redefine la semantica de algunas operaciones</p>\n\n<p>???\nEjemplos Object.keys, moveProperty, proxy respectivamente</p>\n\n<hr />\n\n<p><em>Elementos del proxy</em><br />\n- target: es el fallback del handler, el representado\n[[ProxyTarget]]\n- handler: es quien, en caso de definir el m\xe9todo indicado, intercepta la llamada, el representante\n[[ProxyHandler]]\n- proxy: el que compone ambos y delega a uno u otro</p>\n\n<pre><code>const proxy = new Proxy(target, handler); // OK\nvar p = Proxy(target, handler); // TypeError: calling a builtin Proxy constructor without new is forbidden\n</code></pre>\n\n<p>???\nEl m\xe9todo del handler se llama trap.<br />\nEs decir que el proxy &ldquo;wrappea&rdquo; al target.</p>\n\n<hr />\n\n<pre><code>class MyHandler {\n  get(target, key, receiver) {\n    return Reflect[key];\n  }\n}\n</code></pre>\n\n<p>???\nReflect no se puede instanciar, tiene los mismos metodos que el handler, es como Math, todo estatico\nPor ejemplo Reflect.apply es menos verboso que Function.prototype.apply\nAlgunas veces nos da informaci\xf3n adicional como Reflect.set -&gt; [boolean]</p>\n\n<hr />\n\n<p><em>\xbfQue operaciones pueden ser interceptadas?</em><br />\nEsto es selectivo, no se puede interceptar todo o solo las fundamentales como podria suponerse.<br />\nEsto es por dos razones\n- porque una operacion estable corre el riesgo de que un proxy la haga inestable\n- porque tener mucho codigo custom intercalado haria el programa muy dificil de entender y debuggear</p>\n\n<p>???\nejemplo el === que no puede ser trapeada.\nEstable: sin side effects, que produce siempre el mismo resultado ante los mismos argumentos<br />\nSe podr\xeda pensar como que con interceptar s\xf3lo operaciones fundamentales, pero esto no es tan \xfatil ya que no inlcuir\xeda get por ejemplo.\nVer codigo de api client.</p>\n\n<hr />\n\n<p><em>Prototype chain</em><br />\nLos engines en su comportamiento habitual, al subir por el chain, van a disparar las traps que encuentren.<br />\nSin embargo, hay ciertas operaciones que suben por el prototype chain si no encuentran la property en el handler como get, set y has, las demas no alteran el prototype chain.</p>\n\n<p>???\nVer codigo y test de ghost.\nInstanceof &ldquo;lies&rdquo;</p>\n\n<hr />\n\n<p><em>B\xe1sicas</em></p>\n\n<pre><code>defineProperty(target, propKey, propDesc) // \u2192 boolean  (fundamental)\n  // trigger: Object.defineProperty(proxy, propKey, propDesc)\ndeleteProperty(target, propKey) // \u2192 boolean  (fundamental)\n  // trigger: delete proxy[propKey], delete proxy.foo\nget(target, propKey, receiver) // \u2192 any\n  // trigger: receiver[propKey]\n  // trigger: receiver.foo\n</code></pre>\n\n<hr />\n\n<p><em>Casos de uso</em>\n  * API Client\n  * Tracing / Logging\n  * Trap undefined property access\n  * Type check</p>\n\n<p>???\n  Se\xf1alar el tracing puede implementarse cambiando el objeto.\n  Type check example: properties que son &ldquo;fieles&rdquo; a su tipo incial.\n  Ir viendo ejemplos de api client, logging y lock</p>\n\n<hr />\n\n<p><em>Preguntas</em></p>\n\n<hr />\n\n<p><em>Practica 1</em><br />\nHacer &ldquo;trap undefined&rdquo;<br />\n&ldquo;Objeto que tira excepcion cuando se accede a una propiedad undefined&rdquo;\n(30 minutos)</p>\n\n<p>???\nDebe tirar un ReferenceError si no esta. Debe devolver el valor si esta.\nProbar nested with lock.</p>\n\n<hr />\n\n<p><em>Compatibilidad</em>\n* Solo FF, CH, Edge, Opera, Safari 10, Node 6</p>\n\n<p>???\nNo hay polyfill.</p>\n\n<hr />\n\n<p><em>Tipos de proxy</em>\n* Wrappers (solo control) o Virtual Objects (agregan comporamiento)</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Propiedades del proxy</em>\n* Transparencia virtual: no podemos saber si un objeto es un proxy\n* Encapsulamiento: no podemos acceder al handler desde el proxy</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Mas casos de uso</em>\n* DOM\n* Indices negativos de array\n* Data binding (polemico)\n* Profiling\n* RMI</p>\n\n<p>Note:\nDOM: usualmente est\xe1 implementado entre C++ y JS, y el context switch es costoso, lo que nos lleva a querer hacer el dom en js puro, pero hay cosas que no son tan simples de implementar, y ello fue una importante razon para hacer los proxies en JS (dom mas eficiente) y ademas que nos permite emular el browser (jsdom).</p>\n\n<p>Indices negativos como en algunos lenguajes.\nMencionar Object.observe (ES7) creado para binding por la pobre performance de los proxy, aunque abandonado por react.\nObject.observe no es necesario con la inmutabilidad, tratar browser como remote rendering, no storage y query\n(undo, state). Se dice que es lo que queremos, no lo que necesitamos (Stateful dom).\nProfiling para medir tiempo.\nRMI permite por ejemplo db access directo.</p>\n\n<hr />\n\n<p><em>Invariants</em><br />\nSi el target es no extensible y no configurable, lo invariante es forzado por el engine.</p>\n\n<p>???\nno extensible protege objetos, non configurability protege properties.\nCon los proxy se podr\xeda violar la invariabilidad, pero el engine lo prohibe chequeando los parametros y los resultados de los handlers, preventExtension, true y luego false, e igual para isExtensible y getOwnPropertyDescriptor</p>\n\n<hr />\n\n<p><em>Practica 2</em><br />\nMejorar api client<br />\n(30 minutos)</p>\n\n<p>???\nelegir algunos de los TODO</p>\n\n<hr />\n\n<p><em>Avanzadas 1</em></p>\n\n<pre><code>getOwnPropertyDescriptor(target, propKey) // \u2192 PropDesc|Undefined  (fundamental)  \n  // tby: Object.getOwnPropertyDescriptor(proxy, propKey)  \ngetPrototypeOf(target) // \u2192 Object|Null  (fundamental)  \n  // tby: Object.getPrototypeOf(proxy)  \nhas(target, propKey) // \u2192 boolean  \n  // tby: propKey in proxy\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 2</em></p>\n\n<pre><code>isExtensible(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.isExtensible(proxy)  \nownKeys(target) // \u2192 Array&lt;PropertyKey&gt;  (fundamental)  \n  // tby: Object.getOwnPropertyPropertyNames(proxy) (only uses string-valued keys)  \n  // tby: Object.getOwnPropertyPropertySymbols(proxy) (only uses symbol-valued keys)  \n  // tby: Object.keys(proxy) (only uses enumerable string-valued keys;\n  // enumerability is checked via Object.getOwnPropertyDescriptor)\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 3</em></p>\n\n<pre><code>preventExtensions(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.preventExtensions(proxy)  \nset(target, propKey, value, receiver) // \u2192 boolean  \n  // tby: receiver[propKey] = value  \n  // tby: receiver.foo = value // propKey = \'foo\'  \nsetPrototypeOf(target, proto) // \u2192 boolean  (fundamental)  \n  // tby: Object.setPrototypeOf(proxy, proto)\n</code></pre>\n\n<hr />\n\n<p><em>Para funciones</em></p>\n\n<pre><code>apply(target, thisArgument, argumentsList) // \u2192 any  \n  // tby: proxy.apply(thisArgument, argumentsList) (fundamental)  \n  // tby: proxy.call(thisArgument, ...argumentsList)  \n  // tby: proxy(...argumentsList)  \nconstruct(target, argumentsList) // \u2192 Object  \n  // tby: new proxy(..argumentsList)\n</code></pre>\n\n<hr />\n\n<p><em>Conclusion</em><br />\n* Performance\n* Debug\n* Casos de uso\n* Complejidad\n* Compatibilidad</p>\n\n<p>Note:\nPerformance: Conviene medir la performance en cada caso, evaluar que tan critica es la performance en nuestra app y tomar una decision.\nA mas c\xf3digo interceptado, menor performance, mayor dificultad de entender el codigo y de debug.\nRiesgo: podemos &ldquo;romper&rdquo; comportamientos, hacerlo inconsistente\nCasos de uso:</p>\n\n<hr />\n\n<p><em>Preguntas / Discusion / Ideas</em></p>\n\n<hr />\n\n<p>Gracias!</p>\n',Summary:"Proxies en ES6 Agenda Terminolog\xeda Desarrollo Casos de uso Ejercitaci\xf3n Desarrollo Casos de uso Ejercitaci\xf3n Terminolog\xeda \xbfQue es un proxy? Origen: prokecye &ldquo;agency of one who acts instead of another&rdquo; En espa\xf1ol significa apoderado adj. Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre ??? Ejemplo, firmar un poder para hacer un tr\xe1mite \xbfQue es un protocolo? Un protocolo es un conjunto de normas.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#proxies-en-es6">Proxies en ES6</a>\n<ul>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#terminolog\xeda">Terminolog\xeda</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1238,FuzzyWordCount:1300,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"proxies",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}]},Pages:[{Params:{bundle:"default"},Content:"",Summary:"",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:0,FuzzyWordCount:100,ReadingTime:0,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"test",Description:"",Keywords:[],Date:"2017-07-06T20:36:09-03:00",Lastmod:"2017-07-06T20:36:09-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<p><em>Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size</em></p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository.</p>\n\n<p>A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.</p>\n\n<p>Let&rsquo;s start with this.</p>\n\n<h3 id="first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</h3>\n\n<p>Easy, go to <a href="https://www.docker.com/community-edition#/download">https://www.docker.com/community-edition#/download</a>\nChoose your platform AND, because we need multi stage builds and its still on the <em>edge channel</em> we need to choose that instead of the stable channel. Download, install.</p>\n\n<h3 id="second-step-building-a-spa">Second step: Building a SPA</h3>\n\n<p>A single page application is just a static web page that can be served through any traditional web server.</p>\n\n<p>For this example, let&rsquo;s pick a boilerplate SPA like create-react-app.</p>\n\n<pre><code class="language-shell">npm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\nnpm start # if you want to test it and check the browser for it\n</code></pre>\n\n<h3 id="third-step-create-a-dockerfile">Third step: create a Dockerfile</h3>\n\n<p>All right now the important thing, let&rsquo;s take a look at a candidate Dockerfile</p>\n\n<pre><code class="language-docker"># buildtime\nFROM node AS nodebase\nLABEL maintainer &quot;nicosommi@gmail.com&quot;\n\nADD . /usr/src/app\nWORKDIR /usr/src/app\nRUN npm i &amp;&amp; npm run build\n\n# runtime\nFROM nginx:alpine\nCOPY --from=nodebase /usr/src/app/build /usr/share/nginx/html\n</code></pre>\n\n<p>So let&rsquo;s see.</p>\n\n<p>We start with a node:latest image, no problem with the image size because now we have multi stage builds.</p>\n\n<p>The LABEL maintainer, that&rsquo;s recent too, no more MAINTAINER special instruction, now it&rsquo;s a label.</p>\n\n<p>We add the current directory to the appropiate location and set the working directory to it.</p>\n\n<p>Install, build&hellip; and that&rsquo;s all that we need to generate our artifacts in our build folder.</p>\n\n<p>So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.</p>\n\n<p>Done!</p>\n\n<h3 id="fourth-step-build-and-run">Fourth step: build and run!</h3>\n\n<p>So now, let&rsquo;s build the image\n<code>docker build -t my-app .</code></p>\n\n<p>And now let&rsquo;s look it&rsquo;s size\n<code>docker images</code></p>\n\n<p>All right! less than 16 MB! With the whole thing, linux, nginx and our app!</p>\n\n<p>That&rsquo;s great. Just the node_modules folder size after installation is around 130 MB&hellip; so this is a BIG win.</p>\n\n<p>Let&rsquo;s try it<br />\n<code>docker run -d --rm -p 8000:80 --name my-app my-app</code></p>\n\n<p>Open chrome in localhost:8000 and enjoy.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Multi stage builds are great, it let&rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.</p>\n\n<p>By making this clear distinction between different stages, docker let&rsquo;s you think in a more organized way about the Dockerfile.</p>\n\n<p>With multi stage builds the LAST stage is the one that is used on your final image. Don&rsquo;t forget that. <em>For example, the ONBUILD instruction on a previous stage wont have any effect</em> because it will be overwritten with the last stage of the Dockerfile.</p>\n\n<p>As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&rsquo;s really big very quickly.</p>\n\n<p>nicosommi</p>\n',Summary:"Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size Introduction With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository. A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#introduction">Introduction</a>\n<ul>\n<li><a href="#first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</a></li>\n<li><a href="#second-step-building-a-spa">Second step: Building a SPA</a></li>\n<li><a href="#third-step-create-a-dockerfile">Third step: create a Dockerfile</a></li>\n<li><a href="#fourth-step-build-and-run">Fourth step: build and run!</a></li>\n</ul></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:526,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Weekend experiment: a node.js SPA with multi stage builds from docker",Description:"",Keywords:[],Date:"2017-04-29T06:34:58-03:00",Lastmod:"2017-04-29T06:34:58-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/2017-03-25-13-39-09.png" width="400px"></img></p>\n\n<h1 id="docker-secrets">Docker secrets</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda e introducci\xf3n</li>\n<li>Como surgen?</li>\n<li>\xbfQu\xe9 son los secrets?</li>\n<li>\xbfPara que sirven?</li>\n<li>Anotaciones de seguridad</li>\n<li>Detalles de utilizaci\xf3n</li>\n<li>Preparando nuestras im\xe1genes</li>\n<li>Creando un secreto sencillo</li>\n<li>Utilizando secrets con YML&rsquo;s de docker compose</li>\n<li>Usando https con secrets</li>\n<li>Resumen de comandos</li>\n<li>Q &amp; A</li>\n<li>Fin</li>\n</ol>\n\n<hr />\n\n<h2 id="como-surgen">\xbfComo surgen?</h2>\n\n<p>Porque la comunidad toma decisiones heterogeneas y peligrosas:\n- Usar variables de entorno (12 factor app)\n- Variables de entorno en build\n- Manual build (commit)\n- Custom hacks (curl a webserver)\n&hellip; Se necesitan do&rsquo;s and don&rsquo;ts</p>\n\n<p>???\n- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados</p>\n\n<h2 id="hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</h2>\n\n<h2 id="qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</h2>\n\n<p>Para docker es un BLOB de datos manejado de manera centralizada.\n- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan\n- Solo para swarm&hellip; por ahora\n- Hasta 500KB (no TAN large)\n- Por ahora solo para runtime\n<center>\n  <img src="/slide/assets/2017-03-22-21-47-13.png" width="800px"></img>\n</center></p>\n\n<p>???\nBinary Large OBjects\nSecure Sockets Layer (ahora Transport Layer Security)\nSwarmKit es una libreria que se encarga del node management</p>\n\n<h2 id="hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</h2>\n\n<h2 id="para-que-sirven">\xbfPara que sirven?</h2>\n\n<ul>\n<li>Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos&hellip; y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones</li>\n<li>Funciona como capa de abstraccion entre las credenciales y los contenedores</li>\n</ul>\n\n<p>???\n- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido</p>\n\n<hr />\n\n<h2 id="anotaciones-de-seguridad">Anotaciones de seguridad</h2>\n\n<ul>\n<li>Viajan a los managers del swarm por TLS</li>\n<li>Se almacenan en el Raft log, con todo lo que ello nos garantiza (que est\xe1 encriptado y es replicado a trav\xe9s de los managers, garantizando la misma HA que el resto de la informacion del swarm)</li>\n<li>Cuando se detiene un container, se hace unmount y se flushea la memoria</li>\n<li>Si se pierde conexi\xf3n con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucci\xf3n hasta que se vuelva a conectar al swarm<br />\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li>\n</ul>\n\n<p>???\n* Esta encriptado desde la 1.13\n* El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm\n* El &ldquo;Raft log&rdquo; se refiere al consensus algorithm que utiliza swarmkit <em>entre managers</em> para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue dise\xf1ado para ser simple de entender y que m\xe1s sistemas utilizen un buen algoritmo de consenso para ser m\xe1s tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y l\xedderes.\n* Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un l\xedder es elegido. Despu\xe9s hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a>\nTienen un log y una maquina de estados.\nSi una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, tambi\xe9n relegando su liderazgo.</p>\n\n<hr />\n\n<h2 id="detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</h2>\n\n<ul>\n<li>Se montan en /run/secrets/name</li>\n<li>Solo tiene acceso si es un manager o si tiene permisos espec\xedficos</li>\n<li>Se pueden ver, listar los secrets, pero no se puede borrar uno que est\xe1 siendo utilizado, para ello se debe rotar el secret</li>\n<li>Se recomienda poner en el nombre una fecha o numero de version, para hacer m\xe1s sencillo el control</li>\n</ul>\n\n<p>???\n- &ndash;secret source=mysql_password,target=wp_db_password,mode=0400</p>\n\n<hr />\n\n<h2 id="preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</h2>\n\n<ul>\n<li>Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE adem\xe1s de MYSQL_PASSWORD)</li>\n</ul>\n\n<hr />\n\n<h2 id="creando-un-secreto-sencillo">Creando un secreto sencillo</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ openssl rand -base64 20 | docker secret create mi_secreto -\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets\n$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto\n</code></pre>\n\n<p>???\nSi commiteamos el container a una imagen, el secreto es desmontado</p>\n\n<h2 id="si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</h2>\n\n<h2 id="utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</h2>\n\n<pre><code class="language-yaml">version: \'3.1\'\nservices:\n    test:\n        image: \'alpine\'\n        command: \'cat /run/secrets/my_secret\'\n        secrets: \n            - my_secret\nsecrets:\n    my_secret:\n        file: ./mysecret.txt\n        # o external: true para tomarlo del swarm\n</code></pre>\n\n<p>???\nGracias al stack del compose</p>\n\n<h2 id="docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</h2>\n\n<h2 id="usando-https-con-secrets">Usando https con secrets</h2>\n\n<ol>\n<li>Generar certificado con let&rsquo;s encrypt, self-signed u otra CA</li>\n<li>Preparar nginx config</li>\n<li>Preparar secrets en el swarm\n<code>shell\n$ docker secret create site.key site.key\n$ docker secret create site.crt site.crt\n$ docker secret create site.conf site.conf\n</code></li>\n\n<li><p>Crear el servicio</p>\n\n<pre><code class="language-shell">$ docker service create --name nginx --secret site.key \\\n --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \\\n sh -c &quot;ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf &amp;&amp; exec nginx -g \'daemon off;\'&quot;\n</code></pre>\n\n<p>???</p>\n\n<h2 id="daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</h2>\n\n<h2 id="resumen-de-comandos">Resumen de comandos</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ echo &quot;a&quot; | docker secret create mi_secreto -\n$ docker secret inspect mi_secreto\n$ docker secret ls\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker service update mi_servicio --secret-rm mi_secreto\n$ docker service update mi_servicio --secret-add mi_nuevo_secreto\n$ docker secret rm mi_secreto\n</code></pre>\n\n<p>???</p>\n\n<h2 id="aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</h2>\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1></li>\n</ol>\n',Summary:"Docker secrets Por nicosommi name: agenda Agenda Agenda e introducci\xf3n Como surgen? \xbfQu\xe9 son los secrets? \xbfPara que sirven? Anotaciones de seguridad Detalles de utilizaci\xf3n Preparando nuestras im\xe1genes Creando un secreto sencillo Utilizando secrets con YML&rsquo;s de docker compose Usando https con secrets Resumen de comandos Q &amp; A Fin \xbfComo surgen? Porque la comunidad toma decisiones heterogeneas y peligrosas: - Usar variables de entorno (12 factor app) - Variables de entorno en build - Manual build (commit) - Custom hacks (curl a webserver) &hellip; Se necesitan do&rsquo;s and don&rsquo;ts ???",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#docker-secrets">Docker secrets</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#como-surgen">\xbfComo surgen?</a></li>\n<li><a href="#hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</a></li>\n<li><a href="#qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</a></li>\n<li><a href="#hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</a></li>\n<li><a href="#para-que-sirven">\xbfPara que sirven?</a></li>\n<li><a href="#anotaciones-de-seguridad">Anotaciones de seguridad</a></li>\n<li><a href="#detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</a></li>\n<li><a href="#preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</a></li>\n<li><a href="#creando-un-secreto-sencillo">Creando un secreto sencillo</a></li>\n<li><a href="#si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</a></li>\n<li><a href="#utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</a></li>\n<li><a href="#docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</a></li>\n<li><a href="#usando-https-con-secrets">Usando https con secrets</a></li>\n<li><a href="#daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</a></li>\n<li><a href="#resumen-de-comandos">Resumen de comandos</a></li>\n<li><a href="#aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:990,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker secrets",Description:"",Keywords:[],Date:"2017-03-29T15:38:10-03:00",Lastmod:"2017-03-29T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="scripts">Scripts</h1>\n\n<h2 id="problema">Problema</h2>\n\n<p>Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.\nUno de estos problemas, una vez elegidos los paquetes, es armar una serie de scripts que nos brinden todas las tareas que necesitamos.\nEnumerando, en escenarios tipicos necesitamos minimamente:\n- test\n- test watch\n- test con reporte de coverage completo\n- test watch con un reporte de coverage completo\n- start con live reload\n- start\n- lint\n- build (transpilacion, webpack, etc)\n- &hellip;etc&hellip; (chequeo de dependencias, )</p>\n\n<p>De proyecto en proyecto, cambiando clientes, equipos, lenguajes, estandares, y otras cosas, cambian las estructuras del proyecto, la ubicacion de los archivos, los frameworks, las costumbres, y muchas otras cosas mas.\nSin embargo, estos scripts, aunque cambian ligeramente, siempre estan, y si no estan, estaria bien que estuviesen, lo cual es un punto muy importante, ya que algunas veces esto nos lleva a tener menos &ldquo;comodidades&rdquo; para producir codigo de calidad.\nEste problema es el que vengo enfrentando una vez tras otra, y ya he probado varias alternativas:</p>\n\n<h2 id="intento-1-grunt-gulp">Intento 1: grunt/gulp</h2>\n\n<p>Grunt y gulp, para un recien iniciado, significa produccion rapida. Son sencillos de aprender y nos permiten realizar cosas relativamente complejas con dependencias entre tareas que ejecutan scripts.<br />\nSin embargo, a mi personalmente no me gusta la dependencia que se genera con dichos frameworks que a mi criterio, resuelven las cosas de una manera que no es la optima.<br />\nUno termina sospechando que con npm y sus scripts deberia ser suficiente. Nos queda el sabor de que son sobre disenos para la mayoria de los casos.</p>\n\n<h2 id="intento-2-npm-suelto">Intento 2: npm suelto</h2>\n\n<p>Luego del intento anterior, y con el criterio de utilizar lo que es realmente necesario, uno intenta sacarle el maximo provecho a npm. Esto es realmente muy sencillo y funciona muy bien.\nSimplemente agregamos scripts y combinamos comandos o llamamos a otros scripts.\nEsto sin embargo tiene una dependencia implicita: el sistema operativo. Muchos comandos son particulares de UNIX y no funcionan en Windows.</p>\n\n<h2 id="intento-3-makefile">Intento 3: makefile</h2>\n\n<p>Es una alternativa interesante, muy util, mucho mas performante que un manejador de dependencias en javascript, y mas sencillo tambien, aunque suele asustar a mucha gente.<br />\nLo cierto es que resuelve el core de grunt/gulp y nos permite luego hacer lo que queramos.<br />\nEs una de las mejores a mi parecer, y si bien no muchos la eligen, he visto varios projectos con su Makefile.</p>\n\n<p>En este post quiero probar dos ideas que aun no he visto por alli:</p>\n\n<h2 id="idea-1-shelljs">Idea 1: shelljs</h2>\n\n<p>Esta idea consiste en llamar, desde npm, a scripts que son una secuencia de comandos en shelljs.\nShell.js para quienes no la conocen es una libreria con una implementacion de POSIX en javascript. Es decir que con esto podemos utilizar comandos que funcionaran tambien en windows.\nUna solucion sencilla y eficaz.\nVeamos como seria un proyecto sencillo.</p>\n\n<h2 id="idea-2-docker">Idea 2: docker</h2>\n\n<p>Esta vez, yendo un paso mas alla, cada comando de npm podria correr en un contenedor efimero que utilice siempre la misma plataforma, por ejemplo un alpine linux o un ubuntu.\nEsto tiene la ventaja de utilizar los comandos del shell que mas nos guste, y del sistema operativo de nuestra preferencia.\nLa implementacion sin embargo nos genera una dependencia: docker.\nPersonalmente creo que docker debe estar instalado en todas las computadoras, ya que es el futuro&hellip; (en realidad ya es el presente) por lo que para mis proyectos no lo considero un impedimento.\nAdemas de la dependencia, hay una minima complejidad en la implementacion: se requiere un conocimiento de docker.\nAunque para esto ultimo, he desarrollado un paquete.\nVeamos como seria un ejemplo sin dicho paquete:\nY ahora uno utilizando este paquete:</p>\n\n<h2 id="un-poco-de-mi-historia">Un poco de mi historia</h2>\n\n<p>Cuando arranque con node.js, alla por el 2012, npm fue una las primeras cosas con las que tuve contacto al poco tiempo.<br />\nEs el lugar donde convergen los paquetes de la comunidad. Tan fuerte era dicho lazo que pronto npm se introdujo en node y ahora forma parte del mismo paquete.\nCasi automaticamente, y un poco agnostico de npm, adopte soluciones parecidas a mis experiencias previas en java (maven y ant).</p>\n\n\x3c!--\n<resumen />\n- npm suelto\n- grunt/gulp\n- npm suelto\n- shelljs\n- docker\n--\x3e\n',Summary:"Scripts Problema Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#scripts">Scripts</a>\n<ul>\n<li><a href="#problema">Problema</a></li>\n<li><a href="#intento-1-grunt-gulp">Intento 1: grunt/gulp</a></li>\n<li><a href="#intento-2-npm-suelto">Intento 2: npm suelto</a></li>\n<li><a href="#intento-3-makefile">Intento 3: makefile</a></li>\n<li><a href="#idea-1-shelljs">Idea 1: shelljs</a></li>\n<li><a href="#idea-2-docker">Idea 2: docker</a></li>\n<li><a href="#un-poco-de-mi-historia">Un poco de mi historia</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:765,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"scripts",Description:"",Keywords:[],Date:"2017-01-27T18:54:15-03:00",Lastmod:"2017-01-27T18:54:15-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/docker-74de8.png" width="400px"></img></p>\n\n<h1 id="introduccion-a-docker">Introduccion a docker</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda y alcance</li>\n<li>Fundamentos</li>\n<li>Casos de uso</li>\n<li>Por dentro</li>\n<li>Componentes</li>\n<li>Ejemplo sencillo</li>\n<li>Q &amp; A</li>\n<li>Mas componentes</li>\n<li>Comandos sobre contenedores e im\xe1genes</li>\n<li>Ejemplo lateral</li>\n<li>T\xe9cnica para construir un Dockerfile</li>\n<li>Buenas pr\xe1cticas</li>\n<li>Docker para SPA, web apps, etc</li>\n<li>Anexo: Services</li>\n<li>Q &amp; A</li>\n</ol>\n\n<hr />\n\n<p>class: center</p>\n\n<h2 id="que-es">Que es?</h2>\n\n<p><center>\n  <img src="/assets/docker-89c82.png" width="400px"></img>\n</center></p>\n\n<p>???\nDisculpen el teclado en ingles</p>\n\n<hr />\n\n<ul>\n<li>T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.</li>\n<li>Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.</li>\n<li>UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios</li>\n<li>Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)\n<center>\n<img src="/assets/docker-28b55.png" width="300px"></img>\n</center></li>\n</ul>\n\n<hr />\n\n<p>class: right\n<img style="position: absolute" src="/assets/docker-04a7d.png" width="200px"></img></p>\n\n<h2 id="es-una-maquina-virtual-no">Es una maquina virtual? No.</h2>\n\n<h2 id="como-se-diferencia-de-una">Como se diferencia de una?</h2>\n\n<hr />\n\n<p>Se diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.\n<center>\n  <img src="/assets/history.png" width="600px"></img>\n</center>\n???\nComentar:\n* historia\n* primero escalabilidad horizontal\n* despues optimizar recursos\n* adicionales: docker swarm independiente\nNos permite cambiar la unidad de medida de nuestra aplicaci\xf3n de m\xe1quinas virtuales o f\xedsicas a simples containers.</p>\n\n<hr />\n\n<h2 id="en-donde-corre">En donde corre?</h2>\n\n<p>En sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).\nTambien, recientemente incorporaron contenedores basados en windows server.\n<center>\n  <img src="/assets/platforms.png" width="400px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-6a999.png" width="100px"></img>\n</div></p>\n\n<h2 id="nbsp-para-que-sirve">&nbsp;Para que sirve?</h2>\n\n<p>Para isolar el entorno de ejecuci\xf3n de una aplicaci\xf3n.</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/pencil.png" width="80px"></img>\n</div></p>\n\n<h2 id="nbsp-datos">&nbsp;Datos</h2>\n\n<ul>\n<li>Es open source desde el 2013.</li>\n<li>Esta escrito en go.</li>\n<li>Lo comenz\xf3 Solomon Hykes en dotCloud.</li>\n</ul>\n\n<p>???\nGo esta pensado para concurrencia y productividad y tiene garbage collection</p>\n\n<hr />\n\n<h2 id="casos-de-uso">Casos de uso</h2>\n\n<p><img src="/assets/usecases.png" width="90%"></img>\n???\nInvitar a sugerir ideas u opinar sobre las mencionadas\nTexto:\n* CI/CD\n* Entornos de desarrollo\n* Compilar para distintos targets\n* PaaS\n* Escalabilidad horizontal\n* High availability cluster\n* Aislar ejecucion de codigo de manera segura (webpackbin, etc)\n* Aprendizaje/investigacion\n* Etc&hellip;</p>\n\n<hr />\n\n<h2 id="por-dentro">Por dentro</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="140px"></img>\n</div></p>\n\n<h2 id="nbsp-docker-image">&nbsp;Docker Image</h2>\n\n<ul>\n<li>Es un template con instrucciones para la construccion de contenedores</li>\n<li>Tiene una o varias capas de solo lectura a partir del cual se crean contenedores</li>\n<li>Se pueden extender o empezar de cero</li>\n<li>Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile</li>\n<li>El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.</li>\n<li>Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-container">Docker Container</h2>\n\n<ul>\n<li>Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.</li>\n<li>Contiene una fina capa adicional a las de su imagen con permisos de escritura.</li>\n<li>Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.</li>\n<li>Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.\n<center>\n<img src="/assets/docker-bb91f.png" width="300px"></img>\n</center></li>\n</ul>\n\n<p>???\nPreguntar diferencia entre contenedor e imagen y clarificar dudas</p>\n\n<hr />\n\n<h2 id="acerca-del-contenedor">Acerca del Contenedor</h2>\n\n<p>Previamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).\n<center>\n  <img src="/assets/docker-71f58.png" width="240px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-1c5ae.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-storage">&nbsp;Storage</h2>\n\n<ul>\n<li>Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor</li>\n<li>Docker utiliza &lsquo;copy on write&rsquo;, es decir que copia una capa s\xf3lo cuando la va a cambiar, lo que permite optimizar el tama\xf1o en disco ocupado por la imagen y el tiempo de arranque de los contenedores.</li>\n<li>Toda la data de imagenes y contenedores se guarda en una carpeta.</li>\n<li>Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir seg\xfan caso de uso, experiencia del equipo y linux distro.</li>\n</ul>\n\n<hr />\n\n<h2 id="componentes">Componentes</h2>\n\n<hr />\n\n<h2 id="docker-engine">Docker Engine</h2>\n\n<p>Aplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.\n<img src="/assets/docker-9cf40.png" alt="Docker engine" /></p>\n\n<hr />\n\n<h2 id="machine">Machine</h2>\n\n<ul>\n<li>Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.</li>\n<li>Nos deja instalar docker en terminales remotas y provisionar swarms.\n<img src="/assets/docker-7ada0.png" width="95%"></img>\n???\nPermite especificar drivers para distintos providers</li>\n</ul>\n\n<hr />\n\n<h2 id="compose">Compose</h2>\n\n<p>Es una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.\n* Detecta cambios y recrea solo lo necesario\n* Soporta variables en el compose file\n* Guarda la data persistida en los volumes\n* Es muy util para entornos de desarrollo, para deployment en un solo host\n<center>\n  <img src="/assets/docker-32d4f.png" width="200px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/ubuntu.png" width="50px"></img>\n</div></p>\n\n<h2 id="nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</h2>\n\n<pre><code class="language-bash">$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash\nroot@3883936319fb:/# lsb_release -a\n(...) Description:\tUbuntu 14.04.5 LTS (...)\n</code></pre>\n\n<ol>\n<li>Trae la ultima imagen, o si ya existe la utiliza.</li>\n<li>Crea, en base a la imagen, un contenedor.</li>\n<li>Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.</li>\n<li>Asigna una interfaz de red con la cual habla con el host</li>\n<li>Setea una IP de una pool</li>\n<li>Ejecuta el proceso solicitado (/bin/bash)</li>\n<li>Captura y devuelve el output del contenedor por haber indicado -it</li>\n</ol>\n\n<p>???\ni es para el interactive mode, que deja el stdin esperando\nt asigna un pseudo tty / pty\n* pull\n* hablar de pull y de los otros parametros como name, port, volume</p>\n\n<hr />\n\n<h2 id="wordpress">Wordpress</h2>\n\n<pre>\n  <code class="bash hljs remark-code remark-code-line" style="font-size: 13px;">\n  version: \'2\'\n\n  services:\n     db:\n       image: mysql:5.7\n       volumes:\n         - "./.data/db:/var/lib/mysql"\n       restart: always\n       environment: (...)\n\n     wordpress:\n       depends_on:\n         - db\n       image: wordpress:latest\n       links:\n         - db\n       ports:\n         - "8000:80"\n       restart: always\n       environment: (...)\n  </code>\n</pre>\n\n<p>???\nEnvironment est\xe1 cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la p\xe1gina oficial</p>\n\n<hr />\n\n<h1 id="q-a-parcial">Q &amp; A Parcial</h1>\n\n<hr />\n\n<h2 id="docker-registry">Docker Registry</h2>\n\n<ul>\n<li>Es una libreria de imagenes.</li>\n<li>Puede ser publico o privado.</li>\n<li>Una vez construida la imagen, hacemos un push al registry</li>\n<li>Docker hub es un registry publico oficial</li>\n<li>Hay una imagen publica registry y una para el trusted registry\n<center>\n<img src="/assets/docker-89504.png" width="240px"></img>\n</center>\n???\nTrusted registry es con soporte comercial</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volumes">Data volumes</h2>\n\n<ul>\n<li>Encontrar\n<code>bash\n$ docker inspect myContainer\n</code></li>\n<li>Se pueden crear vol\xfamenes o montar desde el host\n<code>bash\n$ docker run -d -P --name web -v /webapp myImage npm start\n$ docker run -d -P --name web -v /src:/webapp myImage npm start\n</code>\n???</li>\n<li>bypass a unionfs</li>\n<li>si no esta bindeado a host, copia el contenido adentro</li>\n<li>permite compartir entre containers con compose o con named volumes (flocker por ejemplo)</li>\n<li>esta dise\xf1ado para cambiar el container y que la data persista, incluso aunque ningun container la referencie</li>\n<li>soporta SCSI, NFS, etc.</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volume-containers">Data volume containers</h2>\n\n<ul>\n<li><em><a href="/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/">Es una pr\xe1ctica</a></em> que consiste en crear un contenedor que s\xf3lo contiene data que luego ser\xe1 utilizada por otros contenedores\n<code>bash\n$ docker create -v /dbdata --name mydb postgres /bin/true\n$ docker run -d --volumes-from mydb --name db1 postgres\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="network">Network</h2>\n\n<ul>\n<li>Puede ser bridge, none  y host\n<code>bash\n$ docker network ls\n</code></li>\n<li>Pueden verse los detalles\n<code>bash\n$ docker network inspect bridge\n</code></li>\n<li>Se pueden crear nuestras redes en las cuales correr containers\n???</li>\n<li>un container puede pertenecer a varias redes</li>\n<li>se ven entre los de la misma red</li>\n<li>puede ser overlay (swarm mode) o custom driver</li>\n<li>embedded dns en custom networks</li>\n<li>antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-aplicado">Docker Aplicado</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-28b55.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</h2>\n\n<ul>\n<li><p>Run, Start, Stop</p>\n\n<pre><code class="language-bash"># crea un contenedor en base a una imagen y corre el comando bash\n$ docker run --name miContenedor alpine echo &quot;Hola&quot;\n# arrancar un contenedor ya creado\n$ docker start miContenedor\n# parar contenedor con time to kill\n$ docker stop -t 10 miContenedor\n# also valid: docker restart -t 10 miContenedor\n</code></pre></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Listar, Inspeccionar\n<code>bash\n$ docker rm miContenedor\n$ docker ps\n$ docker ps --all\n$ docker inspect miContenedor\n</code></li>\n</ul>\n\n<p>???\n* hablar de se\xf1ales y su relacion con stop</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</h2>\n\n<ul>\n<li>Cargar, Listar, Inspeccionar\n<code>bash\n$ docker pull repo/image:tag\n$ docker load -i imagen.tar\n$ docker images\n$ docker inspect alpine\n</code></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Construir, Taggear, Subir\n<code>bash\n$ docker rmi repo/image:tag\n$ docker build -t image-name .\n$ docker tag image-name repo/image-name:tag\n$ docker push repo/image-name:tag\n</code></li>\n</ul>\n\n<p>???\n* es necesario un docker login myrepo:2376</p>\n\n<hr />\n\n<h2 id="ejemplo-existente">Ejemplo existente</h2>\n\n<pre><code class="language-bash">$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc\n</code></pre>\n\n<p><center>\n  <img src="/assets/vncffox.png" width="200px"></img>\n</center></p>\n\n<p>???\nLuego con un cliente vnc accedemos a un lxde con firefox instalado</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-08dc8.png" width="45px"></img>\n</div></p>\n\n<h2 id="nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</h2>\n\n<ol>\n<li>Se inicia un shell sobre una imagen base\n<code>bash\n$ docker run -it --name testC ubuntu sh\n</code></li>\n<li>Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile</li>\n</ol>\n\n<p>???\n- tar\n- scratch image (reserved word)\n- <em>history</em> de image\n- <em>commit</em> del container como no recomendada mas que para pruebas y debugging</p>\n\n<hr />\n\n<h2 id="debug">Debug</h2>\n\n<p>a. Entramos a un contenedor corriendo</p>\n\n<pre><code class="language-bash"># otra alternativa, tomar una\n$ docker exec -it nignxTest /bin/bash\n</code></pre>\n\n<p>b. Miramos los logs conectados</p>\n\n<pre><code class="language-bash">docker logs nginxTest\n</code></pre>\n\n<hr />\n\n<h2 id="buenas-pr\xe1cticas">Buenas pr\xe1cticas</h2>\n\n<ul>\n<li>Containers lo m\xe1s prescindibles posibles</li>\n<li>Usar .dockerignore</li>\n<li>Evitar instalar paquetes innecesarios</li>\n<li>Correr un s\xf3lo proceso por container</li>\n<li>Minimizar la cantidad de capas</li>\n<li>Organizar argumentos y comandos de multiples lineas con <br /></li>\n<li>Contemplar el build cache\n<center>\n<img src="/assets/docker-d0772.png" width="50%"></img>\n</center></li>\n</ul>\n\n<p>???\n* prescindible = efimero = pueden ser parados, destruidos y reemplazados\n* usar cache o no\n* el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente\n* una vez invalidado, ya no se utiliza para las subsecuentes capas</p>\n\n<hr />\n\n<h2 id="ejemplos-docker-para-web">Ejemplos docker para web</h2>\n\n<hr />\n\n<h2 id="spa-build">SPA build</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nADD . /src\nWORKDIR /src\nRUN rm -fR ./node_modules &amp;&amp; \\\n  npm i\nENTRYPOINT [&quot;npm&quot;, &quot;build&quot;]\n</code></pre>\n\n<p>???\nHay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el \xb4shell\xb4 form que hace &ldquo;/bin/sh -c&rdquo; lo que oculta se\xf1ales por ejemplo docker stop)\n&ndash;entrypoint overrides\n* tiene que haber al menos un cmd o entrypoint\n* entrypoint para ejecutables\n* cmd es mas para preparar parametros</p>\n\n<hr />\n\n<h2 id="spa-serve">SPA serve</h2>\n\n<pre><code class="language-Dockerfile">version: \'2\'\nservices:\n  spa:\n    image: nginx\n    volumes:\n      - &quot;.:/usr/share/nginx/html:ro&quot;\n    ports:\n      - &quot;10000:80&quot;\n</code></pre>\n\n<hr />\n\n<h2 id="api">API</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nEXPOSE 3000\nADD . /src\nWORKDIR /src\nRUN npm rebuild &amp;&amp; \\\n  npm test\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre>\n\n<p>???\nHay muchas alternativas, hay una tarea de dise\xf1o impl\xedcita</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-32d4f.png" width="50px"></img>\n</div>\n##&nbsp; Compose</p>\n\n<pre><code class="language-Dockerfile"># docker-compose.yml just for api\nversion: \'2\'\nservices:\n  api:\n    image: mirepo.com/api-image:production\n    ports:\n      - &quot;3000:3000&quot;\n    depends_on:\n      - mongo\n    environment:\n      PORT: 3000\n  mongo:\n    image: mongo\n    ports:\n      - &quot;27017:27017&quot;\n    volumes:\n      - ./mongodata:/data/db\n</code></pre>\n\n<p>???</p>\n\n<h2 id="links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</h2>\n\n<h2 id="comandos-para-compose">Comandos para compose</h2>\n\n<ul>\n<li>Correr, Parar, Borrar\n<code>bash\n$ docker-compose up -d\n$ docker-compose stop -t 10\n$ docker-compose rm\n$ docker-compose --help\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="anexo-docker-services">Anexo: Docker services</h2>\n\n<p>Es una abstracci\xf3n de los contenedores.\n* Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien\n* Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos\n* Para el cliente, el servicio luce como un docker daemon regular\n* Los servicios son los que brindan escalabilidad y flexibilidad de updates\n???\nswarm = el plural de docker nodes&hellip; manada/multitud/enjambre/nube\n* temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc</p>\n\n<hr />\n\n<h2 id="operaciones-con-services">Operaciones con services</h2>\n\n<pre><code class="language-bash">$ docker service create \\\n  --name my-service \\\n  --replicas 3 \\\n  nginx:alpine\n\n$ docker-compose scale service-name=2\n</code></pre>\n\n<p>???\n* services global/replicated</p>\n\n<hr />\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1>\n',Summary:"Introduccion a docker Por nicosommi name: agenda Agenda Agenda y alcance Fundamentos Casos de uso Por dentro Componentes Ejemplo sencillo Q &amp; A Mas componentes Comandos sobre contenedores e im\xe1genes Ejemplo lateral T\xe9cnica para construir un Dockerfile Buenas pr\xe1cticas Docker para SPA, web apps, etc Anexo: Services Q &amp; A class: center Que es? ??? Disculpen el teclado en ingles T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#introduccion-a-docker">Introduccion a docker</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#que-es">Que es?</a></li>\n<li><a href="#es-una-maquina-virtual-no">Es una maquina virtual? No.</a></li>\n<li><a href="#como-se-diferencia-de-una">Como se diferencia de una?</a></li>\n<li><a href="#en-donde-corre">En donde corre?</a></li>\n<li><a href="#nbsp-para-que-sirve">&nbsp;Para que sirve?</a></li>\n<li><a href="#nbsp-datos">&nbsp;Datos</a></li>\n<li><a href="#casos-de-uso">Casos de uso</a></li>\n<li><a href="#por-dentro">Por dentro</a></li>\n<li><a href="#nbsp-docker-image">&nbsp;Docker Image</a></li>\n<li><a href="#docker-container">Docker Container</a></li>\n<li><a href="#acerca-del-contenedor">Acerca del Contenedor</a></li>\n<li><a href="#nbsp-storage">&nbsp;Storage</a></li>\n<li><a href="#componentes">Componentes</a></li>\n<li><a href="#docker-engine">Docker Engine</a></li>\n<li><a href="#machine">Machine</a></li>\n<li><a href="#compose">Compose</a></li>\n<li><a href="#nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</a></li>\n<li><a href="#wordpress">Wordpress</a></li>\n</ul></li>\n<li><a href="#q-a-parcial">Q &amp; A Parcial</a>\n<ul>\n<li><a href="#docker-registry">Docker Registry</a></li>\n<li><a href="#data-volumes">Data volumes</a></li>\n<li><a href="#data-volume-containers">Data volume containers</a></li>\n<li><a href="#network">Network</a></li>\n<li><a href="#docker-aplicado">Docker Aplicado</a></li>\n<li><a href="#nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</a></li>\n<li><a href="#nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</a></li>\n<li><a href="#ejemplo-existente">Ejemplo existente</a></li>\n<li><a href="#nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</a></li>\n<li><a href="#debug">Debug</a></li>\n<li><a href="#buenas-pr\xe1cticas">Buenas pr\xe1cticas</a></li>\n<li><a href="#ejemplos-docker-para-web">Ejemplos docker para web</a></li>\n<li><a href="#spa-build">SPA build</a></li>\n<li><a href="#spa-serve">SPA serve</a></li>\n<li><a href="#api">API</a></li>\n<li><a href="#links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</a></li>\n<li><a href="#comandos-para-compose">Comandos para compose</a></li>\n<li><a href="#anexo-docker-services">Anexo: Docker services</a></li>\n<li><a href="#operaciones-con-services">Operaciones con services</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1863,FuzzyWordCount:1900,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="proxies-en-es6">Proxies en ES6</h1>\n\n<hr />\n\n<h2 id="agenda">Agenda</h2>\n\n<p><small>\n  Terminolog\xeda<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n</small></p>\n\n<hr />\n\n<h2 id="terminolog\xeda">Terminolog\xeda</h2>\n\n<hr />\n\n<p>\xbfQue es un proxy?<br />\nOrigen: <em>prokecye</em><br />\n  &ldquo;agency of one who acts instead of another&rdquo;<br />\nEn espa\xf1ol significa <em>apoderado</em><br />\n  <em>adj.</em> Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre</p>\n\n<p>???\nEjemplo, firmar un poder para hacer un tr\xe1mite</p>\n\n<hr />\n\n<p>\xbfQue es un protocolo?<br />\nUn <em>protocolo</em> es un conjunto de normas. Esto podria verse como un conjunto interfaces con reglas para usarlas, y ECMAScript define un protocolo para manejar objetos. Este protocolo opera a nivel Meta.</p>\n\n<p>???\nLa definici\xf3n no es la misma que suele utilizarse de protocolos para interfaces de otros lenguajes porque tambi\xe9n incluye reglas.</p>\n\n<hr />\n\n<p><em>Metaprogramming</em><br />\nEn la programaci\xf3n hay niveles base y meta. El nivel base procesa el input del usuario, mientras que el meta procesa al base.</p>\n\n<p>???\nPueden incluso ser dos lenguajes distintos.\nEn es como los closures, los usamos sin saber.\nHay unos que usamos constantemente: Object.*</p>\n\n<hr />\n\n<p><em>Meta Object Protocol</em>  es como se lo llama al protocolo de manejo de objetos de ECMAScript. Como particularidad, son internos (no son accesibles desde JS). Los engines pueden usarlos o no.</p>\n\n<hr />\n\n<ul>\n<li>Los metodos de un objeto del MOP llaman operaciones del engine, algunas que llaman a otras como [[Get]], que se llaman <em>operaciones derivadas</em> y las que son independientes, que se llaman <em>operaciones fundamentales</em>.<br /></li>\n</ul>\n\n<p>???\nEjemplo [[Get]] usa getOwnProperty, getPrototypeOf y Call</p>\n\n<hr />\n\n<p><em>Tipos de metaprogramming</em><br />\n- Introspection: permite s\xf3lo leer la estructura\n- Self-modification: permite modificar la estructura\n- Intercession: redefine la semantica de algunas operaciones</p>\n\n<p>???\nEjemplos Object.keys, moveProperty, proxy respectivamente</p>\n\n<hr />\n\n<p><em>Elementos del proxy</em><br />\n- target: es el fallback del handler, el representado\n[[ProxyTarget]]\n- handler: es quien, en caso de definir el m\xe9todo indicado, intercepta la llamada, el representante\n[[ProxyHandler]]\n- proxy: el que compone ambos y delega a uno u otro</p>\n\n<pre><code>const proxy = new Proxy(target, handler); // OK\nvar p = Proxy(target, handler); // TypeError: calling a builtin Proxy constructor without new is forbidden\n</code></pre>\n\n<p>???\nEl m\xe9todo del handler se llama trap.<br />\nEs decir que el proxy &ldquo;wrappea&rdquo; al target.</p>\n\n<hr />\n\n<pre><code>class MyHandler {\n  get(target, key, receiver) {\n    return Reflect[key];\n  }\n}\n</code></pre>\n\n<p>???\nReflect no se puede instanciar, tiene los mismos metodos que el handler, es como Math, todo estatico\nPor ejemplo Reflect.apply es menos verboso que Function.prototype.apply\nAlgunas veces nos da informaci\xf3n adicional como Reflect.set -&gt; [boolean]</p>\n\n<hr />\n\n<p><em>\xbfQue operaciones pueden ser interceptadas?</em><br />\nEsto es selectivo, no se puede interceptar todo o solo las fundamentales como podria suponerse.<br />\nEsto es por dos razones\n- porque una operacion estable corre el riesgo de que un proxy la haga inestable\n- porque tener mucho codigo custom intercalado haria el programa muy dificil de entender y debuggear</p>\n\n<p>???\nejemplo el === que no puede ser trapeada.\nEstable: sin side effects, que produce siempre el mismo resultado ante los mismos argumentos<br />\nSe podr\xeda pensar como que con interceptar s\xf3lo operaciones fundamentales, pero esto no es tan \xfatil ya que no inlcuir\xeda get por ejemplo.\nVer codigo de api client.</p>\n\n<hr />\n\n<p><em>Prototype chain</em><br />\nLos engines en su comportamiento habitual, al subir por el chain, van a disparar las traps que encuentren.<br />\nSin embargo, hay ciertas operaciones que suben por el prototype chain si no encuentran la property en el handler como get, set y has, las demas no alteran el prototype chain.</p>\n\n<p>???\nVer codigo y test de ghost.\nInstanceof &ldquo;lies&rdquo;</p>\n\n<hr />\n\n<p><em>B\xe1sicas</em></p>\n\n<pre><code>defineProperty(target, propKey, propDesc) // \u2192 boolean  (fundamental)\n  // trigger: Object.defineProperty(proxy, propKey, propDesc)\ndeleteProperty(target, propKey) // \u2192 boolean  (fundamental)\n  // trigger: delete proxy[propKey], delete proxy.foo\nget(target, propKey, receiver) // \u2192 any\n  // trigger: receiver[propKey]\n  // trigger: receiver.foo\n</code></pre>\n\n<hr />\n\n<p><em>Casos de uso</em>\n  * API Client\n  * Tracing / Logging\n  * Trap undefined property access\n  * Type check</p>\n\n<p>???\n  Se\xf1alar el tracing puede implementarse cambiando el objeto.\n  Type check example: properties que son &ldquo;fieles&rdquo; a su tipo incial.\n  Ir viendo ejemplos de api client, logging y lock</p>\n\n<hr />\n\n<p><em>Preguntas</em></p>\n\n<hr />\n\n<p><em>Practica 1</em><br />\nHacer &ldquo;trap undefined&rdquo;<br />\n&ldquo;Objeto que tira excepcion cuando se accede a una propiedad undefined&rdquo;\n(30 minutos)</p>\n\n<p>???\nDebe tirar un ReferenceError si no esta. Debe devolver el valor si esta.\nProbar nested with lock.</p>\n\n<hr />\n\n<p><em>Compatibilidad</em>\n* Solo FF, CH, Edge, Opera, Safari 10, Node 6</p>\n\n<p>???\nNo hay polyfill.</p>\n\n<hr />\n\n<p><em>Tipos de proxy</em>\n* Wrappers (solo control) o Virtual Objects (agregan comporamiento)</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Propiedades del proxy</em>\n* Transparencia virtual: no podemos saber si un objeto es un proxy\n* Encapsulamiento: no podemos acceder al handler desde el proxy</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Mas casos de uso</em>\n* DOM\n* Indices negativos de array\n* Data binding (polemico)\n* Profiling\n* RMI</p>\n\n<p>Note:\nDOM: usualmente est\xe1 implementado entre C++ y JS, y el context switch es costoso, lo que nos lleva a querer hacer el dom en js puro, pero hay cosas que no son tan simples de implementar, y ello fue una importante razon para hacer los proxies en JS (dom mas eficiente) y ademas que nos permite emular el browser (jsdom).</p>\n\n<p>Indices negativos como en algunos lenguajes.\nMencionar Object.observe (ES7) creado para binding por la pobre performance de los proxy, aunque abandonado por react.\nObject.observe no es necesario con la inmutabilidad, tratar browser como remote rendering, no storage y query\n(undo, state). Se dice que es lo que queremos, no lo que necesitamos (Stateful dom).\nProfiling para medir tiempo.\nRMI permite por ejemplo db access directo.</p>\n\n<hr />\n\n<p><em>Invariants</em><br />\nSi el target es no extensible y no configurable, lo invariante es forzado por el engine.</p>\n\n<p>???\nno extensible protege objetos, non configurability protege properties.\nCon los proxy se podr\xeda violar la invariabilidad, pero el engine lo prohibe chequeando los parametros y los resultados de los handlers, preventExtension, true y luego false, e igual para isExtensible y getOwnPropertyDescriptor</p>\n\n<hr />\n\n<p><em>Practica 2</em><br />\nMejorar api client<br />\n(30 minutos)</p>\n\n<p>???\nelegir algunos de los TODO</p>\n\n<hr />\n\n<p><em>Avanzadas 1</em></p>\n\n<pre><code>getOwnPropertyDescriptor(target, propKey) // \u2192 PropDesc|Undefined  (fundamental)  \n  // tby: Object.getOwnPropertyDescriptor(proxy, propKey)  \ngetPrototypeOf(target) // \u2192 Object|Null  (fundamental)  \n  // tby: Object.getPrototypeOf(proxy)  \nhas(target, propKey) // \u2192 boolean  \n  // tby: propKey in proxy\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 2</em></p>\n\n<pre><code>isExtensible(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.isExtensible(proxy)  \nownKeys(target) // \u2192 Array&lt;PropertyKey&gt;  (fundamental)  \n  // tby: Object.getOwnPropertyPropertyNames(proxy) (only uses string-valued keys)  \n  // tby: Object.getOwnPropertyPropertySymbols(proxy) (only uses symbol-valued keys)  \n  // tby: Object.keys(proxy) (only uses enumerable string-valued keys;\n  // enumerability is checked via Object.getOwnPropertyDescriptor)\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 3</em></p>\n\n<pre><code>preventExtensions(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.preventExtensions(proxy)  \nset(target, propKey, value, receiver) // \u2192 boolean  \n  // tby: receiver[propKey] = value  \n  // tby: receiver.foo = value // propKey = \'foo\'  \nsetPrototypeOf(target, proto) // \u2192 boolean  (fundamental)  \n  // tby: Object.setPrototypeOf(proxy, proto)\n</code></pre>\n\n<hr />\n\n<p><em>Para funciones</em></p>\n\n<pre><code>apply(target, thisArgument, argumentsList) // \u2192 any  \n  // tby: proxy.apply(thisArgument, argumentsList) (fundamental)  \n  // tby: proxy.call(thisArgument, ...argumentsList)  \n  // tby: proxy(...argumentsList)  \nconstruct(target, argumentsList) // \u2192 Object  \n  // tby: new proxy(..argumentsList)\n</code></pre>\n\n<hr />\n\n<p><em>Conclusion</em><br />\n* Performance\n* Debug\n* Casos de uso\n* Complejidad\n* Compatibilidad</p>\n\n<p>Note:\nPerformance: Conviene medir la performance en cada caso, evaluar que tan critica es la performance en nuestra app y tomar una decision.\nA mas c\xf3digo interceptado, menor performance, mayor dificultad de entender el codigo y de debug.\nRiesgo: podemos &ldquo;romper&rdquo; comportamientos, hacerlo inconsistente\nCasos de uso:</p>\n\n<hr />\n\n<p><em>Preguntas / Discusion / Ideas</em></p>\n\n<hr />\n\n<p>Gracias!</p>\n',Summary:"Proxies en ES6 Agenda Terminolog\xeda Desarrollo Casos de uso Ejercitaci\xf3n Desarrollo Casos de uso Ejercitaci\xf3n Terminolog\xeda \xbfQue es un proxy? Origen: prokecye &ldquo;agency of one who acts instead of another&rdquo; En espa\xf1ol significa apoderado adj. Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre ??? Ejemplo, firmar un poder para hacer un tr\xe1mite \xbfQue es un protocolo? Un protocolo es un conjunto de normas.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#proxies-en-es6">Proxies en ES6</a>\n<ul>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#terminolog\xeda">Terminolog\xeda</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1238,FuzzyWordCount:1300,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"proxies",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="organize-your-thunks">Organize your thunks</h1>\n',Summary:"Organize your thunks",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#organize-your-thunks">Organize your thunks</a></li>\n</ul>\n</nav>',Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:3,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"tpipe redux",Description:"",Keywords:[],Date:"2016-10-05T17:14:32-03:00",Lastmod:"2016-10-05T17:14:32-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="react-native-en-ubuntu">React Native en Ubuntu</h1>\n\n<p>Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.</p>\n\n<h2 id="porque">Porque?</h2>\n\n<p>Como tengo cierto pasado en Java y Android, luego de unos intentos entend\xed lo que estaba sucediendo y lo hice funcionar en Ubuntu, pero como tengo tangos colegas que no pueden hacerlo funcionar y tampoco tienen una Mac, comparto el procedimiento con el mundo.</p>\n\n<h2 id="conociendo-los-elementos">Conociendo los elementos</h2>\n\n<p>Antes de ir elemento por elemento cabe destacar que si bien los componentes del SDK de android tienen una interfaz de usuario y vienen con su IDE oficial, tambi\xe9n se pueden utilizar por consola. Muchas instrucciones andan por ah\xed insistiendo en abrir este eclipse custom para acceder a las herramientas y esto no es la \xfanica opci\xf3n y para nada conveniente para un desarrollador javascript que suele utilizar Atom, Webstorm, Sublime o algo as\xed.</p>\n\n<h3 id="sdk">SDK</h3>\n\n<h3 id="driver">Driver</h3>\n\n<h3 id="emulador">Emulador</h3>\n\n<h3 id="dispositivo">Dispositivo</h3>\n\n<h2 id="comando-a-comando">Comando a comando</h2>\n\n<h2 id="entendiendo-todo">Entendiendo todo</h2>\n',Summary:"React Native en Ubuntu Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#react-native-en-ubuntu">React Native en Ubuntu</a>\n<ul>\n<li><a href="#porque">Porque?</a></li>\n<li><a href="#conociendo-los-elementos">Conociendo los elementos</a>\n<ul>\n<li><a href="#sdk">SDK</a></li>\n<li><a href="#driver">Driver</a></li>\n<li><a href="#emulador">Emulador</a></li>\n<li><a href="#dispositivo">Dispositivo</a></li>\n</ul></li>\n<li><a href="#comando-a-comando">Comando a comando</a></li>\n<li><a href="#entendiendo-todo">Entendiendo todo</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:225,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"react native ubuntu",Description:"",Keywords:[],Date:"2016-10-05T16:00:55-03:00",Lastmod:"2016-10-05T16:00:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="container-os">Container OS</h1>\n\n<p>En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto.</p>\n\n<p>Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.</p>\n\n<p><em>El futuro de los sistemas operativos son los contenedores para correr cualquier aplicaci\xf3n.</em></p>\n\n<p>Cuando uno comienza a jugar con Docker se empieza a dar cuenta de que puede ejecutar algo con un entorno controlado en cualquier otro entorno host. Podemos correr un apache en ubuntu dentro de un windows o de otro ubuntu. O un nginx en un coreos dentro de una mac. Otro ejemplo, se puede compilar un programa en go lang para cualquier plataforma desde un ubuntu sin siquiera instalar go. Una locura. Realmente.</p>\n\n<p>Esto en mi caso me hizo relacionarlo con el furor de las api rest con las que lidio d\xeda a d\xeda y con los procesos en s\xed mismos.</p>\n\n<p>Por otro lado pens\xe9 en los problemas que enfrentan el SO y los programas en cuanto a todo lo compartido entre procesos, memoria, puertos, archivos, etc.</p>\n\n<p>Todo esto fu\xe9 solucionado del lado de las aplicaciones y del SO con mucho esfuerzo en el tiempo y con desarrollos y configuraciones cuidadosas. Y fu\xe9 muy fruct\xedfero&hellip; pero con Docker todo esto sera mas sencillo.</p>\n\n<p><em>Ya no tendr\xe1 sentido tener windows, ubuntu, u OSX. Todo correr\xe1 en contenedores con su SO y su entorno optimo y controlado y el SO host decidir\xe1 que comparte con \xe9l. Los sistemas operativos ser\xe1n minimos y meros manejadores del engine de contenedores que solo tendran lo necesario para que este funcione.</em></p>\n\n<p>Las aplicaciones nativas careceran de sentido ya que vendran con su sistema operativo incorporado. Las ventanas seran simples consolas de los contenedores. La escalabilidad ser\xe1 natural. El hardware estar\xe1 finalmente desacoplado de las aplicaciones.</p>\n',Summary:"Container OS En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto. Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#container-os">Container OS</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:362,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"container os",Description:"",Keywords:[],Date:"2016-09-19T20:10:55-03:00",Lastmod:"2016-09-19T20:10:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="manejando-multiples-repositorios">Manejando multiples repositorios</h1>\n\n<h2 id="submodulos-con-git">Submodulos con git</h2>\n\n<p>Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias.</p>\n\n<p>El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.</p>\n\n<p>Las necesidades son:\n- Crear un repo que contenga a los demas (contenedor / workspace)\n- Hacer un pull de todos juntos de ser necesario</p>\n\n<h3 id="agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</h3>\n\n<p>Ahora tenemos que ir agregando nuestros repos como subm\xf3dulos.</p>\n\n<pre><code class="language-bash">git submodule add [repourl]\n</code></pre>\n\n<p>Cabe destacar que cada submodulo es un repo independiente cuando estamos dentro de el, pero en lugar de creat una carpeta .git, se crear\xe1 un archivo .git que tendr\xe1 el path a la carpeta .git del repositorio que lo contiene.\nPor otro lado, en el repositorio contenedor, se genera un archivo .gitmodules que nos dice los m\xf3dulos que este repositorio contiene.</p>\n\n<p>Nota: este archivo .gitmodules, si bien puede parecer redundante ya que est\xe1n los m\xf3dulos en la carpeta .git, es muy importante ya que al estar en el control de versiones nos permite sacar provecho de clonar a la vez muchos repositorios en el caso de uso que perseguimos aqu\xed.</p>\n\n<p>Una vez tenemos todos los repositorios agregados, comiteamos y pusheamos normalmente en el repositorio contenedor.</p>\n\n<h2 id="clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</h2>\n\n<p>Si bien la diferencia es ligera, me he topado con que git no hace nada si simplemente actualizamos en un repositorio que a\xfan no ha inicializado sus subm\xf3dulos, por ende luego del est\xe1ndar <code>git clone</code>, debemos inicializar los subm\xf3dulos de manera expl\xedcita:</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --init --recursive\n# just one\ngit submodule update --init path/to/subm\n</code></pre>\n\n<h2 id="update-de-submodulos">Update de submodulos</h2>\n\n<p>Si ya inicializamos nuestros submodulos aunque sea una vez, basta con lo siguiente</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --recursive\n# particular submodule\ngit submodule update path/to/subm\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Esto realmente es muy util, no solo por el batch update, sino porque al clonar el contenedor en una maquina, al inicializar nos puede traer los N repositorios de ese workspace, ahorrandonos muchos comandos git clone.\nUna vez que comenzas con esta practica, se convierte en un must-do rapidamente.</p>\n',Summary:"Manejando multiples repositorios Submodulos con git Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias. El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#manejando-multiples-repositorios">Manejando multiples repositorios</a>\n<ul>\n<li><a href="#submodulos-con-git">Submodulos con git</a>\n<ul>\n<li><a href="#agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</a></li>\n</ul></li>\n<li><a href="#clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</a></li>\n<li><a href="#update-de-submodulos">Update de submodulos</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:392,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"submodules",Description:"",Keywords:[],Date:"2016-09-19T14:54:14-03:00",Lastmod:"2016-09-19T14:54:14-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</h1>\n\n<p>En estos dias me puse como meta rehacer mi blog.\nPara esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts.</p>\n\n<p>Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.</p>\n\n<p>Dejar wordpress no es una tarea sencilla, ya que es una excelente plataforma, con la cual se puede hacer practicamente todo y de una manera muy sencilla. Desde SEO, pasando por analytics, infinitos temas, infinitos plugins, responsive design&hellip; en definitiva, un monton de cosas.</p>\n\n<p>Pero necesito algo mas orientado al desarrollador y no tanto a una persona &ldquo;normal&rdquo;.\nAsi que empece a buscar&hellip; y encontre gohugo, un framework hecho en golang que nos permite hacer nuestro sitio de una manera muy sencilla.</p>\n\n<p>Hugo me atrajo por diversos motivos. Me permite utilizar mi github page, con lo cual en una de esas me ahorro unos pesos de hosting, es muy personalizable (soporta arquetipos, temas, y muchas cosas mas), y es muy rapido, y cuando digo muy rapido no exagero&hellip; golang le da esa ventaja sobre por ejemplo ghost (otra platforma de blog un poco mas simple que wordpress hecha en nodejs, muy buena tambien por cierto&hellip;).</p>\n\n<p>Un tema que me jugaba en contra en Hugo era el hecho de que, al usar mi github page para el blog, la cual es open source y esta en una pagina de github, los drafts iban a quedar implicitamente publicos, y la verdad no es algo que me parezca muy adecuado.</p>\n\n<p>Asi que pense que como desarrollador y aficionado a unix esto lo podia resolver facilmente, y cree unos sencillos shell scripts para encriptar y desencriptar los drafts de manera simple y segura utilizando un archivo de key que poseo en otro repositorio que es privado.</p>\n\n<p>Quiero compartir el proceso de configuracion de un blog publico y gratis, ya que me parece interesante.\n- Primero cree un repositorio privado (se consiguen infinitos en gitlab y en bitbucket)\n- Clonamos el repo como de costumbre</p>\n\n<pre><code class="language-bash">git clone [url del repo privado]\n</code></pre>\n\n<ul>\n<li>Se agrega nuestro repo de github page como submodulo (el mio por ejemplo es git@github.com:nicosommi/nicosommi.github.io.git)\n<code>bash\ngit submodule add [url del repo del blog]\n</code></li>\n<li>Se agrega un archivo key en dicho repo parent con un contenido que servira para encriptar y desencriptar nuestros drafts</li>\n<li>Se hacen o se copian los scripts de encripcion y desencription (se pueden tomar <a href="https://github.com/nicosommi/nicosommi.github.io">de aqui</a> tal como yo los utilizo, son los archivos ddrafts.sh y edrafts.sh para desencriptar y encriptar respectivamente, notar que requieren el paquete gpg de linux o <a href="#" title="brew install -v gpg">de osx</a>)</li>\n<li>Se agrega al gitignore la carpeta de draft originales para que no vayan al repo (tambien se puede ver del <a href="https://github.com/nicosommi/nicosommi.github.io">repo de este blog</a>)</li>\n<li>Opcionalmente se puede agregar un pre commit hook para que agregue el archivo encriptado en los commits\n<code>bash\necho &quot;#\\!/usr/bin/env bash\\n./ddrafts.sh\\ngit add drafts.contents\\n&quot; &gt; ../.git/modules/nicosommi.github.io/hooks/pre-commit\n</code></li>\n</ul>\n',Summary:"Haciendo un blog con gohugo En estos dias me puse como meta rehacer mi blog. Para esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts. Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:513,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"gohugo",Description:"",Keywords:[],Date:"2016-09-18T12:16:51-03:00",Lastmod:"2016-09-18T12:16:51-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico"},Content:'<p>Please don&rsquo;t ask me for my CV and see my social profiles instead (<a href="https://www.linkedin.com/in/nicosommi/">linkedin</a>, <a href="https://github.com/nicosommi">github</a>, <a href="https://stackoverflow.com/users/1015217/nico">stackoverflow</a>).</p>\n\n<p>And if you want to contact me, send a message to <a href="maito:nicosommi@gmail.com" title="nicosommi@gmail.com">nicosommi@gmail.com</a></p>\n\n<p><a href="https://flattr.com/submit/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F" target="_blank"><img src="//button.flattr.com/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></p>\n\n<p>&nbsp;</p>\n',Summary:"Please don&rsquo;t ask me for my CV and see my social profiles instead (linkedin, github, stackoverflow). And if you want to contact me, send a message to nicosommi@gmail.com &nbsp;",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"page",WordCount:29,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Resume/Acerca de mi",Description:"",Keywords:[],Date:"2013-04-11T22:27:04Z",Lastmod:"2013-04-11T22:27:04Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:"sitemap.xml"},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}],Files:[{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}}],Menus:{},Hugo:null,Title:"nicosommi",RSSLink:"http://localhost:1313/index.xml",Author:{},LanguageCode:"es-AR",DisqusShortname:"",GoogleAnalytics:"",Copyright:"",LastChange:"2017-07-06T20:36:09-03:00",Permalinks:{},Params:{description:"a developer's blog",disqusShortname:"nicosommi",google_analytics:"UA-44929876-1",ignoreFiles:["\\.gitignore\\*$","\\*drafts\\*$"],slideDescription:"slide",theme:"hugo-nicosommi"},BuildDrafts:!0,Data:{translations:{"en-US":{hello:"hello"},"es-AR":{hello:"hola"}}}}}},function(e,o){e.exports={app:{Params:{},Content:'\n\n<p><em>Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size</em></p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository.</p>\n\n<p>A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.</p>\n\n<p>Let&rsquo;s start with this.</p>\n\n<h3 id="first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</h3>\n\n<p>Easy, go to <a href="https://www.docker.com/community-edition#/download">https://www.docker.com/community-edition#/download</a>\nChoose your platform AND, because we need multi stage builds and its still on the <em>edge channel</em> we need to choose that instead of the stable channel. Download, install.</p>\n\n<h3 id="second-step-building-a-spa">Second step: Building a SPA</h3>\n\n<p>A single page application is just a static web page that can be served through any traditional web server.</p>\n\n<p>For this example, let&rsquo;s pick a boilerplate SPA like create-react-app.</p>\n\n<pre><code class="language-shell">npm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\nnpm start # if you want to test it and check the browser for it\n</code></pre>\n\n<h3 id="third-step-create-a-dockerfile">Third step: create a Dockerfile</h3>\n\n<p>All right now the important thing, let&rsquo;s take a look at a candidate Dockerfile</p>\n\n<pre><code class="language-docker"># buildtime\nFROM node AS nodebase\nLABEL maintainer &quot;nicosommi@gmail.com&quot;\n\nADD . /usr/src/app\nWORKDIR /usr/src/app\nRUN npm i &amp;&amp; npm run build\n\n# runtime\nFROM nginx:alpine\nCOPY --from=nodebase /usr/src/app/build /usr/share/nginx/html\n</code></pre>\n\n<p>So let&rsquo;s see.</p>\n\n<p>We start with a node:latest image, no problem with the image size because now we have multi stage builds.</p>\n\n<p>The LABEL maintainer, that&rsquo;s recent too, no more MAINTAINER special instruction, now it&rsquo;s a label.</p>\n\n<p>We add the current directory to the appropiate location and set the working directory to it.</p>\n\n<p>Install, build&hellip; and that&rsquo;s all that we need to generate our artifacts in our build folder.</p>\n\n<p>So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.</p>\n\n<p>Done!</p>\n\n<h3 id="fourth-step-build-and-run">Fourth step: build and run!</h3>\n\n<p>So now, let&rsquo;s build the image\n<code>docker build -t my-app .</code></p>\n\n<p>And now let&rsquo;s look it&rsquo;s size\n<code>docker images</code></p>\n\n<p>All right! less than 16 MB! With the whole thing, linux, nginx and our app!</p>\n\n<p>That&rsquo;s great. Just the node_modules folder size after installation is around 130 MB&hellip; so this is a BIG win.</p>\n\n<p>Let&rsquo;s try it<br />\n<code>docker run -d --rm -p 8000:80 --name my-app my-app</code></p>\n\n<p>Open chrome in localhost:8000 and enjoy.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Multi stage builds are great, it let&rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.</p>\n\n<p>By making this clear distinction between different stages, docker let&rsquo;s you think in a more organized way about the Dockerfile.</p>\n\n<p>With multi stage builds the LAST stage is the one that is used on your final image. Don&rsquo;t forget that. <em>For example, the ONBUILD instruction on a previous stage wont have any effect</em> because it will be overwritten with the last stage of the Dockerfile.</p>\n\n<p>As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&rsquo;s really big very quickly.</p>\n\n<p>nicosommi</p>\n',Summary:"Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size Introduction With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository. A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#introduction">Introduction</a>\n<ul>\n<li><a href="#first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</a></li>\n<li><a href="#second-step-building-a-spa">Second step: Building a SPA</a></li>\n<li><a href="#third-step-create-a-dockerfile">Third step: create a Dockerfile</a></li>\n<li><a href="#fourth-step-build-and-run">Fourth step: build and run!</a></li>\n</ul></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:526,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Weekend experiment: a node.js SPA with multi stage builds from docker",Description:"",Keywords:[],Date:"2017-04-29T06:34:58-03:00",Lastmod:"2017-04-29T06:34:58-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"http://localhost:1313/post/node-artifacts/",Slug:"",Section:"",IsHome:!1},site:{BaseURL:"http://localhost:1313/",Taxonomies:{categories:{english:[{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"espa\xf1ol":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],experiences:[{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],experiencias:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],gdd:[{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}}],ideas:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],integration:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],technology:[{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],tecnicos:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],world:[{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1}}]},series:{},tags:{containers:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],debug:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],docker:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],javascript:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],js:[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],linuxkit:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],moby:[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"node.js":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],only:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"operative-systems":[{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],"tibco-business-works-designer-json-rest-esb":[{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],volume:[{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}}]}},Authors:null,Social:{},Sections:{draft:[{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="scripts">Scripts</h1>\n\n<h2 id="problema">Problema</h2>\n\n<p>Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.\nUno de estos problemas, una vez elegidos los paquetes, es armar una serie de scripts que nos brinden todas las tareas que necesitamos.\nEnumerando, en escenarios tipicos necesitamos minimamente:\n- test\n- test watch\n- test con reporte de coverage completo\n- test watch con un reporte de coverage completo\n- start con live reload\n- start\n- lint\n- build (transpilacion, webpack, etc)\n- &hellip;etc&hellip; (chequeo de dependencias, )</p>\n\n<p>De proyecto en proyecto, cambiando clientes, equipos, lenguajes, estandares, y otras cosas, cambian las estructuras del proyecto, la ubicacion de los archivos, los frameworks, las costumbres, y muchas otras cosas mas.\nSin embargo, estos scripts, aunque cambian ligeramente, siempre estan, y si no estan, estaria bien que estuviesen, lo cual es un punto muy importante, ya que algunas veces esto nos lleva a tener menos &ldquo;comodidades&rdquo; para producir codigo de calidad.\nEste problema es el que vengo enfrentando una vez tras otra, y ya he probado varias alternativas:</p>\n\n<h2 id="intento-1-grunt-gulp">Intento 1: grunt/gulp</h2>\n\n<p>Grunt y gulp, para un recien iniciado, significa produccion rapida. Son sencillos de aprender y nos permiten realizar cosas relativamente complejas con dependencias entre tareas que ejecutan scripts.<br />\nSin embargo, a mi personalmente no me gusta la dependencia que se genera con dichos frameworks que a mi criterio, resuelven las cosas de una manera que no es la optima.<br />\nUno termina sospechando que con npm y sus scripts deberia ser suficiente. Nos queda el sabor de que son sobre disenos para la mayoria de los casos.</p>\n\n<h2 id="intento-2-npm-suelto">Intento 2: npm suelto</h2>\n\n<p>Luego del intento anterior, y con el criterio de utilizar lo que es realmente necesario, uno intenta sacarle el maximo provecho a npm. Esto es realmente muy sencillo y funciona muy bien.\nSimplemente agregamos scripts y combinamos comandos o llamamos a otros scripts.\nEsto sin embargo tiene una dependencia implicita: el sistema operativo. Muchos comandos son particulares de UNIX y no funcionan en Windows.</p>\n\n<h2 id="intento-3-makefile">Intento 3: makefile</h2>\n\n<p>Es una alternativa interesante, muy util, mucho mas performante que un manejador de dependencias en javascript, y mas sencillo tambien, aunque suele asustar a mucha gente.<br />\nLo cierto es que resuelve el core de grunt/gulp y nos permite luego hacer lo que queramos.<br />\nEs una de las mejores a mi parecer, y si bien no muchos la eligen, he visto varios projectos con su Makefile.</p>\n\n<p>En este post quiero probar dos ideas que aun no he visto por alli:</p>\n\n<h2 id="idea-1-shelljs">Idea 1: shelljs</h2>\n\n<p>Esta idea consiste en llamar, desde npm, a scripts que son una secuencia de comandos en shelljs.\nShell.js para quienes no la conocen es una libreria con una implementacion de POSIX en javascript. Es decir que con esto podemos utilizar comandos que funcionaran tambien en windows.\nUna solucion sencilla y eficaz.\nVeamos como seria un proyecto sencillo.</p>\n\n<h2 id="idea-2-docker">Idea 2: docker</h2>\n\n<p>Esta vez, yendo un paso mas alla, cada comando de npm podria correr en un contenedor efimero que utilice siempre la misma plataforma, por ejemplo un alpine linux o un ubuntu.\nEsto tiene la ventaja de utilizar los comandos del shell que mas nos guste, y del sistema operativo de nuestra preferencia.\nLa implementacion sin embargo nos genera una dependencia: docker.\nPersonalmente creo que docker debe estar instalado en todas las computadoras, ya que es el futuro&hellip; (en realidad ya es el presente) por lo que para mis proyectos no lo considero un impedimento.\nAdemas de la dependencia, hay una minima complejidad en la implementacion: se requiere un conocimiento de docker.\nAunque para esto ultimo, he desarrollado un paquete.\nVeamos como seria un ejemplo sin dicho paquete:\nY ahora uno utilizando este paquete:</p>\n\n<h2 id="un-poco-de-mi-historia">Un poco de mi historia</h2>\n\n<p>Cuando arranque con node.js, alla por el 2012, npm fue una las primeras cosas con las que tuve contacto al poco tiempo.<br />\nEs el lugar donde convergen los paquetes de la comunidad. Tan fuerte era dicho lazo que pronto npm se introdujo en node y ahora forma parte del mismo paquete.\nCasi automaticamente, y un poco agnostico de npm, adopte soluciones parecidas a mis experiencias previas en java (maven y ant).</p>\n\n\x3c!--\n<resumen />\n- npm suelto\n- grunt/gulp\n- npm suelto\n- shelljs\n- docker\n--\x3e\n',Summary:"Scripts Problema Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#scripts">Scripts</a>\n<ul>\n<li><a href="#problema">Problema</a></li>\n<li><a href="#intento-1-grunt-gulp">Intento 1: grunt/gulp</a></li>\n<li><a href="#intento-2-npm-suelto">Intento 2: npm suelto</a></li>\n<li><a href="#intento-3-makefile">Intento 3: makefile</a></li>\n<li><a href="#idea-1-shelljs">Idea 1: shelljs</a></li>\n<li><a href="#idea-2-docker">Idea 2: docker</a></li>\n<li><a href="#un-poco-de-mi-historia">Un poco de mi historia</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:765,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"scripts",Description:"",Keywords:[],Date:"2017-01-27T18:54:15-03:00",Lastmod:"2017-01-27T18:54:15-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="organize-your-thunks">Organize your thunks</h1>\n',Summary:"Organize your thunks",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#organize-your-thunks">Organize your thunks</a></li>\n</ul>\n</nav>',Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:3,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"tpipe redux",Description:"",Keywords:[],Date:"2016-10-05T17:14:32-03:00",Lastmod:"2016-10-05T17:14:32-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="react-native-en-ubuntu">React Native en Ubuntu</h1>\n\n<p>Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.</p>\n\n<h2 id="porque">Porque?</h2>\n\n<p>Como tengo cierto pasado en Java y Android, luego de unos intentos entend\xed lo que estaba sucediendo y lo hice funcionar en Ubuntu, pero como tengo tangos colegas que no pueden hacerlo funcionar y tampoco tienen una Mac, comparto el procedimiento con el mundo.</p>\n\n<h2 id="conociendo-los-elementos">Conociendo los elementos</h2>\n\n<p>Antes de ir elemento por elemento cabe destacar que si bien los componentes del SDK de android tienen una interfaz de usuario y vienen con su IDE oficial, tambi\xe9n se pueden utilizar por consola. Muchas instrucciones andan por ah\xed insistiendo en abrir este eclipse custom para acceder a las herramientas y esto no es la \xfanica opci\xf3n y para nada conveniente para un desarrollador javascript que suele utilizar Atom, Webstorm, Sublime o algo as\xed.</p>\n\n<h3 id="sdk">SDK</h3>\n\n<h3 id="driver">Driver</h3>\n\n<h3 id="emulador">Emulador</h3>\n\n<h3 id="dispositivo">Dispositivo</h3>\n\n<h2 id="comando-a-comando">Comando a comando</h2>\n\n<h2 id="entendiendo-todo">Entendiendo todo</h2>\n',Summary:"React Native en Ubuntu Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#react-native-en-ubuntu">React Native en Ubuntu</a>\n<ul>\n<li><a href="#porque">Porque?</a></li>\n<li><a href="#conociendo-los-elementos">Conociendo los elementos</a>\n<ul>\n<li><a href="#sdk">SDK</a></li>\n<li><a href="#driver">Driver</a></li>\n<li><a href="#emulador">Emulador</a></li>\n<li><a href="#dispositivo">Dispositivo</a></li>\n</ul></li>\n<li><a href="#comando-a-comando">Comando a comando</a></li>\n<li><a href="#entendiendo-todo">Entendiendo todo</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:225,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"react native ubuntu",Description:"",Keywords:[],Date:"2016-10-05T16:00:55-03:00",Lastmod:"2016-10-05T16:00:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="container-os">Container OS</h1>\n\n<p>En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto.</p>\n\n<p>Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.</p>\n\n<p><em>El futuro de los sistemas operativos son los contenedores para correr cualquier aplicaci\xf3n.</em></p>\n\n<p>Cuando uno comienza a jugar con Docker se empieza a dar cuenta de que puede ejecutar algo con un entorno controlado en cualquier otro entorno host. Podemos correr un apache en ubuntu dentro de un windows o de otro ubuntu. O un nginx en un coreos dentro de una mac. Otro ejemplo, se puede compilar un programa en go lang para cualquier plataforma desde un ubuntu sin siquiera instalar go. Una locura. Realmente.</p>\n\n<p>Esto en mi caso me hizo relacionarlo con el furor de las api rest con las que lidio d\xeda a d\xeda y con los procesos en s\xed mismos.</p>\n\n<p>Por otro lado pens\xe9 en los problemas que enfrentan el SO y los programas en cuanto a todo lo compartido entre procesos, memoria, puertos, archivos, etc.</p>\n\n<p>Todo esto fu\xe9 solucionado del lado de las aplicaciones y del SO con mucho esfuerzo en el tiempo y con desarrollos y configuraciones cuidadosas. Y fu\xe9 muy fruct\xedfero&hellip; pero con Docker todo esto sera mas sencillo.</p>\n\n<p><em>Ya no tendr\xe1 sentido tener windows, ubuntu, u OSX. Todo correr\xe1 en contenedores con su SO y su entorno optimo y controlado y el SO host decidir\xe1 que comparte con \xe9l. Los sistemas operativos ser\xe1n minimos y meros manejadores del engine de contenedores que solo tendran lo necesario para que este funcione.</em></p>\n\n<p>Las aplicaciones nativas careceran de sentido ya que vendran con su sistema operativo incorporado. Las ventanas seran simples consolas de los contenedores. La escalabilidad ser\xe1 natural. El hardware estar\xe1 finalmente desacoplado de las aplicaciones.</p>\n',Summary:"Container OS En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto. Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#container-os">Container OS</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:362,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"container os",Description:"",Keywords:[],Date:"2016-09-19T20:10:55-03:00",Lastmod:"2016-09-19T20:10:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="manejando-multiples-repositorios">Manejando multiples repositorios</h1>\n\n<h2 id="submodulos-con-git">Submodulos con git</h2>\n\n<p>Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias.</p>\n\n<p>El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.</p>\n\n<p>Las necesidades son:\n- Crear un repo que contenga a los demas (contenedor / workspace)\n- Hacer un pull de todos juntos de ser necesario</p>\n\n<h3 id="agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</h3>\n\n<p>Ahora tenemos que ir agregando nuestros repos como subm\xf3dulos.</p>\n\n<pre><code class="language-bash">git submodule add [repourl]\n</code></pre>\n\n<p>Cabe destacar que cada submodulo es un repo independiente cuando estamos dentro de el, pero en lugar de creat una carpeta .git, se crear\xe1 un archivo .git que tendr\xe1 el path a la carpeta .git del repositorio que lo contiene.\nPor otro lado, en el repositorio contenedor, se genera un archivo .gitmodules que nos dice los m\xf3dulos que este repositorio contiene.</p>\n\n<p>Nota: este archivo .gitmodules, si bien puede parecer redundante ya que est\xe1n los m\xf3dulos en la carpeta .git, es muy importante ya que al estar en el control de versiones nos permite sacar provecho de clonar a la vez muchos repositorios en el caso de uso que perseguimos aqu\xed.</p>\n\n<p>Una vez tenemos todos los repositorios agregados, comiteamos y pusheamos normalmente en el repositorio contenedor.</p>\n\n<h2 id="clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</h2>\n\n<p>Si bien la diferencia es ligera, me he topado con que git no hace nada si simplemente actualizamos en un repositorio que a\xfan no ha inicializado sus subm\xf3dulos, por ende luego del est\xe1ndar <code>git clone</code>, debemos inicializar los subm\xf3dulos de manera expl\xedcita:</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --init --recursive\n# just one\ngit submodule update --init path/to/subm\n</code></pre>\n\n<h2 id="update-de-submodulos">Update de submodulos</h2>\n\n<p>Si ya inicializamos nuestros submodulos aunque sea una vez, basta con lo siguiente</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --recursive\n# particular submodule\ngit submodule update path/to/subm\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Esto realmente es muy util, no solo por el batch update, sino porque al clonar el contenedor en una maquina, al inicializar nos puede traer los N repositorios de ese workspace, ahorrandonos muchos comandos git clone.\nUna vez que comenzas con esta practica, se convierte en un must-do rapidamente.</p>\n',Summary:"Manejando multiples repositorios Submodulos con git Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias. El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#manejando-multiples-repositorios">Manejando multiples repositorios</a>\n<ul>\n<li><a href="#submodulos-con-git">Submodulos con git</a>\n<ul>\n<li><a href="#agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</a></li>\n</ul></li>\n<li><a href="#clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</a></li>\n<li><a href="#update-de-submodulos">Update de submodulos</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:392,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"submodules",Description:"",Keywords:[],Date:"2016-09-19T14:54:14-03:00",Lastmod:"2016-09-19T14:54:14-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</h1>\n\n<p>En estos dias me puse como meta rehacer mi blog.\nPara esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts.</p>\n\n<p>Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.</p>\n\n<p>Dejar wordpress no es una tarea sencilla, ya que es una excelente plataforma, con la cual se puede hacer practicamente todo y de una manera muy sencilla. Desde SEO, pasando por analytics, infinitos temas, infinitos plugins, responsive design&hellip; en definitiva, un monton de cosas.</p>\n\n<p>Pero necesito algo mas orientado al desarrollador y no tanto a una persona &ldquo;normal&rdquo;.\nAsi que empece a buscar&hellip; y encontre gohugo, un framework hecho en golang que nos permite hacer nuestro sitio de una manera muy sencilla.</p>\n\n<p>Hugo me atrajo por diversos motivos. Me permite utilizar mi github page, con lo cual en una de esas me ahorro unos pesos de hosting, es muy personalizable (soporta arquetipos, temas, y muchas cosas mas), y es muy rapido, y cuando digo muy rapido no exagero&hellip; golang le da esa ventaja sobre por ejemplo ghost (otra platforma de blog un poco mas simple que wordpress hecha en nodejs, muy buena tambien por cierto&hellip;).</p>\n\n<p>Un tema que me jugaba en contra en Hugo era el hecho de que, al usar mi github page para el blog, la cual es open source y esta en una pagina de github, los drafts iban a quedar implicitamente publicos, y la verdad no es algo que me parezca muy adecuado.</p>\n\n<p>Asi que pense que como desarrollador y aficionado a unix esto lo podia resolver facilmente, y cree unos sencillos shell scripts para encriptar y desencriptar los drafts de manera simple y segura utilizando un archivo de key que poseo en otro repositorio que es privado.</p>\n\n<p>Quiero compartir el proceso de configuracion de un blog publico y gratis, ya que me parece interesante.\n- Primero cree un repositorio privado (se consiguen infinitos en gitlab y en bitbucket)\n- Clonamos el repo como de costumbre</p>\n\n<pre><code class="language-bash">git clone [url del repo privado]\n</code></pre>\n\n<ul>\n<li>Se agrega nuestro repo de github page como submodulo (el mio por ejemplo es git@github.com:nicosommi/nicosommi.github.io.git)\n<code>bash\ngit submodule add [url del repo del blog]\n</code></li>\n<li>Se agrega un archivo key en dicho repo parent con un contenido que servira para encriptar y desencriptar nuestros drafts</li>\n<li>Se hacen o se copian los scripts de encripcion y desencription (se pueden tomar <a href="https://github.com/nicosommi/nicosommi.github.io">de aqui</a> tal como yo los utilizo, son los archivos ddrafts.sh y edrafts.sh para desencriptar y encriptar respectivamente, notar que requieren el paquete gpg de linux o <a href="#" title="brew install -v gpg">de osx</a>)</li>\n<li>Se agrega al gitignore la carpeta de draft originales para que no vayan al repo (tambien se puede ver del <a href="https://github.com/nicosommi/nicosommi.github.io">repo de este blog</a>)</li>\n<li>Opcionalmente se puede agregar un pre commit hook para que agregue el archivo encriptado en los commits\n<code>bash\necho &quot;#\\!/usr/bin/env bash\\n./ddrafts.sh\\ngit add drafts.contents\\n&quot; &gt; ../.git/modules/nicosommi.github.io/hooks/pre-commit\n</code></li>\n</ul>\n',Summary:"Haciendo un blog con gohugo En estos dias me puse como meta rehacer mi blog. Para esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts. Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:513,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"gohugo",Description:"",Keywords:[],Date:"2016-09-18T12:16:51-03:00",Lastmod:"2016-09-18T12:16:51-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],post:[{Weight:0,Page:{Params:{},Content:'\n\n<p><em>Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size</em></p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository.</p>\n\n<p>A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.</p>\n\n<p>Let&rsquo;s start with this.</p>\n\n<h3 id="first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</h3>\n\n<p>Easy, go to <a href="https://www.docker.com/community-edition#/download">https://www.docker.com/community-edition#/download</a>\nChoose your platform AND, because we need multi stage builds and its still on the <em>edge channel</em> we need to choose that instead of the stable channel. Download, install.</p>\n\n<h3 id="second-step-building-a-spa">Second step: Building a SPA</h3>\n\n<p>A single page application is just a static web page that can be served through any traditional web server.</p>\n\n<p>For this example, let&rsquo;s pick a boilerplate SPA like create-react-app.</p>\n\n<pre><code class="language-shell">npm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\nnpm start # if you want to test it and check the browser for it\n</code></pre>\n\n<h3 id="third-step-create-a-dockerfile">Third step: create a Dockerfile</h3>\n\n<p>All right now the important thing, let&rsquo;s take a look at a candidate Dockerfile</p>\n\n<pre><code class="language-docker"># buildtime\nFROM node AS nodebase\nLABEL maintainer &quot;nicosommi@gmail.com&quot;\n\nADD . /usr/src/app\nWORKDIR /usr/src/app\nRUN npm i &amp;&amp; npm run build\n\n# runtime\nFROM nginx:alpine\nCOPY --from=nodebase /usr/src/app/build /usr/share/nginx/html\n</code></pre>\n\n<p>So let&rsquo;s see.</p>\n\n<p>We start with a node:latest image, no problem with the image size because now we have multi stage builds.</p>\n\n<p>The LABEL maintainer, that&rsquo;s recent too, no more MAINTAINER special instruction, now it&rsquo;s a label.</p>\n\n<p>We add the current directory to the appropiate location and set the working directory to it.</p>\n\n<p>Install, build&hellip; and that&rsquo;s all that we need to generate our artifacts in our build folder.</p>\n\n<p>So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.</p>\n\n<p>Done!</p>\n\n<h3 id="fourth-step-build-and-run">Fourth step: build and run!</h3>\n\n<p>So now, let&rsquo;s build the image\n<code>docker build -t my-app .</code></p>\n\n<p>And now let&rsquo;s look it&rsquo;s size\n<code>docker images</code></p>\n\n<p>All right! less than 16 MB! With the whole thing, linux, nginx and our app!</p>\n\n<p>That&rsquo;s great. Just the node_modules folder size after installation is around 130 MB&hellip; so this is a BIG win.</p>\n\n<p>Let&rsquo;s try it<br />\n<code>docker run -d --rm -p 8000:80 --name my-app my-app</code></p>\n\n<p>Open chrome in localhost:8000 and enjoy.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Multi stage builds are great, it let&rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.</p>\n\n<p>By making this clear distinction between different stages, docker let&rsquo;s you think in a more organized way about the Dockerfile.</p>\n\n<p>With multi stage builds the LAST stage is the one that is used on your final image. Don&rsquo;t forget that. <em>For example, the ONBUILD instruction on a previous stage wont have any effect</em> because it will be overwritten with the last stage of the Dockerfile.</p>\n\n<p>As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&rsquo;s really big very quickly.</p>\n\n<p>nicosommi</p>\n',Summary:"Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size Introduction With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository. A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#introduction">Introduction</a>\n<ul>\n<li><a href="#first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</a></li>\n<li><a href="#second-step-building-a-spa">Second step: Building a SPA</a></li>\n<li><a href="#third-step-create-a-dockerfile">Third step: create a Dockerfile</a></li>\n<li><a href="#fourth-step-build-and-run">Fourth step: build and run!</a></li>\n</ul></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:526,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Weekend experiment: a node.js SPA with multi stage builds from docker",Description:"",Keywords:[],Date:"2017-04-29T06:34:58-03:00",Lastmod:"2017-04-29T06:34:58-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1}}],react:[{Weight:0,Page:{Params:{bundle:"default"},Content:"",Summary:"",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:0,FuzzyWordCount:100,ReadingTime:0,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"test",Description:"",Keywords:[],Date:"2017-07-06T20:36:09-03:00",Lastmod:"2017-07-06T20:36:09-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],resume:[{Weight:0,Page:{Params:{author:"nico"},Content:'<p>Please don&rsquo;t ask me for my CV and see my social profiles instead (<a href="https://www.linkedin.com/in/nicosommi/">linkedin</a>, <a href="https://github.com/nicosommi">github</a>, <a href="https://stackoverflow.com/users/1015217/nico">stackoverflow</a>).</p>\n\n<p>And if you want to contact me, send a message to <a href="maito:nicosommi@gmail.com" title="nicosommi@gmail.com">nicosommi@gmail.com</a></p>\n\n<p><a href="https://flattr.com/submit/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F" target="_blank"><img src="//button.flattr.com/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></p>\n\n<p>&nbsp;</p>\n',Summary:"Please don&rsquo;t ask me for my CV and see my social profiles instead (linkedin, github, stackoverflow). And if you want to contact me, send a message to nicosommi@gmail.com &nbsp;",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"page",WordCount:29,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Resume/Acerca de mi",Description:"",Keywords:[],Date:"2013-04-11T22:27:04Z",Lastmod:"2013-04-11T22:27:04Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}],slide:[{Weight:0,Page:{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/2017-03-25-13-39-09.png" width="400px"></img></p>\n\n<h1 id="docker-secrets">Docker secrets</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda e introducci\xf3n</li>\n<li>Como surgen?</li>\n<li>\xbfQu\xe9 son los secrets?</li>\n<li>\xbfPara que sirven?</li>\n<li>Anotaciones de seguridad</li>\n<li>Detalles de utilizaci\xf3n</li>\n<li>Preparando nuestras im\xe1genes</li>\n<li>Creando un secreto sencillo</li>\n<li>Utilizando secrets con YML&rsquo;s de docker compose</li>\n<li>Usando https con secrets</li>\n<li>Resumen de comandos</li>\n<li>Q &amp; A</li>\n<li>Fin</li>\n</ol>\n\n<hr />\n\n<h2 id="como-surgen">\xbfComo surgen?</h2>\n\n<p>Porque la comunidad toma decisiones heterogeneas y peligrosas:\n- Usar variables de entorno (12 factor app)\n- Variables de entorno en build\n- Manual build (commit)\n- Custom hacks (curl a webserver)\n&hellip; Se necesitan do&rsquo;s and don&rsquo;ts</p>\n\n<p>???\n- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados</p>\n\n<h2 id="hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</h2>\n\n<h2 id="qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</h2>\n\n<p>Para docker es un BLOB de datos manejado de manera centralizada.\n- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan\n- Solo para swarm&hellip; por ahora\n- Hasta 500KB (no TAN large)\n- Por ahora solo para runtime\n<center>\n  <img src="/slide/assets/2017-03-22-21-47-13.png" width="800px"></img>\n</center></p>\n\n<p>???\nBinary Large OBjects\nSecure Sockets Layer (ahora Transport Layer Security)\nSwarmKit es una libreria que se encarga del node management</p>\n\n<h2 id="hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</h2>\n\n<h2 id="para-que-sirven">\xbfPara que sirven?</h2>\n\n<ul>\n<li>Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos&hellip; y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones</li>\n<li>Funciona como capa de abstraccion entre las credenciales y los contenedores</li>\n</ul>\n\n<p>???\n- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido</p>\n\n<hr />\n\n<h2 id="anotaciones-de-seguridad">Anotaciones de seguridad</h2>\n\n<ul>\n<li>Viajan a los managers del swarm por TLS</li>\n<li>Se almacenan en el Raft log, con todo lo que ello nos garantiza (que est\xe1 encriptado y es replicado a trav\xe9s de los managers, garantizando la misma HA que el resto de la informacion del swarm)</li>\n<li>Cuando se detiene un container, se hace unmount y se flushea la memoria</li>\n<li>Si se pierde conexi\xf3n con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucci\xf3n hasta que se vuelva a conectar al swarm<br />\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li>\n</ul>\n\n<p>???\n* Esta encriptado desde la 1.13\n* El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm\n* El &ldquo;Raft log&rdquo; se refiere al consensus algorithm que utiliza swarmkit <em>entre managers</em> para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue dise\xf1ado para ser simple de entender y que m\xe1s sistemas utilizen un buen algoritmo de consenso para ser m\xe1s tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y l\xedderes.\n* Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un l\xedder es elegido. Despu\xe9s hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a>\nTienen un log y una maquina de estados.\nSi una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, tambi\xe9n relegando su liderazgo.</p>\n\n<hr />\n\n<h2 id="detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</h2>\n\n<ul>\n<li>Se montan en /run/secrets/name</li>\n<li>Solo tiene acceso si es un manager o si tiene permisos espec\xedficos</li>\n<li>Se pueden ver, listar los secrets, pero no se puede borrar uno que est\xe1 siendo utilizado, para ello se debe rotar el secret</li>\n<li>Se recomienda poner en el nombre una fecha o numero de version, para hacer m\xe1s sencillo el control</li>\n</ul>\n\n<p>???\n- &ndash;secret source=mysql_password,target=wp_db_password,mode=0400</p>\n\n<hr />\n\n<h2 id="preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</h2>\n\n<ul>\n<li>Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE adem\xe1s de MYSQL_PASSWORD)</li>\n</ul>\n\n<hr />\n\n<h2 id="creando-un-secreto-sencillo">Creando un secreto sencillo</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ openssl rand -base64 20 | docker secret create mi_secreto -\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets\n$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto\n</code></pre>\n\n<p>???\nSi commiteamos el container a una imagen, el secreto es desmontado</p>\n\n<h2 id="si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</h2>\n\n<h2 id="utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</h2>\n\n<pre><code class="language-yaml">version: \'3.1\'\nservices:\n    test:\n        image: \'alpine\'\n        command: \'cat /run/secrets/my_secret\'\n        secrets: \n            - my_secret\nsecrets:\n    my_secret:\n        file: ./mysecret.txt\n        # o external: true para tomarlo del swarm\n</code></pre>\n\n<p>???\nGracias al stack del compose</p>\n\n<h2 id="docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</h2>\n\n<h2 id="usando-https-con-secrets">Usando https con secrets</h2>\n\n<ol>\n<li>Generar certificado con let&rsquo;s encrypt, self-signed u otra CA</li>\n<li>Preparar nginx config</li>\n<li>Preparar secrets en el swarm\n<code>shell\n$ docker secret create site.key site.key\n$ docker secret create site.crt site.crt\n$ docker secret create site.conf site.conf\n</code></li>\n\n<li><p>Crear el servicio</p>\n\n<pre><code class="language-shell">$ docker service create --name nginx --secret site.key \\\n --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \\\n sh -c &quot;ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf &amp;&amp; exec nginx -g \'daemon off;\'&quot;\n</code></pre>\n\n<p>???</p>\n\n<h2 id="daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</h2>\n\n<h2 id="resumen-de-comandos">Resumen de comandos</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ echo &quot;a&quot; | docker secret create mi_secreto -\n$ docker secret inspect mi_secreto\n$ docker secret ls\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker service update mi_servicio --secret-rm mi_secreto\n$ docker service update mi_servicio --secret-add mi_nuevo_secreto\n$ docker secret rm mi_secreto\n</code></pre>\n\n<p>???</p>\n\n<h2 id="aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</h2>\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1></li>\n</ol>\n',Summary:"Docker secrets Por nicosommi name: agenda Agenda Agenda e introducci\xf3n Como surgen? \xbfQu\xe9 son los secrets? \xbfPara que sirven? Anotaciones de seguridad Detalles de utilizaci\xf3n Preparando nuestras im\xe1genes Creando un secreto sencillo Utilizando secrets con YML&rsquo;s de docker compose Usando https con secrets Resumen de comandos Q &amp; A Fin \xbfComo surgen? Porque la comunidad toma decisiones heterogeneas y peligrosas: - Usar variables de entorno (12 factor app) - Variables de entorno en build - Manual build (commit) - Custom hacks (curl a webserver) &hellip; Se necesitan do&rsquo;s and don&rsquo;ts ???",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#docker-secrets">Docker secrets</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#como-surgen">\xbfComo surgen?</a></li>\n<li><a href="#hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</a></li>\n<li><a href="#qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</a></li>\n<li><a href="#hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</a></li>\n<li><a href="#para-que-sirven">\xbfPara que sirven?</a></li>\n<li><a href="#anotaciones-de-seguridad">Anotaciones de seguridad</a></li>\n<li><a href="#detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</a></li>\n<li><a href="#preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</a></li>\n<li><a href="#creando-un-secreto-sencillo">Creando un secreto sencillo</a></li>\n<li><a href="#si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</a></li>\n<li><a href="#utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</a></li>\n<li><a href="#docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</a></li>\n<li><a href="#usando-https-con-secrets">Usando https con secrets</a></li>\n<li><a href="#daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</a></li>\n<li><a href="#resumen-de-comandos">Resumen de comandos</a></li>\n<li><a href="#aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:990,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker secrets",Description:"",Keywords:[],Date:"2017-03-29T15:38:10-03:00",Lastmod:"2017-03-29T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/docker-74de8.png" width="400px"></img></p>\n\n<h1 id="introduccion-a-docker">Introduccion a docker</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda y alcance</li>\n<li>Fundamentos</li>\n<li>Casos de uso</li>\n<li>Por dentro</li>\n<li>Componentes</li>\n<li>Ejemplo sencillo</li>\n<li>Q &amp; A</li>\n<li>Mas componentes</li>\n<li>Comandos sobre contenedores e im\xe1genes</li>\n<li>Ejemplo lateral</li>\n<li>T\xe9cnica para construir un Dockerfile</li>\n<li>Buenas pr\xe1cticas</li>\n<li>Docker para SPA, web apps, etc</li>\n<li>Anexo: Services</li>\n<li>Q &amp; A</li>\n</ol>\n\n<hr />\n\n<p>class: center</p>\n\n<h2 id="que-es">Que es?</h2>\n\n<p><center>\n  <img src="/assets/docker-89c82.png" width="400px"></img>\n</center></p>\n\n<p>???\nDisculpen el teclado en ingles</p>\n\n<hr />\n\n<ul>\n<li>T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.</li>\n<li>Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.</li>\n<li>UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios</li>\n<li>Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)\n<center>\n<img src="/assets/docker-28b55.png" width="300px"></img>\n</center></li>\n</ul>\n\n<hr />\n\n<p>class: right\n<img style="position: absolute" src="/assets/docker-04a7d.png" width="200px"></img></p>\n\n<h2 id="es-una-maquina-virtual-no">Es una maquina virtual? No.</h2>\n\n<h2 id="como-se-diferencia-de-una">Como se diferencia de una?</h2>\n\n<hr />\n\n<p>Se diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.\n<center>\n  <img src="/assets/history.png" width="600px"></img>\n</center>\n???\nComentar:\n* historia\n* primero escalabilidad horizontal\n* despues optimizar recursos\n* adicionales: docker swarm independiente\nNos permite cambiar la unidad de medida de nuestra aplicaci\xf3n de m\xe1quinas virtuales o f\xedsicas a simples containers.</p>\n\n<hr />\n\n<h2 id="en-donde-corre">En donde corre?</h2>\n\n<p>En sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).\nTambien, recientemente incorporaron contenedores basados en windows server.\n<center>\n  <img src="/assets/platforms.png" width="400px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-6a999.png" width="100px"></img>\n</div></p>\n\n<h2 id="nbsp-para-que-sirve">&nbsp;Para que sirve?</h2>\n\n<p>Para isolar el entorno de ejecuci\xf3n de una aplicaci\xf3n.</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/pencil.png" width="80px"></img>\n</div></p>\n\n<h2 id="nbsp-datos">&nbsp;Datos</h2>\n\n<ul>\n<li>Es open source desde el 2013.</li>\n<li>Esta escrito en go.</li>\n<li>Lo comenz\xf3 Solomon Hykes en dotCloud.</li>\n</ul>\n\n<p>???\nGo esta pensado para concurrencia y productividad y tiene garbage collection</p>\n\n<hr />\n\n<h2 id="casos-de-uso">Casos de uso</h2>\n\n<p><img src="/assets/usecases.png" width="90%"></img>\n???\nInvitar a sugerir ideas u opinar sobre las mencionadas\nTexto:\n* CI/CD\n* Entornos de desarrollo\n* Compilar para distintos targets\n* PaaS\n* Escalabilidad horizontal\n* High availability cluster\n* Aislar ejecucion de codigo de manera segura (webpackbin, etc)\n* Aprendizaje/investigacion\n* Etc&hellip;</p>\n\n<hr />\n\n<h2 id="por-dentro">Por dentro</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="140px"></img>\n</div></p>\n\n<h2 id="nbsp-docker-image">&nbsp;Docker Image</h2>\n\n<ul>\n<li>Es un template con instrucciones para la construccion de contenedores</li>\n<li>Tiene una o varias capas de solo lectura a partir del cual se crean contenedores</li>\n<li>Se pueden extender o empezar de cero</li>\n<li>Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile</li>\n<li>El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.</li>\n<li>Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-container">Docker Container</h2>\n\n<ul>\n<li>Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.</li>\n<li>Contiene una fina capa adicional a las de su imagen con permisos de escritura.</li>\n<li>Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.</li>\n<li>Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.\n<center>\n<img src="/assets/docker-bb91f.png" width="300px"></img>\n</center></li>\n</ul>\n\n<p>???\nPreguntar diferencia entre contenedor e imagen y clarificar dudas</p>\n\n<hr />\n\n<h2 id="acerca-del-contenedor">Acerca del Contenedor</h2>\n\n<p>Previamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).\n<center>\n  <img src="/assets/docker-71f58.png" width="240px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-1c5ae.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-storage">&nbsp;Storage</h2>\n\n<ul>\n<li>Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor</li>\n<li>Docker utiliza &lsquo;copy on write&rsquo;, es decir que copia una capa s\xf3lo cuando la va a cambiar, lo que permite optimizar el tama\xf1o en disco ocupado por la imagen y el tiempo de arranque de los contenedores.</li>\n<li>Toda la data de imagenes y contenedores se guarda en una carpeta.</li>\n<li>Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir seg\xfan caso de uso, experiencia del equipo y linux distro.</li>\n</ul>\n\n<hr />\n\n<h2 id="componentes">Componentes</h2>\n\n<hr />\n\n<h2 id="docker-engine">Docker Engine</h2>\n\n<p>Aplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.\n<img src="/assets/docker-9cf40.png" alt="Docker engine" /></p>\n\n<hr />\n\n<h2 id="machine">Machine</h2>\n\n<ul>\n<li>Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.</li>\n<li>Nos deja instalar docker en terminales remotas y provisionar swarms.\n<img src="/assets/docker-7ada0.png" width="95%"></img>\n???\nPermite especificar drivers para distintos providers</li>\n</ul>\n\n<hr />\n\n<h2 id="compose">Compose</h2>\n\n<p>Es una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.\n* Detecta cambios y recrea solo lo necesario\n* Soporta variables en el compose file\n* Guarda la data persistida en los volumes\n* Es muy util para entornos de desarrollo, para deployment en un solo host\n<center>\n  <img src="/assets/docker-32d4f.png" width="200px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/ubuntu.png" width="50px"></img>\n</div></p>\n\n<h2 id="nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</h2>\n\n<pre><code class="language-bash">$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash\nroot@3883936319fb:/# lsb_release -a\n(...) Description:\tUbuntu 14.04.5 LTS (...)\n</code></pre>\n\n<ol>\n<li>Trae la ultima imagen, o si ya existe la utiliza.</li>\n<li>Crea, en base a la imagen, un contenedor.</li>\n<li>Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.</li>\n<li>Asigna una interfaz de red con la cual habla con el host</li>\n<li>Setea una IP de una pool</li>\n<li>Ejecuta el proceso solicitado (/bin/bash)</li>\n<li>Captura y devuelve el output del contenedor por haber indicado -it</li>\n</ol>\n\n<p>???\ni es para el interactive mode, que deja el stdin esperando\nt asigna un pseudo tty / pty\n* pull\n* hablar de pull y de los otros parametros como name, port, volume</p>\n\n<hr />\n\n<h2 id="wordpress">Wordpress</h2>\n\n<pre>\n  <code class="bash hljs remark-code remark-code-line" style="font-size: 13px;">\n  version: \'2\'\n\n  services:\n     db:\n       image: mysql:5.7\n       volumes:\n         - "./.data/db:/var/lib/mysql"\n       restart: always\n       environment: (...)\n\n     wordpress:\n       depends_on:\n         - db\n       image: wordpress:latest\n       links:\n         - db\n       ports:\n         - "8000:80"\n       restart: always\n       environment: (...)\n  </code>\n</pre>\n\n<p>???\nEnvironment est\xe1 cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la p\xe1gina oficial</p>\n\n<hr />\n\n<h1 id="q-a-parcial">Q &amp; A Parcial</h1>\n\n<hr />\n\n<h2 id="docker-registry">Docker Registry</h2>\n\n<ul>\n<li>Es una libreria de imagenes.</li>\n<li>Puede ser publico o privado.</li>\n<li>Una vez construida la imagen, hacemos un push al registry</li>\n<li>Docker hub es un registry publico oficial</li>\n<li>Hay una imagen publica registry y una para el trusted registry\n<center>\n<img src="/assets/docker-89504.png" width="240px"></img>\n</center>\n???\nTrusted registry es con soporte comercial</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volumes">Data volumes</h2>\n\n<ul>\n<li>Encontrar\n<code>bash\n$ docker inspect myContainer\n</code></li>\n<li>Se pueden crear vol\xfamenes o montar desde el host\n<code>bash\n$ docker run -d -P --name web -v /webapp myImage npm start\n$ docker run -d -P --name web -v /src:/webapp myImage npm start\n</code>\n???</li>\n<li>bypass a unionfs</li>\n<li>si no esta bindeado a host, copia el contenido adentro</li>\n<li>permite compartir entre containers con compose o con named volumes (flocker por ejemplo)</li>\n<li>esta dise\xf1ado para cambiar el container y que la data persista, incluso aunque ningun container la referencie</li>\n<li>soporta SCSI, NFS, etc.</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volume-containers">Data volume containers</h2>\n\n<ul>\n<li><em><a href="/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/">Es una pr\xe1ctica</a></em> que consiste en crear un contenedor que s\xf3lo contiene data que luego ser\xe1 utilizada por otros contenedores\n<code>bash\n$ docker create -v /dbdata --name mydb postgres /bin/true\n$ docker run -d --volumes-from mydb --name db1 postgres\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="network">Network</h2>\n\n<ul>\n<li>Puede ser bridge, none  y host\n<code>bash\n$ docker network ls\n</code></li>\n<li>Pueden verse los detalles\n<code>bash\n$ docker network inspect bridge\n</code></li>\n<li>Se pueden crear nuestras redes en las cuales correr containers\n???</li>\n<li>un container puede pertenecer a varias redes</li>\n<li>se ven entre los de la misma red</li>\n<li>puede ser overlay (swarm mode) o custom driver</li>\n<li>embedded dns en custom networks</li>\n<li>antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-aplicado">Docker Aplicado</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-28b55.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</h2>\n\n<ul>\n<li><p>Run, Start, Stop</p>\n\n<pre><code class="language-bash"># crea un contenedor en base a una imagen y corre el comando bash\n$ docker run --name miContenedor alpine echo &quot;Hola&quot;\n# arrancar un contenedor ya creado\n$ docker start miContenedor\n# parar contenedor con time to kill\n$ docker stop -t 10 miContenedor\n# also valid: docker restart -t 10 miContenedor\n</code></pre></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Listar, Inspeccionar\n<code>bash\n$ docker rm miContenedor\n$ docker ps\n$ docker ps --all\n$ docker inspect miContenedor\n</code></li>\n</ul>\n\n<p>???\n* hablar de se\xf1ales y su relacion con stop</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</h2>\n\n<ul>\n<li>Cargar, Listar, Inspeccionar\n<code>bash\n$ docker pull repo/image:tag\n$ docker load -i imagen.tar\n$ docker images\n$ docker inspect alpine\n</code></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Construir, Taggear, Subir\n<code>bash\n$ docker rmi repo/image:tag\n$ docker build -t image-name .\n$ docker tag image-name repo/image-name:tag\n$ docker push repo/image-name:tag\n</code></li>\n</ul>\n\n<p>???\n* es necesario un docker login myrepo:2376</p>\n\n<hr />\n\n<h2 id="ejemplo-existente">Ejemplo existente</h2>\n\n<pre><code class="language-bash">$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc\n</code></pre>\n\n<p><center>\n  <img src="/assets/vncffox.png" width="200px"></img>\n</center></p>\n\n<p>???\nLuego con un cliente vnc accedemos a un lxde con firefox instalado</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-08dc8.png" width="45px"></img>\n</div></p>\n\n<h2 id="nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</h2>\n\n<ol>\n<li>Se inicia un shell sobre una imagen base\n<code>bash\n$ docker run -it --name testC ubuntu sh\n</code></li>\n<li>Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile</li>\n</ol>\n\n<p>???\n- tar\n- scratch image (reserved word)\n- <em>history</em> de image\n- <em>commit</em> del container como no recomendada mas que para pruebas y debugging</p>\n\n<hr />\n\n<h2 id="debug">Debug</h2>\n\n<p>a. Entramos a un contenedor corriendo</p>\n\n<pre><code class="language-bash"># otra alternativa, tomar una\n$ docker exec -it nignxTest /bin/bash\n</code></pre>\n\n<p>b. Miramos los logs conectados</p>\n\n<pre><code class="language-bash">docker logs nginxTest\n</code></pre>\n\n<hr />\n\n<h2 id="buenas-pr\xe1cticas">Buenas pr\xe1cticas</h2>\n\n<ul>\n<li>Containers lo m\xe1s prescindibles posibles</li>\n<li>Usar .dockerignore</li>\n<li>Evitar instalar paquetes innecesarios</li>\n<li>Correr un s\xf3lo proceso por container</li>\n<li>Minimizar la cantidad de capas</li>\n<li>Organizar argumentos y comandos de multiples lineas con <br /></li>\n<li>Contemplar el build cache\n<center>\n<img src="/assets/docker-d0772.png" width="50%"></img>\n</center></li>\n</ul>\n\n<p>???\n* prescindible = efimero = pueden ser parados, destruidos y reemplazados\n* usar cache o no\n* el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente\n* una vez invalidado, ya no se utiliza para las subsecuentes capas</p>\n\n<hr />\n\n<h2 id="ejemplos-docker-para-web">Ejemplos docker para web</h2>\n\n<hr />\n\n<h2 id="spa-build">SPA build</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nADD . /src\nWORKDIR /src\nRUN rm -fR ./node_modules &amp;&amp; \\\n  npm i\nENTRYPOINT [&quot;npm&quot;, &quot;build&quot;]\n</code></pre>\n\n<p>???\nHay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el \xb4shell\xb4 form que hace &ldquo;/bin/sh -c&rdquo; lo que oculta se\xf1ales por ejemplo docker stop)\n&ndash;entrypoint overrides\n* tiene que haber al menos un cmd o entrypoint\n* entrypoint para ejecutables\n* cmd es mas para preparar parametros</p>\n\n<hr />\n\n<h2 id="spa-serve">SPA serve</h2>\n\n<pre><code class="language-Dockerfile">version: \'2\'\nservices:\n  spa:\n    image: nginx\n    volumes:\n      - &quot;.:/usr/share/nginx/html:ro&quot;\n    ports:\n      - &quot;10000:80&quot;\n</code></pre>\n\n<hr />\n\n<h2 id="api">API</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nEXPOSE 3000\nADD . /src\nWORKDIR /src\nRUN npm rebuild &amp;&amp; \\\n  npm test\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre>\n\n<p>???\nHay muchas alternativas, hay una tarea de dise\xf1o impl\xedcita</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-32d4f.png" width="50px"></img>\n</div>\n##&nbsp; Compose</p>\n\n<pre><code class="language-Dockerfile"># docker-compose.yml just for api\nversion: \'2\'\nservices:\n  api:\n    image: mirepo.com/api-image:production\n    ports:\n      - &quot;3000:3000&quot;\n    depends_on:\n      - mongo\n    environment:\n      PORT: 3000\n  mongo:\n    image: mongo\n    ports:\n      - &quot;27017:27017&quot;\n    volumes:\n      - ./mongodata:/data/db\n</code></pre>\n\n<p>???</p>\n\n<h2 id="links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</h2>\n\n<h2 id="comandos-para-compose">Comandos para compose</h2>\n\n<ul>\n<li>Correr, Parar, Borrar\n<code>bash\n$ docker-compose up -d\n$ docker-compose stop -t 10\n$ docker-compose rm\n$ docker-compose --help\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="anexo-docker-services">Anexo: Docker services</h2>\n\n<p>Es una abstracci\xf3n de los contenedores.\n* Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien\n* Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos\n* Para el cliente, el servicio luce como un docker daemon regular\n* Los servicios son los que brindan escalabilidad y flexibilidad de updates\n???\nswarm = el plural de docker nodes&hellip; manada/multitud/enjambre/nube\n* temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc</p>\n\n<hr />\n\n<h2 id="operaciones-con-services">Operaciones con services</h2>\n\n<pre><code class="language-bash">$ docker service create \\\n  --name my-service \\\n  --replicas 3 \\\n  nginx:alpine\n\n$ docker-compose scale service-name=2\n</code></pre>\n\n<p>???\n* services global/replicated</p>\n\n<hr />\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1>\n',Summary:"Introduccion a docker Por nicosommi name: agenda Agenda Agenda y alcance Fundamentos Casos de uso Por dentro Componentes Ejemplo sencillo Q &amp; A Mas componentes Comandos sobre contenedores e im\xe1genes Ejemplo lateral T\xe9cnica para construir un Dockerfile Buenas pr\xe1cticas Docker para SPA, web apps, etc Anexo: Services Q &amp; A class: center Que es? ??? Disculpen el teclado en ingles T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#introduccion-a-docker">Introduccion a docker</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#que-es">Que es?</a></li>\n<li><a href="#es-una-maquina-virtual-no">Es una maquina virtual? No.</a></li>\n<li><a href="#como-se-diferencia-de-una">Como se diferencia de una?</a></li>\n<li><a href="#en-donde-corre">En donde corre?</a></li>\n<li><a href="#nbsp-para-que-sirve">&nbsp;Para que sirve?</a></li>\n<li><a href="#nbsp-datos">&nbsp;Datos</a></li>\n<li><a href="#casos-de-uso">Casos de uso</a></li>\n<li><a href="#por-dentro">Por dentro</a></li>\n<li><a href="#nbsp-docker-image">&nbsp;Docker Image</a></li>\n<li><a href="#docker-container">Docker Container</a></li>\n<li><a href="#acerca-del-contenedor">Acerca del Contenedor</a></li>\n<li><a href="#nbsp-storage">&nbsp;Storage</a></li>\n<li><a href="#componentes">Componentes</a></li>\n<li><a href="#docker-engine">Docker Engine</a></li>\n<li><a href="#machine">Machine</a></li>\n<li><a href="#compose">Compose</a></li>\n<li><a href="#nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</a></li>\n<li><a href="#wordpress">Wordpress</a></li>\n</ul></li>\n<li><a href="#q-a-parcial">Q &amp; A Parcial</a>\n<ul>\n<li><a href="#docker-registry">Docker Registry</a></li>\n<li><a href="#data-volumes">Data volumes</a></li>\n<li><a href="#data-volume-containers">Data volume containers</a></li>\n<li><a href="#network">Network</a></li>\n<li><a href="#docker-aplicado">Docker Aplicado</a></li>\n<li><a href="#nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</a></li>\n<li><a href="#nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</a></li>\n<li><a href="#ejemplo-existente">Ejemplo existente</a></li>\n<li><a href="#nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</a></li>\n<li><a href="#debug">Debug</a></li>\n<li><a href="#buenas-pr\xe1cticas">Buenas pr\xe1cticas</a></li>\n<li><a href="#ejemplos-docker-para-web">Ejemplos docker para web</a></li>\n<li><a href="#spa-build">SPA build</a></li>\n<li><a href="#spa-serve">SPA serve</a></li>\n<li><a href="#api">API</a></li>\n<li><a href="#links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</a></li>\n<li><a href="#comandos-para-compose">Comandos para compose</a></li>\n<li><a href="#anexo-docker-services">Anexo: Docker services</a></li>\n<li><a href="#operaciones-con-services">Operaciones con services</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1863,FuzzyWordCount:1900,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}},{Weight:0,Page:{Params:{},Content:'\n\n<h1 id="proxies-en-es6">Proxies en ES6</h1>\n\n<hr />\n\n<h2 id="agenda">Agenda</h2>\n\n<p><small>\n  Terminolog\xeda<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n</small></p>\n\n<hr />\n\n<h2 id="terminolog\xeda">Terminolog\xeda</h2>\n\n<hr />\n\n<p>\xbfQue es un proxy?<br />\nOrigen: <em>prokecye</em><br />\n  &ldquo;agency of one who acts instead of another&rdquo;<br />\nEn espa\xf1ol significa <em>apoderado</em><br />\n  <em>adj.</em> Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre</p>\n\n<p>???\nEjemplo, firmar un poder para hacer un tr\xe1mite</p>\n\n<hr />\n\n<p>\xbfQue es un protocolo?<br />\nUn <em>protocolo</em> es un conjunto de normas. Esto podria verse como un conjunto interfaces con reglas para usarlas, y ECMAScript define un protocolo para manejar objetos. Este protocolo opera a nivel Meta.</p>\n\n<p>???\nLa definici\xf3n no es la misma que suele utilizarse de protocolos para interfaces de otros lenguajes porque tambi\xe9n incluye reglas.</p>\n\n<hr />\n\n<p><em>Metaprogramming</em><br />\nEn la programaci\xf3n hay niveles base y meta. El nivel base procesa el input del usuario, mientras que el meta procesa al base.</p>\n\n<p>???\nPueden incluso ser dos lenguajes distintos.\nEn es como los closures, los usamos sin saber.\nHay unos que usamos constantemente: Object.*</p>\n\n<hr />\n\n<p><em>Meta Object Protocol</em>  es como se lo llama al protocolo de manejo de objetos de ECMAScript. Como particularidad, son internos (no son accesibles desde JS). Los engines pueden usarlos o no.</p>\n\n<hr />\n\n<ul>\n<li>Los metodos de un objeto del MOP llaman operaciones del engine, algunas que llaman a otras como [[Get]], que se llaman <em>operaciones derivadas</em> y las que son independientes, que se llaman <em>operaciones fundamentales</em>.<br /></li>\n</ul>\n\n<p>???\nEjemplo [[Get]] usa getOwnProperty, getPrototypeOf y Call</p>\n\n<hr />\n\n<p><em>Tipos de metaprogramming</em><br />\n- Introspection: permite s\xf3lo leer la estructura\n- Self-modification: permite modificar la estructura\n- Intercession: redefine la semantica de algunas operaciones</p>\n\n<p>???\nEjemplos Object.keys, moveProperty, proxy respectivamente</p>\n\n<hr />\n\n<p><em>Elementos del proxy</em><br />\n- target: es el fallback del handler, el representado\n[[ProxyTarget]]\n- handler: es quien, en caso de definir el m\xe9todo indicado, intercepta la llamada, el representante\n[[ProxyHandler]]\n- proxy: el que compone ambos y delega a uno u otro</p>\n\n<pre><code>const proxy = new Proxy(target, handler); // OK\nvar p = Proxy(target, handler); // TypeError: calling a builtin Proxy constructor without new is forbidden\n</code></pre>\n\n<p>???\nEl m\xe9todo del handler se llama trap.<br />\nEs decir que el proxy &ldquo;wrappea&rdquo; al target.</p>\n\n<hr />\n\n<pre><code>class MyHandler {\n  get(target, key, receiver) {\n    return Reflect[key];\n  }\n}\n</code></pre>\n\n<p>???\nReflect no se puede instanciar, tiene los mismos metodos que el handler, es como Math, todo estatico\nPor ejemplo Reflect.apply es menos verboso que Function.prototype.apply\nAlgunas veces nos da informaci\xf3n adicional como Reflect.set -&gt; [boolean]</p>\n\n<hr />\n\n<p><em>\xbfQue operaciones pueden ser interceptadas?</em><br />\nEsto es selectivo, no se puede interceptar todo o solo las fundamentales como podria suponerse.<br />\nEsto es por dos razones\n- porque una operacion estable corre el riesgo de que un proxy la haga inestable\n- porque tener mucho codigo custom intercalado haria el programa muy dificil de entender y debuggear</p>\n\n<p>???\nejemplo el === que no puede ser trapeada.\nEstable: sin side effects, que produce siempre el mismo resultado ante los mismos argumentos<br />\nSe podr\xeda pensar como que con interceptar s\xf3lo operaciones fundamentales, pero esto no es tan \xfatil ya que no inlcuir\xeda get por ejemplo.\nVer codigo de api client.</p>\n\n<hr />\n\n<p><em>Prototype chain</em><br />\nLos engines en su comportamiento habitual, al subir por el chain, van a disparar las traps que encuentren.<br />\nSin embargo, hay ciertas operaciones que suben por el prototype chain si no encuentran la property en el handler como get, set y has, las demas no alteran el prototype chain.</p>\n\n<p>???\nVer codigo y test de ghost.\nInstanceof &ldquo;lies&rdquo;</p>\n\n<hr />\n\n<p><em>B\xe1sicas</em></p>\n\n<pre><code>defineProperty(target, propKey, propDesc) // \u2192 boolean  (fundamental)\n  // trigger: Object.defineProperty(proxy, propKey, propDesc)\ndeleteProperty(target, propKey) // \u2192 boolean  (fundamental)\n  // trigger: delete proxy[propKey], delete proxy.foo\nget(target, propKey, receiver) // \u2192 any\n  // trigger: receiver[propKey]\n  // trigger: receiver.foo\n</code></pre>\n\n<hr />\n\n<p><em>Casos de uso</em>\n  * API Client\n  * Tracing / Logging\n  * Trap undefined property access\n  * Type check</p>\n\n<p>???\n  Se\xf1alar el tracing puede implementarse cambiando el objeto.\n  Type check example: properties que son &ldquo;fieles&rdquo; a su tipo incial.\n  Ir viendo ejemplos de api client, logging y lock</p>\n\n<hr />\n\n<p><em>Preguntas</em></p>\n\n<hr />\n\n<p><em>Practica 1</em><br />\nHacer &ldquo;trap undefined&rdquo;<br />\n&ldquo;Objeto que tira excepcion cuando se accede a una propiedad undefined&rdquo;\n(30 minutos)</p>\n\n<p>???\nDebe tirar un ReferenceError si no esta. Debe devolver el valor si esta.\nProbar nested with lock.</p>\n\n<hr />\n\n<p><em>Compatibilidad</em>\n* Solo FF, CH, Edge, Opera, Safari 10, Node 6</p>\n\n<p>???\nNo hay polyfill.</p>\n\n<hr />\n\n<p><em>Tipos de proxy</em>\n* Wrappers (solo control) o Virtual Objects (agregan comporamiento)</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Propiedades del proxy</em>\n* Transparencia virtual: no podemos saber si un objeto es un proxy\n* Encapsulamiento: no podemos acceder al handler desde el proxy</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Mas casos de uso</em>\n* DOM\n* Indices negativos de array\n* Data binding (polemico)\n* Profiling\n* RMI</p>\n\n<p>Note:\nDOM: usualmente est\xe1 implementado entre C++ y JS, y el context switch es costoso, lo que nos lleva a querer hacer el dom en js puro, pero hay cosas que no son tan simples de implementar, y ello fue una importante razon para hacer los proxies en JS (dom mas eficiente) y ademas que nos permite emular el browser (jsdom).</p>\n\n<p>Indices negativos como en algunos lenguajes.\nMencionar Object.observe (ES7) creado para binding por la pobre performance de los proxy, aunque abandonado por react.\nObject.observe no es necesario con la inmutabilidad, tratar browser como remote rendering, no storage y query\n(undo, state). Se dice que es lo que queremos, no lo que necesitamos (Stateful dom).\nProfiling para medir tiempo.\nRMI permite por ejemplo db access directo.</p>\n\n<hr />\n\n<p><em>Invariants</em><br />\nSi el target es no extensible y no configurable, lo invariante es forzado por el engine.</p>\n\n<p>???\nno extensible protege objetos, non configurability protege properties.\nCon los proxy se podr\xeda violar la invariabilidad, pero el engine lo prohibe chequeando los parametros y los resultados de los handlers, preventExtension, true y luego false, e igual para isExtensible y getOwnPropertyDescriptor</p>\n\n<hr />\n\n<p><em>Practica 2</em><br />\nMejorar api client<br />\n(30 minutos)</p>\n\n<p>???\nelegir algunos de los TODO</p>\n\n<hr />\n\n<p><em>Avanzadas 1</em></p>\n\n<pre><code>getOwnPropertyDescriptor(target, propKey) // \u2192 PropDesc|Undefined  (fundamental)  \n  // tby: Object.getOwnPropertyDescriptor(proxy, propKey)  \ngetPrototypeOf(target) // \u2192 Object|Null  (fundamental)  \n  // tby: Object.getPrototypeOf(proxy)  \nhas(target, propKey) // \u2192 boolean  \n  // tby: propKey in proxy\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 2</em></p>\n\n<pre><code>isExtensible(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.isExtensible(proxy)  \nownKeys(target) // \u2192 Array&lt;PropertyKey&gt;  (fundamental)  \n  // tby: Object.getOwnPropertyPropertyNames(proxy) (only uses string-valued keys)  \n  // tby: Object.getOwnPropertyPropertySymbols(proxy) (only uses symbol-valued keys)  \n  // tby: Object.keys(proxy) (only uses enumerable string-valued keys;\n  // enumerability is checked via Object.getOwnPropertyDescriptor)\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 3</em></p>\n\n<pre><code>preventExtensions(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.preventExtensions(proxy)  \nset(target, propKey, value, receiver) // \u2192 boolean  \n  // tby: receiver[propKey] = value  \n  // tby: receiver.foo = value // propKey = \'foo\'  \nsetPrototypeOf(target, proto) // \u2192 boolean  (fundamental)  \n  // tby: Object.setPrototypeOf(proxy, proto)\n</code></pre>\n\n<hr />\n\n<p><em>Para funciones</em></p>\n\n<pre><code>apply(target, thisArgument, argumentsList) // \u2192 any  \n  // tby: proxy.apply(thisArgument, argumentsList) (fundamental)  \n  // tby: proxy.call(thisArgument, ...argumentsList)  \n  // tby: proxy(...argumentsList)  \nconstruct(target, argumentsList) // \u2192 Object  \n  // tby: new proxy(..argumentsList)\n</code></pre>\n\n<hr />\n\n<p><em>Conclusion</em><br />\n* Performance\n* Debug\n* Casos de uso\n* Complejidad\n* Compatibilidad</p>\n\n<p>Note:\nPerformance: Conviene medir la performance en cada caso, evaluar que tan critica es la performance en nuestra app y tomar una decision.\nA mas c\xf3digo interceptado, menor performance, mayor dificultad de entender el codigo y de debug.\nRiesgo: podemos &ldquo;romper&rdquo; comportamientos, hacerlo inconsistente\nCasos de uso:</p>\n\n<hr />\n\n<p><em>Preguntas / Discusion / Ideas</em></p>\n\n<hr />\n\n<p>Gracias!</p>\n',Summary:"Proxies en ES6 Agenda Terminolog\xeda Desarrollo Casos de uso Ejercitaci\xf3n Desarrollo Casos de uso Ejercitaci\xf3n Terminolog\xeda \xbfQue es un proxy? Origen: prokecye &ldquo;agency of one who acts instead of another&rdquo; En espa\xf1ol significa apoderado adj. Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre ??? Ejemplo, firmar un poder para hacer un tr\xe1mite \xbfQue es un protocolo? Un protocolo es un conjunto de normas.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#proxies-en-es6">Proxies en ES6</a>\n<ul>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#terminolog\xeda">Terminolog\xeda</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1238,FuzzyWordCount:1300,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"proxies",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}}]},Pages:[{Params:{bundle:"default"},Content:"",Summary:"",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:0,FuzzyWordCount:100,ReadingTime:0,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"test",Description:"",Keywords:[],Date:"2017-07-06T20:36:09-03:00",Lastmod:"2017-07-06T20:36:09-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<p><em>Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size</em></p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository.</p>\n\n<p>A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.</p>\n\n<p>Let&rsquo;s start with this.</p>\n\n<h3 id="first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</h3>\n\n<p>Easy, go to <a href="https://www.docker.com/community-edition#/download">https://www.docker.com/community-edition#/download</a>\nChoose your platform AND, because we need multi stage builds and its still on the <em>edge channel</em> we need to choose that instead of the stable channel. Download, install.</p>\n\n<h3 id="second-step-building-a-spa">Second step: Building a SPA</h3>\n\n<p>A single page application is just a static web page that can be served through any traditional web server.</p>\n\n<p>For this example, let&rsquo;s pick a boilerplate SPA like create-react-app.</p>\n\n<pre><code class="language-shell">npm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\nnpm start # if you want to test it and check the browser for it\n</code></pre>\n\n<h3 id="third-step-create-a-dockerfile">Third step: create a Dockerfile</h3>\n\n<p>All right now the important thing, let&rsquo;s take a look at a candidate Dockerfile</p>\n\n<pre><code class="language-docker"># buildtime\nFROM node AS nodebase\nLABEL maintainer &quot;nicosommi@gmail.com&quot;\n\nADD . /usr/src/app\nWORKDIR /usr/src/app\nRUN npm i &amp;&amp; npm run build\n\n# runtime\nFROM nginx:alpine\nCOPY --from=nodebase /usr/src/app/build /usr/share/nginx/html\n</code></pre>\n\n<p>So let&rsquo;s see.</p>\n\n<p>We start with a node:latest image, no problem with the image size because now we have multi stage builds.</p>\n\n<p>The LABEL maintainer, that&rsquo;s recent too, no more MAINTAINER special instruction, now it&rsquo;s a label.</p>\n\n<p>We add the current directory to the appropiate location and set the working directory to it.</p>\n\n<p>Install, build&hellip; and that&rsquo;s all that we need to generate our artifacts in our build folder.</p>\n\n<p>So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.</p>\n\n<p>Done!</p>\n\n<h3 id="fourth-step-build-and-run">Fourth step: build and run!</h3>\n\n<p>So now, let&rsquo;s build the image\n<code>docker build -t my-app .</code></p>\n\n<p>And now let&rsquo;s look it&rsquo;s size\n<code>docker images</code></p>\n\n<p>All right! less than 16 MB! With the whole thing, linux, nginx and our app!</p>\n\n<p>That&rsquo;s great. Just the node_modules folder size after installation is around 130 MB&hellip; so this is a BIG win.</p>\n\n<p>Let&rsquo;s try it<br />\n<code>docker run -d --rm -p 8000:80 --name my-app my-app</code></p>\n\n<p>Open chrome in localhost:8000 and enjoy.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Multi stage builds are great, it let&rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.</p>\n\n<p>By making this clear distinction between different stages, docker let&rsquo;s you think in a more organized way about the Dockerfile.</p>\n\n<p>With multi stage builds the LAST stage is the one that is used on your final image. Don&rsquo;t forget that. <em>For example, the ONBUILD instruction on a previous stage wont have any effect</em> because it will be overwritten with the last stage of the Dockerfile.</p>\n\n<p>As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&rsquo;s really big very quickly.</p>\n\n<p>nicosommi</p>\n',Summary:"Let&rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size Introduction With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&rsquo;s pulled and pushed faster to the docker repository. A Single Page Applications (SPA&rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#introduction">Introduction</a>\n<ul>\n<li><a href="#first-step-install-docker-17-05-ce">First step: install docker 17.05-ce</a></li>\n<li><a href="#second-step-building-a-spa">Second step: Building a SPA</a></li>\n<li><a href="#third-step-create-a-dockerfile">Third step: create a Dockerfile</a></li>\n<li><a href="#fourth-step-build-and-run">Fourth step: build and run!</a></li>\n</ul></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:526,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Weekend experiment: a node.js SPA with multi stage builds from docker",Description:"",Keywords:[],Date:"2017-04-29T06:34:58-03:00",Lastmod:"2017-04-29T06:34:58-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Ideas"],tags:["containers","docker","moby","linuxkit","operative systems"]},Content:'<p><em>Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos. Imaginemos&hellip; de eso es este post</em></p>\n\n<p>Hace un tiempo vengo estudiando acerca del futuro que tendr\xe1n los Sistemas Operativos (incluso comenc\xe9 un post que nunca publiqu\xe9 all\xe1 por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguir\xe1n administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. M\xe1s precisamente pienso esto much\xedsimo desde que conoc\xed Docker hace ya casi 2 a\xf1os. Esta nueva capa de abstracci\xf3n nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, tambi\xe9n son contenedores.</p>\n\n<p>Imaginemos correr una aplicaci\xf3n sin instalar, directa o indirectamente sus librer\xedas, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podr\xe1n acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos expl\xedcitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos espec\xedficos que s\xf3lo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.\n Imaginemos que nuestros dispositivos s\xf3lo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.<br />\n Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.<br />\n Imaginemos administrar las aplicaciones desde cualquier dispositivo.<br />\n Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.<br />\n Imaginar&hellip; eso es Moby y Linuxkit (ver m\xe1s adelante), impulsados en gran medida por Docker.</p>\n\n<p>Al principio lo ve\xeda ut\xf3pico, pero en parte me sent\xeda reconfortado porque hab\xeda personas importantes en la industria que tambi\xe9n lo pensaban.<br />\nPor ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expres\xf3 alla por el a\xf1o 2015 aunque m\xe1s orientado a <a href="https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon">aplicaciones distribuidas</a>.<br />\nAun m\xe1s cercanos a mis reflexiones de llevar los contenedores a dispositivos peque\xf1os, est\xe1n los ex <a href="http://blog.hypriot.com/">&ldquo;docker pirates ARMados con cosas explosivas&rdquo;</a>.</p>\n\n<p>Ya no lo veo tan ut\xf3pico o descabellado. Sobre todo desde que liberaron <a href="https://github.com/linuxkit/linuxkit">linuxkit</a> (un set de componentes basados en linux) hace pocos d\xedas, en conjunto con el ya existente proyecto <a href="https://github.com/moby/moby">Moby</a>, que es una gran iniciativa de la compa\xf1\xeda que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.</p>\n\n<p>Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &ldquo;Lego&rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de <a href="https://redis.io/">Redis</a> (una base de datos key value) con lo m\xednimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.</p>\n\n<p>Si bien hay much\xedsima evoluci\xf3n por delante como para ser aplicada al usuario final (para ser &ldquo;user friendly&rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quiz\xe1s el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para as\xed abrir camino hacia un futuro en el cu\xe1l ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.</p>\n\n<p>Otra aplicaci\xf3n muy interesante es la que ya se est\xe1 dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO m\xednimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM adem\xe1s de x86 (gracias al esfuerzo de los docker pirates de hypriot! <a href="http://blog.hypriot.com/about/">http://blog.hypriot.com/about/</a>)</p>\n\n<p>Con respecto a los m\xf3biles, bien se podr\xedan comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso disparar\xeda versiones m\xe1s \xf3ptimas de las mismas, permiti\xe9ndoles utilizar lenguajes de su elecci\xf3n. Tambi\xe9n disparar\xeda la componentizaci\xf3n y por ende democratizaci\xf3n de estos sistemas operativos, que hoy tienen un comportamiento por dem\xe1s abusivo en cuanto a privacidad.</p>\n\n<p>Muchas veces se me ha ocurrido de manera err\xf3nea intentar ejecutar docker desde android. Eso ser\xeda oportuno para solucionar r\xe1pidamente inconvenientes de hoy en d\xeda, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores b\xe1sicos nos brindan que pueda surgir, un Ecosistema mucho m\xe1s natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos m\xednimos en desarrollo activo. Esto sin duda dejar\xe1 para la comunidad, bloques para utilizar, que como consecuencia beneficiar\xe1n estas ideas.<br />\nYo por mi cuenta, espero ser m\xe1s y m\xe1s activo en esta comunidad de contenedores.</p>\n\n<p>Habr\xe1 resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminar\xe1n ahogados por la ola de los cambios y los nuevos emprendimientos que all\xed los lleven.</p>\n\n<p>Saber que los sistemas operativos puedan ser un conjunto de peque\xf1as cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y as\xed construir de manera consciente nuestro propio &ldquo;Castillo&rdquo; personal de aplicaciones.</p>\n\n<p>Se trata de una opini\xf3n y tambi\xe9n de un deseo personal.</p>\n\n<p><em>Imaginemos.</em></p>\n\n<p>nicosommi</p>\n',Summary:"Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no ser\xe1 como los conocemos ahora (sistemas operativos con aplicaciones) sino que ser\xe1n meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratizaci\xf3n de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canci\xf3n u otra obra tan s\xf3lo vez para todos nuestros dispositivos.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:943,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Un posible futuro de los sistemas operativos es tuSO / yourOS",Description:"",Keywords:[],Date:"2017-04-23T08:20:25-03:00",Lastmod:"2017-04-23T08:20:25-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/2017-03-25-13-39-09.png" width="400px"></img></p>\n\n<h1 id="docker-secrets">Docker secrets</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda e introducci\xf3n</li>\n<li>Como surgen?</li>\n<li>\xbfQu\xe9 son los secrets?</li>\n<li>\xbfPara que sirven?</li>\n<li>Anotaciones de seguridad</li>\n<li>Detalles de utilizaci\xf3n</li>\n<li>Preparando nuestras im\xe1genes</li>\n<li>Creando un secreto sencillo</li>\n<li>Utilizando secrets con YML&rsquo;s de docker compose</li>\n<li>Usando https con secrets</li>\n<li>Resumen de comandos</li>\n<li>Q &amp; A</li>\n<li>Fin</li>\n</ol>\n\n<hr />\n\n<h2 id="como-surgen">\xbfComo surgen?</h2>\n\n<p>Porque la comunidad toma decisiones heterogeneas y peligrosas:\n- Usar variables de entorno (12 factor app)\n- Variables de entorno en build\n- Manual build (commit)\n- Custom hacks (curl a webserver)\n&hellip; Se necesitan do&rsquo;s and don&rsquo;ts</p>\n\n<p>???\n- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados</p>\n\n<h2 id="hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</h2>\n\n<h2 id="qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</h2>\n\n<p>Para docker es un BLOB de datos manejado de manera centralizada.\n- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan\n- Solo para swarm&hellip; por ahora\n- Hasta 500KB (no TAN large)\n- Por ahora solo para runtime\n<center>\n  <img src="/slide/assets/2017-03-22-21-47-13.png" width="800px"></img>\n</center></p>\n\n<p>???\nBinary Large OBjects\nSecure Sockets Layer (ahora Transport Layer Security)\nSwarmKit es una libreria que se encarga del node management</p>\n\n<h2 id="hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</h2>\n\n<h2 id="para-que-sirven">\xbfPara que sirven?</h2>\n\n<ul>\n<li>Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos&hellip; y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones</li>\n<li>Funciona como capa de abstraccion entre las credenciales y los contenedores</li>\n</ul>\n\n<p>???\n- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido</p>\n\n<hr />\n\n<h2 id="anotaciones-de-seguridad">Anotaciones de seguridad</h2>\n\n<ul>\n<li>Viajan a los managers del swarm por TLS</li>\n<li>Se almacenan en el Raft log, con todo lo que ello nos garantiza (que est\xe1 encriptado y es replicado a trav\xe9s de los managers, garantizando la misma HA que el resto de la informacion del swarm)</li>\n<li>Cuando se detiene un container, se hace unmount y se flushea la memoria</li>\n<li>Si se pierde conexi\xf3n con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucci\xf3n hasta que se vuelva a conectar al swarm<br />\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></li>\n</ul>\n\n<p>???\n* Esta encriptado desde la 1.13\n* El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm\n* El &ldquo;Raft log&rdquo; se refiere al consensus algorithm que utiliza swarmkit <em>entre managers</em> para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue dise\xf1ado para ser simple de entender y que m\xe1s sistemas utilizen un buen algoritmo de consenso para ser m\xe1s tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y l\xedderes.\n* Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un l\xedder es elegido. Despu\xe9s hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.\n<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a>\nTienen un log y una maquina de estados.\nSi una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, tambi\xe9n relegando su liderazgo.</p>\n\n<hr />\n\n<h2 id="detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</h2>\n\n<ul>\n<li>Se montan en /run/secrets/name</li>\n<li>Solo tiene acceso si es un manager o si tiene permisos espec\xedficos</li>\n<li>Se pueden ver, listar los secrets, pero no se puede borrar uno que est\xe1 siendo utilizado, para ello se debe rotar el secret</li>\n<li>Se recomienda poner en el nombre una fecha o numero de version, para hacer m\xe1s sencillo el control</li>\n</ul>\n\n<p>???\n- &ndash;secret source=mysql_password,target=wp_db_password,mode=0400</p>\n\n<hr />\n\n<h2 id="preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</h2>\n\n<ul>\n<li>Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE adem\xe1s de MYSQL_PASSWORD)</li>\n</ul>\n\n<hr />\n\n<h2 id="creando-un-secreto-sencillo">Creando un secreto sencillo</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ openssl rand -base64 20 | docker secret create mi_secreto -\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets\n$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto\n</code></pre>\n\n<p>???\nSi commiteamos el container a una imagen, el secreto es desmontado</p>\n\n<h2 id="si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</h2>\n\n<h2 id="utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</h2>\n\n<pre><code class="language-yaml">version: \'3.1\'\nservices:\n    test:\n        image: \'alpine\'\n        command: \'cat /run/secrets/my_secret\'\n        secrets: \n            - my_secret\nsecrets:\n    my_secret:\n        file: ./mysecret.txt\n        # o external: true para tomarlo del swarm\n</code></pre>\n\n<p>???\nGracias al stack del compose</p>\n\n<h2 id="docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</h2>\n\n<h2 id="usando-https-con-secrets">Usando https con secrets</h2>\n\n<ol>\n<li>Generar certificado con let&rsquo;s encrypt, self-signed u otra CA</li>\n<li>Preparar nginx config</li>\n<li>Preparar secrets en el swarm\n<code>shell\n$ docker secret create site.key site.key\n$ docker secret create site.crt site.crt\n$ docker secret create site.conf site.conf\n</code></li>\n\n<li><p>Crear el servicio</p>\n\n<pre><code class="language-shell">$ docker service create --name nginx --secret site.key \\\n --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \\\n sh -c &quot;ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf &amp;&amp; exec nginx -g \'daemon off;\'&quot;\n</code></pre>\n\n<p>???</p>\n\n<h2 id="daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</h2>\n\n<h2 id="resumen-de-comandos">Resumen de comandos</h2>\n\n<pre><code class="language-shell">$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ echo &quot;a&quot; | docker secret create mi_secreto -\n$ docker secret inspect mi_secreto\n$ docker secret ls\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker service update mi_servicio --secret-rm mi_secreto\n$ docker service update mi_servicio --secret-add mi_nuevo_secreto\n$ docker secret rm mi_secreto\n</code></pre>\n\n<p>???</p>\n\n<h2 id="aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</h2>\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1></li>\n</ol>\n',Summary:"Docker secrets Por nicosommi name: agenda Agenda Agenda e introducci\xf3n Como surgen? \xbfQu\xe9 son los secrets? \xbfPara que sirven? Anotaciones de seguridad Detalles de utilizaci\xf3n Preparando nuestras im\xe1genes Creando un secreto sencillo Utilizando secrets con YML&rsquo;s de docker compose Usando https con secrets Resumen de comandos Q &amp; A Fin \xbfComo surgen? Porque la comunidad toma decisiones heterogeneas y peligrosas: - Usar variables de entorno (12 factor app) - Variables de entorno en build - Manual build (commit) - Custom hacks (curl a webserver) &hellip; Se necesitan do&rsquo;s and don&rsquo;ts ???",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#docker-secrets">Docker secrets</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#como-surgen">\xbfComo surgen?</a></li>\n<li><a href="#hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos">- hasta se decidio no encriptarlas solo para que la gente no las use para secretos</a></li>\n<li><a href="#qu\xe9-son-los-secrets">\xbfQu\xe9 son los secrets?</a></li>\n<li><a href="#hay-un-issue-en-curso-para-build-time-secrets">Hay un issue en curso para build time secrets</a></li>\n<li><a href="#para-que-sirven">\xbfPara que sirven?</a></li>\n<li><a href="#anotaciones-de-seguridad">Anotaciones de seguridad</a></li>\n<li><a href="#detalles-de-utilizaci\xf3n">Detalles de utilizaci\xf3n</a></li>\n<li><a href="#preparando-nuestras-im\xe1genes">Preparando nuestras im\xe1genes</a></li>\n<li><a href="#creando-un-secreto-sencillo">Creando un secreto sencillo</a></li>\n<li><a href="#si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano">Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano</a></li>\n<li><a href="#utilizando-secrets-con-yml-s-de-docker-compose">Utilizando secrets con YML&rsquo;s de docker compose</a></li>\n<li><a href="#docker-stack-deploy-c-file-yml-name">docker stack deploy -c file.yml name</a></li>\n<li><a href="#usando-https-con-secrets">Usando https con secrets</a></li>\n<li><a href="#daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container">Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container</a></li>\n<li><a href="#resumen-de-comandos">Resumen de comandos</a></li>\n<li><a href="#aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs">Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:990,FuzzyWordCount:1e3,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker secrets",Description:"",Keywords:[],Date:"2017-03-29T15:38:10-03:00",Lastmod:"2017-03-29T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="scripts">Scripts</h1>\n\n<h2 id="problema">Problema</h2>\n\n<p>Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.\nUno de estos problemas, una vez elegidos los paquetes, es armar una serie de scripts que nos brinden todas las tareas que necesitamos.\nEnumerando, en escenarios tipicos necesitamos minimamente:\n- test\n- test watch\n- test con reporte de coverage completo\n- test watch con un reporte de coverage completo\n- start con live reload\n- start\n- lint\n- build (transpilacion, webpack, etc)\n- &hellip;etc&hellip; (chequeo de dependencias, )</p>\n\n<p>De proyecto en proyecto, cambiando clientes, equipos, lenguajes, estandares, y otras cosas, cambian las estructuras del proyecto, la ubicacion de los archivos, los frameworks, las costumbres, y muchas otras cosas mas.\nSin embargo, estos scripts, aunque cambian ligeramente, siempre estan, y si no estan, estaria bien que estuviesen, lo cual es un punto muy importante, ya que algunas veces esto nos lleva a tener menos &ldquo;comodidades&rdquo; para producir codigo de calidad.\nEste problema es el que vengo enfrentando una vez tras otra, y ya he probado varias alternativas:</p>\n\n<h2 id="intento-1-grunt-gulp">Intento 1: grunt/gulp</h2>\n\n<p>Grunt y gulp, para un recien iniciado, significa produccion rapida. Son sencillos de aprender y nos permiten realizar cosas relativamente complejas con dependencias entre tareas que ejecutan scripts.<br />\nSin embargo, a mi personalmente no me gusta la dependencia que se genera con dichos frameworks que a mi criterio, resuelven las cosas de una manera que no es la optima.<br />\nUno termina sospechando que con npm y sus scripts deberia ser suficiente. Nos queda el sabor de que son sobre disenos para la mayoria de los casos.</p>\n\n<h2 id="intento-2-npm-suelto">Intento 2: npm suelto</h2>\n\n<p>Luego del intento anterior, y con el criterio de utilizar lo que es realmente necesario, uno intenta sacarle el maximo provecho a npm. Esto es realmente muy sencillo y funciona muy bien.\nSimplemente agregamos scripts y combinamos comandos o llamamos a otros scripts.\nEsto sin embargo tiene una dependencia implicita: el sistema operativo. Muchos comandos son particulares de UNIX y no funcionan en Windows.</p>\n\n<h2 id="intento-3-makefile">Intento 3: makefile</h2>\n\n<p>Es una alternativa interesante, muy util, mucho mas performante que un manejador de dependencias en javascript, y mas sencillo tambien, aunque suele asustar a mucha gente.<br />\nLo cierto es que resuelve el core de grunt/gulp y nos permite luego hacer lo que queramos.<br />\nEs una de las mejores a mi parecer, y si bien no muchos la eligen, he visto varios projectos con su Makefile.</p>\n\n<p>En este post quiero probar dos ideas que aun no he visto por alli:</p>\n\n<h2 id="idea-1-shelljs">Idea 1: shelljs</h2>\n\n<p>Esta idea consiste en llamar, desde npm, a scripts que son una secuencia de comandos en shelljs.\nShell.js para quienes no la conocen es una libreria con una implementacion de POSIX en javascript. Es decir que con esto podemos utilizar comandos que funcionaran tambien en windows.\nUna solucion sencilla y eficaz.\nVeamos como seria un proyecto sencillo.</p>\n\n<h2 id="idea-2-docker">Idea 2: docker</h2>\n\n<p>Esta vez, yendo un paso mas alla, cada comando de npm podria correr en un contenedor efimero que utilice siempre la misma plataforma, por ejemplo un alpine linux o un ubuntu.\nEsto tiene la ventaja de utilizar los comandos del shell que mas nos guste, y del sistema operativo de nuestra preferencia.\nLa implementacion sin embargo nos genera una dependencia: docker.\nPersonalmente creo que docker debe estar instalado en todas las computadoras, ya que es el futuro&hellip; (en realidad ya es el presente) por lo que para mis proyectos no lo considero un impedimento.\nAdemas de la dependencia, hay una minima complejidad en la implementacion: se requiere un conocimiento de docker.\nAunque para esto ultimo, he desarrollado un paquete.\nVeamos como seria un ejemplo sin dicho paquete:\nY ahora uno utilizando este paquete:</p>\n\n<h2 id="un-poco-de-mi-historia">Un poco de mi historia</h2>\n\n<p>Cuando arranque con node.js, alla por el 2012, npm fue una las primeras cosas con las que tuve contacto al poco tiempo.<br />\nEs el lugar donde convergen los paquetes de la comunidad. Tan fuerte era dicho lazo que pronto npm se introdujo en node y ahora forma parte del mismo paquete.\nCasi automaticamente, y un poco agnostico de npm, adopte soluciones parecidas a mis experiencias previas en java (maven y ant).</p>\n\n\x3c!--\n<resumen />\n- npm suelto\n- grunt/gulp\n- npm suelto\n- shelljs\n- docker\n--\x3e\n',Summary:"Scripts Problema Configurar un buen package json para que nuestro proyecto funcione, desde todos los aspectos que necesitamos, como queremos, es una tarea ardua, no solo por la cantidad de decisiones tecnologicas que debemos tomar, sino tambien porque hay muchas caracteristicas que deben ser abarcadas. De estos problemas salen todos los boilerplates, starter kits, yeoman, GDDify, etc. Que nos vienen a reducir la cantidad de trabajo necesario para comenzar a preocuparnos por el codigo de nuestra aplicacion y no tanto por lo periferico.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#scripts">Scripts</a>\n<ul>\n<li><a href="#problema">Problema</a></li>\n<li><a href="#intento-1-grunt-gulp">Intento 1: grunt/gulp</a></li>\n<li><a href="#intento-2-npm-suelto">Intento 2: npm suelto</a></li>\n<li><a href="#intento-3-makefile">Intento 3: makefile</a></li>\n<li><a href="#idea-1-shelljs">Idea 1: shelljs</a></li>\n<li><a href="#idea-2-docker">Idea 2: docker</a></li>\n<li><a href="#un-poco-de-mi-historia">Un poco de mi historia</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:765,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"scripts",Description:"",Keywords:[],Date:"2017-01-27T18:54:15-03:00",Lastmod:"2017-01-27T18:54:15-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n\x3c!-- class: middle --\x3e\n\n\x3c!-- layout: true --\x3e\n\n<hr />\n\n<p><img src="/assets/docker-74de8.png" width="400px"></img></p>\n\n<h1 id="introduccion-a-docker">Introduccion a docker</h1>\n\n<h2 id="por-nicosommi">Por nicosommi</h2>\n\n<hr />\n\n<p>name: agenda</p>\n\n<h2 id="agenda">Agenda</h2>\n\n<ol>\n<li>Agenda y alcance</li>\n<li>Fundamentos</li>\n<li>Casos de uso</li>\n<li>Por dentro</li>\n<li>Componentes</li>\n<li>Ejemplo sencillo</li>\n<li>Q &amp; A</li>\n<li>Mas componentes</li>\n<li>Comandos sobre contenedores e im\xe1genes</li>\n<li>Ejemplo lateral</li>\n<li>T\xe9cnica para construir un Dockerfile</li>\n<li>Buenas pr\xe1cticas</li>\n<li>Docker para SPA, web apps, etc</li>\n<li>Anexo: Services</li>\n<li>Q &amp; A</li>\n</ol>\n\n<hr />\n\n<p>class: center</p>\n\n<h2 id="que-es">Que es?</h2>\n\n<p><center>\n  <img src="/assets/docker-89c82.png" width="400px"></img>\n</center></p>\n\n<p>???\nDisculpen el teclado en ingles</p>\n\n<hr />\n\n<ul>\n<li>T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.</li>\n<li>Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.</li>\n<li>UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios</li>\n<li>Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)\n<center>\n<img src="/assets/docker-28b55.png" width="300px"></img>\n</center></li>\n</ul>\n\n<hr />\n\n<p>class: right\n<img style="position: absolute" src="/assets/docker-04a7d.png" width="200px"></img></p>\n\n<h2 id="es-una-maquina-virtual-no">Es una maquina virtual? No.</h2>\n\n<h2 id="como-se-diferencia-de-una">Como se diferencia de una?</h2>\n\n<hr />\n\n<p>Se diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.\n<center>\n  <img src="/assets/history.png" width="600px"></img>\n</center>\n???\nComentar:\n* historia\n* primero escalabilidad horizontal\n* despues optimizar recursos\n* adicionales: docker swarm independiente\nNos permite cambiar la unidad de medida de nuestra aplicaci\xf3n de m\xe1quinas virtuales o f\xedsicas a simples containers.</p>\n\n<hr />\n\n<h2 id="en-donde-corre">En donde corre?</h2>\n\n<p>En sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).\nTambien, recientemente incorporaron contenedores basados en windows server.\n<center>\n  <img src="/assets/platforms.png" width="400px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-6a999.png" width="100px"></img>\n</div></p>\n\n<h2 id="nbsp-para-que-sirve">&nbsp;Para que sirve?</h2>\n\n<p>Para isolar el entorno de ejecuci\xf3n de una aplicaci\xf3n.</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/pencil.png" width="80px"></img>\n</div></p>\n\n<h2 id="nbsp-datos">&nbsp;Datos</h2>\n\n<ul>\n<li>Es open source desde el 2013.</li>\n<li>Esta escrito en go.</li>\n<li>Lo comenz\xf3 Solomon Hykes en dotCloud.</li>\n</ul>\n\n<p>???\nGo esta pensado para concurrencia y productividad y tiene garbage collection</p>\n\n<hr />\n\n<h2 id="casos-de-uso">Casos de uso</h2>\n\n<p><img src="/assets/usecases.png" width="90%"></img>\n???\nInvitar a sugerir ideas u opinar sobre las mencionadas\nTexto:\n* CI/CD\n* Entornos de desarrollo\n* Compilar para distintos targets\n* PaaS\n* Escalabilidad horizontal\n* High availability cluster\n* Aislar ejecucion de codigo de manera segura (webpackbin, etc)\n* Aprendizaje/investigacion\n* Etc&hellip;</p>\n\n<hr />\n\n<h2 id="por-dentro">Por dentro</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="140px"></img>\n</div></p>\n\n<h2 id="nbsp-docker-image">&nbsp;Docker Image</h2>\n\n<ul>\n<li>Es un template con instrucciones para la construccion de contenedores</li>\n<li>Tiene una o varias capas de solo lectura a partir del cual se crean contenedores</li>\n<li>Se pueden extender o empezar de cero</li>\n<li>Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile</li>\n<li>El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.</li>\n<li>Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-container">Docker Container</h2>\n\n<ul>\n<li>Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.</li>\n<li>Contiene una fina capa adicional a las de su imagen con permisos de escritura.</li>\n<li>Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.</li>\n<li>Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.\n<center>\n<img src="/assets/docker-bb91f.png" width="300px"></img>\n</center></li>\n</ul>\n\n<p>???\nPreguntar diferencia entre contenedor e imagen y clarificar dudas</p>\n\n<hr />\n\n<h2 id="acerca-del-contenedor">Acerca del Contenedor</h2>\n\n<p>Previamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).\n<center>\n  <img src="/assets/docker-71f58.png" width="240px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-1c5ae.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-storage">&nbsp;Storage</h2>\n\n<ul>\n<li>Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente</li>\n<li>Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor</li>\n<li>Docker utiliza &lsquo;copy on write&rsquo;, es decir que copia una capa s\xf3lo cuando la va a cambiar, lo que permite optimizar el tama\xf1o en disco ocupado por la imagen y el tiempo de arranque de los contenedores.</li>\n<li>Toda la data de imagenes y contenedores se guarda en una carpeta.</li>\n<li>Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir seg\xfan caso de uso, experiencia del equipo y linux distro.</li>\n</ul>\n\n<hr />\n\n<h2 id="componentes">Componentes</h2>\n\n<hr />\n\n<h2 id="docker-engine">Docker Engine</h2>\n\n<p>Aplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.\n<img src="/assets/docker-9cf40.png" alt="Docker engine" /></p>\n\n<hr />\n\n<h2 id="machine">Machine</h2>\n\n<ul>\n<li>Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.</li>\n<li>Nos deja instalar docker en terminales remotas y provisionar swarms.\n<img src="/assets/docker-7ada0.png" width="95%"></img>\n???\nPermite especificar drivers para distintos providers</li>\n</ul>\n\n<hr />\n\n<h2 id="compose">Compose</h2>\n\n<p>Es una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.\n* Detecta cambios y recrea solo lo necesario\n* Soporta variables en el compose file\n* Guarda la data persistida en los volumes\n* Es muy util para entornos de desarrollo, para deployment en un solo host\n<center>\n  <img src="/assets/docker-32d4f.png" width="200px"></img>\n</center></p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/ubuntu.png" width="50px"></img>\n</div></p>\n\n<h2 id="nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</h2>\n\n<pre><code class="language-bash">$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash\nroot@3883936319fb:/# lsb_release -a\n(...) Description:\tUbuntu 14.04.5 LTS (...)\n</code></pre>\n\n<ol>\n<li>Trae la ultima imagen, o si ya existe la utiliza.</li>\n<li>Crea, en base a la imagen, un contenedor.</li>\n<li>Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.</li>\n<li>Asigna una interfaz de red con la cual habla con el host</li>\n<li>Setea una IP de una pool</li>\n<li>Ejecuta el proceso solicitado (/bin/bash)</li>\n<li>Captura y devuelve el output del contenedor por haber indicado -it</li>\n</ol>\n\n<p>???\ni es para el interactive mode, que deja el stdin esperando\nt asigna un pseudo tty / pty\n* pull\n* hablar de pull y de los otros parametros como name, port, volume</p>\n\n<hr />\n\n<h2 id="wordpress">Wordpress</h2>\n\n<pre>\n  <code class="bash hljs remark-code remark-code-line" style="font-size: 13px;">\n  version: \'2\'\n\n  services:\n     db:\n       image: mysql:5.7\n       volumes:\n         - "./.data/db:/var/lib/mysql"\n       restart: always\n       environment: (...)\n\n     wordpress:\n       depends_on:\n         - db\n       image: wordpress:latest\n       links:\n         - db\n       ports:\n         - "8000:80"\n       restart: always\n       environment: (...)\n  </code>\n</pre>\n\n<p>???\nEnvironment est\xe1 cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la p\xe1gina oficial</p>\n\n<hr />\n\n<h1 id="q-a-parcial">Q &amp; A Parcial</h1>\n\n<hr />\n\n<h2 id="docker-registry">Docker Registry</h2>\n\n<ul>\n<li>Es una libreria de imagenes.</li>\n<li>Puede ser publico o privado.</li>\n<li>Una vez construida la imagen, hacemos un push al registry</li>\n<li>Docker hub es un registry publico oficial</li>\n<li>Hay una imagen publica registry y una para el trusted registry\n<center>\n<img src="/assets/docker-89504.png" width="240px"></img>\n</center>\n???\nTrusted registry es con soporte comercial</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volumes">Data volumes</h2>\n\n<ul>\n<li>Encontrar\n<code>bash\n$ docker inspect myContainer\n</code></li>\n<li>Se pueden crear vol\xfamenes o montar desde el host\n<code>bash\n$ docker run -d -P --name web -v /webapp myImage npm start\n$ docker run -d -P --name web -v /src:/webapp myImage npm start\n</code>\n???</li>\n<li>bypass a unionfs</li>\n<li>si no esta bindeado a host, copia el contenido adentro</li>\n<li>permite compartir entre containers con compose o con named volumes (flocker por ejemplo)</li>\n<li>esta dise\xf1ado para cambiar el container y que la data persista, incluso aunque ningun container la referencie</li>\n<li>soporta SCSI, NFS, etc.</li>\n</ul>\n\n<hr />\n\n<h2 id="data-volume-containers">Data volume containers</h2>\n\n<ul>\n<li><em><a href="/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/">Es una pr\xe1ctica</a></em> que consiste en crear un contenedor que s\xf3lo contiene data que luego ser\xe1 utilizada por otros contenedores\n<code>bash\n$ docker create -v /dbdata --name mydb postgres /bin/true\n$ docker run -d --volumes-from mydb --name db1 postgres\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="network">Network</h2>\n\n<ul>\n<li>Puede ser bridge, none  y host\n<code>bash\n$ docker network ls\n</code></li>\n<li>Pueden verse los detalles\n<code>bash\n$ docker network inspect bridge\n</code></li>\n<li>Se pueden crear nuestras redes en las cuales correr containers\n???</li>\n<li>un container puede pertenecer a varias redes</li>\n<li>se ven entre los de la misma red</li>\n<li>puede ser overlay (swarm mode) o custom driver</li>\n<li>embedded dns en custom networks</li>\n<li>antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts</li>\n</ul>\n\n<hr />\n\n<h2 id="docker-aplicado">Docker Aplicado</h2>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-28b55.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</h2>\n\n<ul>\n<li><p>Run, Start, Stop</p>\n\n<pre><code class="language-bash"># crea un contenedor en base a una imagen y corre el comando bash\n$ docker run --name miContenedor alpine echo &quot;Hola&quot;\n# arrancar un contenedor ya creado\n$ docker start miContenedor\n# parar contenedor con time to kill\n$ docker stop -t 10 miContenedor\n# also valid: docker restart -t 10 miContenedor\n</code></pre></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Listar, Inspeccionar\n<code>bash\n$ docker rm miContenedor\n$ docker ps\n$ docker ps --all\n$ docker inspect miContenedor\n</code></li>\n</ul>\n\n<p>???\n* hablar de se\xf1ales y su relacion con stop</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-c4f70.png" width="70px"></img>\n</div></p>\n\n<h2 id="nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</h2>\n\n<ul>\n<li>Cargar, Listar, Inspeccionar\n<code>bash\n$ docker pull repo/image:tag\n$ docker load -i imagen.tar\n$ docker images\n$ docker inspect alpine\n</code></li>\n</ul>\n\n<hr />\n\n<ul>\n<li>Borrar, Construir, Taggear, Subir\n<code>bash\n$ docker rmi repo/image:tag\n$ docker build -t image-name .\n$ docker tag image-name repo/image-name:tag\n$ docker push repo/image-name:tag\n</code></li>\n</ul>\n\n<p>???\n* es necesario un docker login myrepo:2376</p>\n\n<hr />\n\n<h2 id="ejemplo-existente">Ejemplo existente</h2>\n\n<pre><code class="language-bash">$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc\n</code></pre>\n\n<p><center>\n  <img src="/assets/vncffox.png" width="200px"></img>\n</center></p>\n\n<p>???\nLuego con un cliente vnc accedemos a un lxde con firefox instalado</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-08dc8.png" width="45px"></img>\n</div></p>\n\n<h2 id="nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</h2>\n\n<ol>\n<li>Se inicia un shell sobre una imagen base\n<code>bash\n$ docker run -it --name testC ubuntu sh\n</code></li>\n<li>Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile</li>\n</ol>\n\n<p>???\n- tar\n- scratch image (reserved word)\n- <em>history</em> de image\n- <em>commit</em> del container como no recomendada mas que para pruebas y debugging</p>\n\n<hr />\n\n<h2 id="debug">Debug</h2>\n\n<p>a. Entramos a un contenedor corriendo</p>\n\n<pre><code class="language-bash"># otra alternativa, tomar una\n$ docker exec -it nignxTest /bin/bash\n</code></pre>\n\n<p>b. Miramos los logs conectados</p>\n\n<pre><code class="language-bash">docker logs nginxTest\n</code></pre>\n\n<hr />\n\n<h2 id="buenas-pr\xe1cticas">Buenas pr\xe1cticas</h2>\n\n<ul>\n<li>Containers lo m\xe1s prescindibles posibles</li>\n<li>Usar .dockerignore</li>\n<li>Evitar instalar paquetes innecesarios</li>\n<li>Correr un s\xf3lo proceso por container</li>\n<li>Minimizar la cantidad de capas</li>\n<li>Organizar argumentos y comandos de multiples lineas con <br /></li>\n<li>Contemplar el build cache\n<center>\n<img src="/assets/docker-d0772.png" width="50%"></img>\n</center></li>\n</ul>\n\n<p>???\n* prescindible = efimero = pueden ser parados, destruidos y reemplazados\n* usar cache o no\n* el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente\n* una vez invalidado, ya no se utiliza para las subsecuentes capas</p>\n\n<hr />\n\n<h2 id="ejemplos-docker-para-web">Ejemplos docker para web</h2>\n\n<hr />\n\n<h2 id="spa-build">SPA build</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nADD . /src\nWORKDIR /src\nRUN rm -fR ./node_modules &amp;&amp; \\\n  npm i\nENTRYPOINT [&quot;npm&quot;, &quot;build&quot;]\n</code></pre>\n\n<p>???\nHay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el \xb4shell\xb4 form que hace &ldquo;/bin/sh -c&rdquo; lo que oculta se\xf1ales por ejemplo docker stop)\n&ndash;entrypoint overrides\n* tiene que haber al menos un cmd o entrypoint\n* entrypoint para ejecutables\n* cmd es mas para preparar parametros</p>\n\n<hr />\n\n<h2 id="spa-serve">SPA serve</h2>\n\n<pre><code class="language-Dockerfile">version: \'2\'\nservices:\n  spa:\n    image: nginx\n    volumes:\n      - &quot;.:/usr/share/nginx/html:ro&quot;\n    ports:\n      - &quot;10000:80&quot;\n</code></pre>\n\n<hr />\n\n<h2 id="api">API</h2>\n\n<pre><code class="language-Dockerfile">FROM node:6\nEXPOSE 3000\nADD . /src\nWORKDIR /src\nRUN npm rebuild &amp;&amp; \\\n  npm test\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre>\n\n<p>???\nHay muchas alternativas, hay una tarea de dise\xf1o impl\xedcita</p>\n\n<hr />\n\n<p><div style="float: left;">\n  <img src="/assets/docker-32d4f.png" width="50px"></img>\n</div>\n##&nbsp; Compose</p>\n\n<pre><code class="language-Dockerfile"># docker-compose.yml just for api\nversion: \'2\'\nservices:\n  api:\n    image: mirepo.com/api-image:production\n    ports:\n      - &quot;3000:3000&quot;\n    depends_on:\n      - mongo\n    environment:\n      PORT: 3000\n  mongo:\n    image: mongo\n    ports:\n      - &quot;27017:27017&quot;\n    volumes:\n      - ./mongodata:/data/db\n</code></pre>\n\n<p>???</p>\n\n<h2 id="links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</h2>\n\n<h2 id="comandos-para-compose">Comandos para compose</h2>\n\n<ul>\n<li>Correr, Parar, Borrar\n<code>bash\n$ docker-compose up -d\n$ docker-compose stop -t 10\n$ docker-compose rm\n$ docker-compose --help\n</code></li>\n</ul>\n\n<hr />\n\n<h2 id="anexo-docker-services">Anexo: Docker services</h2>\n\n<p>Es una abstracci\xf3n de los contenedores.\n* Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien\n* Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos\n* Para el cliente, el servicio luce como un docker daemon regular\n* Los servicios son los que brindan escalabilidad y flexibilidad de updates\n???\nswarm = el plural de docker nodes&hellip; manada/multitud/enjambre/nube\n* temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc</p>\n\n<hr />\n\n<h2 id="operaciones-con-services">Operaciones con services</h2>\n\n<pre><code class="language-bash">$ docker service create \\\n  --name my-service \\\n  --replicas 3 \\\n  nginx:alpine\n\n$ docker-compose scale service-name=2\n</code></pre>\n\n<p>???\n* services global/replicated</p>\n\n<hr />\n\n<h1 id="q-a">Q &amp; A</h1>\n\n<hr />\n\n<h1 id="gracias">Gracias!</h1>\n',Summary:"Introduccion a docker Por nicosommi name: agenda Agenda Agenda y alcance Fundamentos Casos de uso Por dentro Componentes Ejemplo sencillo Q &amp; A Mas componentes Comandos sobre contenedores e im\xe1genes Ejemplo lateral T\xe9cnica para construir un Dockerfile Buenas pr\xe1cticas Docker para SPA, web apps, etc Anexo: Services Q &amp; A class: center Que es? ??? Disculpen el teclado en ingles T\xe9cnicamente es una capa de abstracci\xf3n para la utilizaci\xf3n de cgroups, namespaces y UnionFS de linux.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#introduccion-a-docker">Introduccion a docker</a>\n<ul>\n<li><a href="#por-nicosommi">Por nicosommi</a></li>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#que-es">Que es?</a></li>\n<li><a href="#es-una-maquina-virtual-no">Es una maquina virtual? No.</a></li>\n<li><a href="#como-se-diferencia-de-una">Como se diferencia de una?</a></li>\n<li><a href="#en-donde-corre">En donde corre?</a></li>\n<li><a href="#nbsp-para-que-sirve">&nbsp;Para que sirve?</a></li>\n<li><a href="#nbsp-datos">&nbsp;Datos</a></li>\n<li><a href="#casos-de-uso">Casos de uso</a></li>\n<li><a href="#por-dentro">Por dentro</a></li>\n<li><a href="#nbsp-docker-image">&nbsp;Docker Image</a></li>\n<li><a href="#docker-container">Docker Container</a></li>\n<li><a href="#acerca-del-contenedor">Acerca del Contenedor</a></li>\n<li><a href="#nbsp-storage">&nbsp;Storage</a></li>\n<li><a href="#componentes">Componentes</a></li>\n<li><a href="#docker-engine">Docker Engine</a></li>\n<li><a href="#machine">Machine</a></li>\n<li><a href="#compose">Compose</a></li>\n<li><a href="#nbsp-ejemplo-sencillo">&nbsp;Ejemplo sencillo</a></li>\n<li><a href="#wordpress">Wordpress</a></li>\n</ul></li>\n<li><a href="#q-a-parcial">Q &amp; A Parcial</a>\n<ul>\n<li><a href="#docker-registry">Docker Registry</a></li>\n<li><a href="#data-volumes">Data volumes</a></li>\n<li><a href="#data-volume-containers">Data volume containers</a></li>\n<li><a href="#network">Network</a></li>\n<li><a href="#docker-aplicado">Docker Aplicado</a></li>\n<li><a href="#nbsp-operaciones-sobre-contenedores">&nbsp;Operaciones sobre contenedores</a></li>\n<li><a href="#nbsp-operaciones-sobre-imagenes">&nbsp;Operaciones sobre imagenes</a></li>\n<li><a href="#ejemplo-existente">Ejemplo existente</a></li>\n<li><a href="#nbsp-tecnica-para-construir-un-dockerfile">&nbsp;Tecnica para construir un Dockerfile</a></li>\n<li><a href="#debug">Debug</a></li>\n<li><a href="#buenas-pr\xe1cticas">Buenas pr\xe1cticas</a></li>\n<li><a href="#ejemplos-docker-para-web">Ejemplos docker para web</a></li>\n<li><a href="#spa-build">SPA build</a></li>\n<li><a href="#spa-serve">SPA serve</a></li>\n<li><a href="#api">API</a></li>\n<li><a href="#links-puede-utilizarse-para-definir-alias-pero-no-es-necesario">Links puede utilizarse para definir alias pero no es necesario</a></li>\n<li><a href="#comandos-para-compose">Comandos para compose</a></li>\n<li><a href="#anexo-docker-services">Anexo: Docker services</a></li>\n<li><a href="#operaciones-con-services">Operaciones con services</a></li>\n</ul></li>\n<li><a href="#q-a">Q &amp; A</a></li>\n<li><a href="#gracias">Gracias!</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1863,FuzzyWordCount:1900,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"docker",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="proxies-en-es6">Proxies en ES6</h1>\n\n<hr />\n\n<h2 id="agenda">Agenda</h2>\n\n<p><small>\n  Terminolog\xeda<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n  Desarrollo<br />\n  Casos de uso<br />\n  Ejercitaci\xf3n<br />\n</small></p>\n\n<hr />\n\n<h2 id="terminolog\xeda">Terminolog\xeda</h2>\n\n<hr />\n\n<p>\xbfQue es un proxy?<br />\nOrigen: <em>prokecye</em><br />\n  &ldquo;agency of one who acts instead of another&rdquo;<br />\nEn espa\xf1ol significa <em>apoderado</em><br />\n  <em>adj.</em> Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre</p>\n\n<p>???\nEjemplo, firmar un poder para hacer un tr\xe1mite</p>\n\n<hr />\n\n<p>\xbfQue es un protocolo?<br />\nUn <em>protocolo</em> es un conjunto de normas. Esto podria verse como un conjunto interfaces con reglas para usarlas, y ECMAScript define un protocolo para manejar objetos. Este protocolo opera a nivel Meta.</p>\n\n<p>???\nLa definici\xf3n no es la misma que suele utilizarse de protocolos para interfaces de otros lenguajes porque tambi\xe9n incluye reglas.</p>\n\n<hr />\n\n<p><em>Metaprogramming</em><br />\nEn la programaci\xf3n hay niveles base y meta. El nivel base procesa el input del usuario, mientras que el meta procesa al base.</p>\n\n<p>???\nPueden incluso ser dos lenguajes distintos.\nEn es como los closures, los usamos sin saber.\nHay unos que usamos constantemente: Object.*</p>\n\n<hr />\n\n<p><em>Meta Object Protocol</em>  es como se lo llama al protocolo de manejo de objetos de ECMAScript. Como particularidad, son internos (no son accesibles desde JS). Los engines pueden usarlos o no.</p>\n\n<hr />\n\n<ul>\n<li>Los metodos de un objeto del MOP llaman operaciones del engine, algunas que llaman a otras como [[Get]], que se llaman <em>operaciones derivadas</em> y las que son independientes, que se llaman <em>operaciones fundamentales</em>.<br /></li>\n</ul>\n\n<p>???\nEjemplo [[Get]] usa getOwnProperty, getPrototypeOf y Call</p>\n\n<hr />\n\n<p><em>Tipos de metaprogramming</em><br />\n- Introspection: permite s\xf3lo leer la estructura\n- Self-modification: permite modificar la estructura\n- Intercession: redefine la semantica de algunas operaciones</p>\n\n<p>???\nEjemplos Object.keys, moveProperty, proxy respectivamente</p>\n\n<hr />\n\n<p><em>Elementos del proxy</em><br />\n- target: es el fallback del handler, el representado\n[[ProxyTarget]]\n- handler: es quien, en caso de definir el m\xe9todo indicado, intercepta la llamada, el representante\n[[ProxyHandler]]\n- proxy: el que compone ambos y delega a uno u otro</p>\n\n<pre><code>const proxy = new Proxy(target, handler); // OK\nvar p = Proxy(target, handler); // TypeError: calling a builtin Proxy constructor without new is forbidden\n</code></pre>\n\n<p>???\nEl m\xe9todo del handler se llama trap.<br />\nEs decir que el proxy &ldquo;wrappea&rdquo; al target.</p>\n\n<hr />\n\n<pre><code>class MyHandler {\n  get(target, key, receiver) {\n    return Reflect[key];\n  }\n}\n</code></pre>\n\n<p>???\nReflect no se puede instanciar, tiene los mismos metodos que el handler, es como Math, todo estatico\nPor ejemplo Reflect.apply es menos verboso que Function.prototype.apply\nAlgunas veces nos da informaci\xf3n adicional como Reflect.set -&gt; [boolean]</p>\n\n<hr />\n\n<p><em>\xbfQue operaciones pueden ser interceptadas?</em><br />\nEsto es selectivo, no se puede interceptar todo o solo las fundamentales como podria suponerse.<br />\nEsto es por dos razones\n- porque una operacion estable corre el riesgo de que un proxy la haga inestable\n- porque tener mucho codigo custom intercalado haria el programa muy dificil de entender y debuggear</p>\n\n<p>???\nejemplo el === que no puede ser trapeada.\nEstable: sin side effects, que produce siempre el mismo resultado ante los mismos argumentos<br />\nSe podr\xeda pensar como que con interceptar s\xf3lo operaciones fundamentales, pero esto no es tan \xfatil ya que no inlcuir\xeda get por ejemplo.\nVer codigo de api client.</p>\n\n<hr />\n\n<p><em>Prototype chain</em><br />\nLos engines en su comportamiento habitual, al subir por el chain, van a disparar las traps que encuentren.<br />\nSin embargo, hay ciertas operaciones que suben por el prototype chain si no encuentran la property en el handler como get, set y has, las demas no alteran el prototype chain.</p>\n\n<p>???\nVer codigo y test de ghost.\nInstanceof &ldquo;lies&rdquo;</p>\n\n<hr />\n\n<p><em>B\xe1sicas</em></p>\n\n<pre><code>defineProperty(target, propKey, propDesc) // \u2192 boolean  (fundamental)\n  // trigger: Object.defineProperty(proxy, propKey, propDesc)\ndeleteProperty(target, propKey) // \u2192 boolean  (fundamental)\n  // trigger: delete proxy[propKey], delete proxy.foo\nget(target, propKey, receiver) // \u2192 any\n  // trigger: receiver[propKey]\n  // trigger: receiver.foo\n</code></pre>\n\n<hr />\n\n<p><em>Casos de uso</em>\n  * API Client\n  * Tracing / Logging\n  * Trap undefined property access\n  * Type check</p>\n\n<p>???\n  Se\xf1alar el tracing puede implementarse cambiando el objeto.\n  Type check example: properties que son &ldquo;fieles&rdquo; a su tipo incial.\n  Ir viendo ejemplos de api client, logging y lock</p>\n\n<hr />\n\n<p><em>Preguntas</em></p>\n\n<hr />\n\n<p><em>Practica 1</em><br />\nHacer &ldquo;trap undefined&rdquo;<br />\n&ldquo;Objeto que tira excepcion cuando se accede a una propiedad undefined&rdquo;\n(30 minutos)</p>\n\n<p>???\nDebe tirar un ReferenceError si no esta. Debe devolver el valor si esta.\nProbar nested with lock.</p>\n\n<hr />\n\n<p><em>Compatibilidad</em>\n* Solo FF, CH, Edge, Opera, Safari 10, Node 6</p>\n\n<p>???\nNo hay polyfill.</p>\n\n<hr />\n\n<p><em>Tipos de proxy</em>\n* Wrappers (solo control) o Virtual Objects (agregan comporamiento)</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Propiedades del proxy</em>\n* Transparencia virtual: no podemos saber si un objeto es un proxy\n* Encapsulamiento: no podemos acceder al handler desde el proxy</p>\n\n<p>???\nWrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)</p>\n\n<hr />\n\n<p><em>Mas casos de uso</em>\n* DOM\n* Indices negativos de array\n* Data binding (polemico)\n* Profiling\n* RMI</p>\n\n<p>Note:\nDOM: usualmente est\xe1 implementado entre C++ y JS, y el context switch es costoso, lo que nos lleva a querer hacer el dom en js puro, pero hay cosas que no son tan simples de implementar, y ello fue una importante razon para hacer los proxies en JS (dom mas eficiente) y ademas que nos permite emular el browser (jsdom).</p>\n\n<p>Indices negativos como en algunos lenguajes.\nMencionar Object.observe (ES7) creado para binding por la pobre performance de los proxy, aunque abandonado por react.\nObject.observe no es necesario con la inmutabilidad, tratar browser como remote rendering, no storage y query\n(undo, state). Se dice que es lo que queremos, no lo que necesitamos (Stateful dom).\nProfiling para medir tiempo.\nRMI permite por ejemplo db access directo.</p>\n\n<hr />\n\n<p><em>Invariants</em><br />\nSi el target es no extensible y no configurable, lo invariante es forzado por el engine.</p>\n\n<p>???\nno extensible protege objetos, non configurability protege properties.\nCon los proxy se podr\xeda violar la invariabilidad, pero el engine lo prohibe chequeando los parametros y los resultados de los handlers, preventExtension, true y luego false, e igual para isExtensible y getOwnPropertyDescriptor</p>\n\n<hr />\n\n<p><em>Practica 2</em><br />\nMejorar api client<br />\n(30 minutos)</p>\n\n<p>???\nelegir algunos de los TODO</p>\n\n<hr />\n\n<p><em>Avanzadas 1</em></p>\n\n<pre><code>getOwnPropertyDescriptor(target, propKey) // \u2192 PropDesc|Undefined  (fundamental)  \n  // tby: Object.getOwnPropertyDescriptor(proxy, propKey)  \ngetPrototypeOf(target) // \u2192 Object|Null  (fundamental)  \n  // tby: Object.getPrototypeOf(proxy)  \nhas(target, propKey) // \u2192 boolean  \n  // tby: propKey in proxy\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 2</em></p>\n\n<pre><code>isExtensible(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.isExtensible(proxy)  \nownKeys(target) // \u2192 Array&lt;PropertyKey&gt;  (fundamental)  \n  // tby: Object.getOwnPropertyPropertyNames(proxy) (only uses string-valued keys)  \n  // tby: Object.getOwnPropertyPropertySymbols(proxy) (only uses symbol-valued keys)  \n  // tby: Object.keys(proxy) (only uses enumerable string-valued keys;\n  // enumerability is checked via Object.getOwnPropertyDescriptor)\n</code></pre>\n\n<hr />\n\n<p><em>Avanzadas 3</em></p>\n\n<pre><code>preventExtensions(target) // \u2192 boolean  (fundamental)  \n  // tby: Object.preventExtensions(proxy)  \nset(target, propKey, value, receiver) // \u2192 boolean  \n  // tby: receiver[propKey] = value  \n  // tby: receiver.foo = value // propKey = \'foo\'  \nsetPrototypeOf(target, proto) // \u2192 boolean  (fundamental)  \n  // tby: Object.setPrototypeOf(proxy, proto)\n</code></pre>\n\n<hr />\n\n<p><em>Para funciones</em></p>\n\n<pre><code>apply(target, thisArgument, argumentsList) // \u2192 any  \n  // tby: proxy.apply(thisArgument, argumentsList) (fundamental)  \n  // tby: proxy.call(thisArgument, ...argumentsList)  \n  // tby: proxy(...argumentsList)  \nconstruct(target, argumentsList) // \u2192 Object  \n  // tby: new proxy(..argumentsList)\n</code></pre>\n\n<hr />\n\n<p><em>Conclusion</em><br />\n* Performance\n* Debug\n* Casos de uso\n* Complejidad\n* Compatibilidad</p>\n\n<p>Note:\nPerformance: Conviene medir la performance en cada caso, evaluar que tan critica es la performance en nuestra app y tomar una decision.\nA mas c\xf3digo interceptado, menor performance, mayor dificultad de entender el codigo y de debug.\nRiesgo: podemos &ldquo;romper&rdquo; comportamientos, hacerlo inconsistente\nCasos de uso:</p>\n\n<hr />\n\n<p><em>Preguntas / Discusion / Ideas</em></p>\n\n<hr />\n\n<p>Gracias!</p>\n',Summary:"Proxies en ES6 Agenda Terminolog\xeda Desarrollo Casos de uso Ejercitaci\xf3n Desarrollo Casos de uso Ejercitaci\xf3n Terminolog\xeda \xbfQue es un proxy? Origen: prokecye &ldquo;agency of one who acts instead of another&rdquo; En espa\xf1ol significa apoderado adj. Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre ??? Ejemplo, firmar un poder para hacer un tr\xe1mite \xbfQue es un protocolo? Un protocolo es un conjunto de normas.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#proxies-en-es6">Proxies en ES6</a>\n<ul>\n<li><a href="#agenda">Agenda</a></li>\n<li><a href="#terminolog\xeda">Terminolog\xeda</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1238,FuzzyWordCount:1300,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"proxies",Description:"",Keywords:[],Date:"2016-10-24T15:38:10-03:00",Lastmod:"2016-10-24T15:38:10-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="organize-your-thunks">Organize your thunks</h1>\n',Summary:"Organize your thunks",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#organize-your-thunks">Organize your thunks</a></li>\n</ul>\n</nav>',Truncated:!1,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:3,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"tpipe redux",Description:"",Keywords:[],Date:"2016-10-05T17:14:32-03:00",Lastmod:"2016-10-05T17:14:32-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="react-native-en-ubuntu">React Native en Ubuntu</h1>\n\n<p>Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.</p>\n\n<h2 id="porque">Porque?</h2>\n\n<p>Como tengo cierto pasado en Java y Android, luego de unos intentos entend\xed lo que estaba sucediendo y lo hice funcionar en Ubuntu, pero como tengo tangos colegas que no pueden hacerlo funcionar y tampoco tienen una Mac, comparto el procedimiento con el mundo.</p>\n\n<h2 id="conociendo-los-elementos">Conociendo los elementos</h2>\n\n<p>Antes de ir elemento por elemento cabe destacar que si bien los componentes del SDK de android tienen una interfaz de usuario y vienen con su IDE oficial, tambi\xe9n se pueden utilizar por consola. Muchas instrucciones andan por ah\xed insistiendo en abrir este eclipse custom para acceder a las herramientas y esto no es la \xfanica opci\xf3n y para nada conveniente para un desarrollador javascript que suele utilizar Atom, Webstorm, Sublime o algo as\xed.</p>\n\n<h3 id="sdk">SDK</h3>\n\n<h3 id="driver">Driver</h3>\n\n<h3 id="emulador">Emulador</h3>\n\n<h3 id="dispositivo">Dispositivo</h3>\n\n<h2 id="comando-a-comando">Comando a comando</h2>\n\n<h2 id="entendiendo-todo">Entendiendo todo</h2>\n',Summary:"React Native en Ubuntu Al leer al d\xeda de hoy la documentaci\xf3n oficial de react native y el procedimiento de instalaci\xf3n, se omiten muchos detalles propios de la instalaci\xf3n y puesta a punto del Android SDK (s\xf3lo se provee el link). Como resultado quienes poseen una Mac y desarrollan en native para IPhone tienen con Xcode todo cocinado, pero los que tienen Ubuntu tienen que instalar todo a mano, pero con un background de javascript, y la historia se complica ya que la documentaci\xf3n de android es orientada a la comunidad Android / Java.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#react-native-en-ubuntu">React Native en Ubuntu</a>\n<ul>\n<li><a href="#porque">Porque?</a></li>\n<li><a href="#conociendo-los-elementos">Conociendo los elementos</a>\n<ul>\n<li><a href="#sdk">SDK</a></li>\n<li><a href="#driver">Driver</a></li>\n<li><a href="#emulador">Emulador</a></li>\n<li><a href="#dispositivo">Dispositivo</a></li>\n</ul></li>\n<li><a href="#comando-a-comando">Comando a comando</a></li>\n<li><a href="#entendiendo-todo">Entendiendo todo</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:225,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"react native ubuntu",Description:"",Keywords:[],Date:"2016-10-05T16:00:55-03:00",Lastmod:"2016-10-05T16:00:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="container-os">Container OS</h1>\n\n<p>En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto.</p>\n\n<p>Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.</p>\n\n<p><em>El futuro de los sistemas operativos son los contenedores para correr cualquier aplicaci\xf3n.</em></p>\n\n<p>Cuando uno comienza a jugar con Docker se empieza a dar cuenta de que puede ejecutar algo con un entorno controlado en cualquier otro entorno host. Podemos correr un apache en ubuntu dentro de un windows o de otro ubuntu. O un nginx en un coreos dentro de una mac. Otro ejemplo, se puede compilar un programa en go lang para cualquier plataforma desde un ubuntu sin siquiera instalar go. Una locura. Realmente.</p>\n\n<p>Esto en mi caso me hizo relacionarlo con el furor de las api rest con las que lidio d\xeda a d\xeda y con los procesos en s\xed mismos.</p>\n\n<p>Por otro lado pens\xe9 en los problemas que enfrentan el SO y los programas en cuanto a todo lo compartido entre procesos, memoria, puertos, archivos, etc.</p>\n\n<p>Todo esto fu\xe9 solucionado del lado de las aplicaciones y del SO con mucho esfuerzo en el tiempo y con desarrollos y configuraciones cuidadosas. Y fu\xe9 muy fruct\xedfero&hellip; pero con Docker todo esto sera mas sencillo.</p>\n\n<p><em>Ya no tendr\xe1 sentido tener windows, ubuntu, u OSX. Todo correr\xe1 en contenedores con su SO y su entorno optimo y controlado y el SO host decidir\xe1 que comparte con \xe9l. Los sistemas operativos ser\xe1n minimos y meros manejadores del engine de contenedores que solo tendran lo necesario para que este funcione.</em></p>\n\n<p>Las aplicaciones nativas careceran de sentido ya que vendran con su sistema operativo incorporado. Las ventanas seran simples consolas de los contenedores. La escalabilidad ser\xe1 natural. El hardware estar\xe1 finalmente desacoplado de las aplicaciones.</p>\n',Summary:"Container OS En las \xfaltimas semanas estuve aprendiendo bastante de Docker, tanto teor\xeda como en experiencia de campo, y como suele ocurrir cuando nos metemos en un mundo nuevo se nos ocurren cosas para nosotros nuevas, algunas triviales que se le ocurren a todos y otras no tanto. Con Docker me ha pasado de que se me ocurri\xf3 un caso que no pensaba que fuera tan com\xfan, y lo [encontr\xe9 en internet](), pero efectivamente no est\xe1 muy propagado a\xfan, no est\xe1 en el sentido com\xfan de la gente, y estimo es s\xf3lo cuesti\xf3n de tiempo para que esto as\xed sea.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#container-os">Container OS</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:362,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"container os",Description:"",Keywords:[],Date:"2016-09-19T20:10:55-03:00",Lastmod:"2016-09-19T20:10:55-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="manejando-multiples-repositorios">Manejando multiples repositorios</h1>\n\n<h2 id="submodulos-con-git">Submodulos con git</h2>\n\n<p>Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias.</p>\n\n<p>El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.</p>\n\n<p>Las necesidades son:\n- Crear un repo que contenga a los demas (contenedor / workspace)\n- Hacer un pull de todos juntos de ser necesario</p>\n\n<h3 id="agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</h3>\n\n<p>Ahora tenemos que ir agregando nuestros repos como subm\xf3dulos.</p>\n\n<pre><code class="language-bash">git submodule add [repourl]\n</code></pre>\n\n<p>Cabe destacar que cada submodulo es un repo independiente cuando estamos dentro de el, pero en lugar de creat una carpeta .git, se crear\xe1 un archivo .git que tendr\xe1 el path a la carpeta .git del repositorio que lo contiene.\nPor otro lado, en el repositorio contenedor, se genera un archivo .gitmodules que nos dice los m\xf3dulos que este repositorio contiene.</p>\n\n<p>Nota: este archivo .gitmodules, si bien puede parecer redundante ya que est\xe1n los m\xf3dulos en la carpeta .git, es muy importante ya que al estar en el control de versiones nos permite sacar provecho de clonar a la vez muchos repositorios en el caso de uso que perseguimos aqu\xed.</p>\n\n<p>Una vez tenemos todos los repositorios agregados, comiteamos y pusheamos normalmente en el repositorio contenedor.</p>\n\n<h2 id="clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</h2>\n\n<p>Si bien la diferencia es ligera, me he topado con que git no hace nada si simplemente actualizamos en un repositorio que a\xfan no ha inicializado sus subm\xf3dulos, por ende luego del est\xe1ndar <code>git clone</code>, debemos inicializar los subm\xf3dulos de manera expl\xedcita:</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --init --recursive\n# just one\ngit submodule update --init path/to/subm\n</code></pre>\n\n<h2 id="update-de-submodulos">Update de submodulos</h2>\n\n<p>Si ya inicializamos nuestros submodulos aunque sea una vez, basta con lo siguiente</p>\n\n<pre><code class="language-bash"># all\ngit submodule update --recursive\n# particular submodule\ngit submodule update path/to/subm\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>Esto realmente es muy util, no solo por el batch update, sino porque al clonar el contenedor en una maquina, al inicializar nos puede traer los N repositorios de ese workspace, ahorrandonos muchos comandos git clone.\nUna vez que comenzas con esta practica, se convierte en un must-do rapidamente.</p>\n',Summary:"Manejando multiples repositorios Submodulos con git Charlando sobre componentizaci\xf3n con Sergio Minutoli, me coment\xf3 de una ocurrencia de utilizar subm\xf3dulos de git para manejar de manera m\xe1s simple la componentizaci\xf3n, lo cu\xe1l me pareci\xf3 una idea muy piola, as\xed que decid\xed implementarla. Cuento mis experiencias. El primer paso es conocido, se crea un repo nuevo y se clona o se agrega el remote. Aqui voy a extenderme s\xf3lo en el tratamiento de este caso de uso: manejar muchos repositorios de manera batch.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#manejando-multiples-repositorios">Manejando multiples repositorios</a>\n<ul>\n<li><a href="#submodulos-con-git">Submodulos con git</a>\n<ul>\n<li><a href="#agregar-submodulos-al-repositorio-contenedor">Agregar submodulos al repositorio contenedor</a></li>\n</ul></li>\n<li><a href="#clonar-repositorio-contenedor-por-primera-vez">Clonar repositorio contenedor por primera vez</a></li>\n<li><a href="#update-de-submodulos">Update de submodulos</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:392,FuzzyWordCount:400,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"submodules",Description:"",Keywords:[],Date:"2016-09-19T14:54:14-03:00",Lastmod:"2016-09-19T14:54:14-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{},Content:'\n\n<h1 id="haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</h1>\n\n<p>En estos dias me puse como meta rehacer mi blog.\nPara esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts.</p>\n\n<p>Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.</p>\n\n<p>Dejar wordpress no es una tarea sencilla, ya que es una excelente plataforma, con la cual se puede hacer practicamente todo y de una manera muy sencilla. Desde SEO, pasando por analytics, infinitos temas, infinitos plugins, responsive design&hellip; en definitiva, un monton de cosas.</p>\n\n<p>Pero necesito algo mas orientado al desarrollador y no tanto a una persona &ldquo;normal&rdquo;.\nAsi que empece a buscar&hellip; y encontre gohugo, un framework hecho en golang que nos permite hacer nuestro sitio de una manera muy sencilla.</p>\n\n<p>Hugo me atrajo por diversos motivos. Me permite utilizar mi github page, con lo cual en una de esas me ahorro unos pesos de hosting, es muy personalizable (soporta arquetipos, temas, y muchas cosas mas), y es muy rapido, y cuando digo muy rapido no exagero&hellip; golang le da esa ventaja sobre por ejemplo ghost (otra platforma de blog un poco mas simple que wordpress hecha en nodejs, muy buena tambien por cierto&hellip;).</p>\n\n<p>Un tema que me jugaba en contra en Hugo era el hecho de que, al usar mi github page para el blog, la cual es open source y esta en una pagina de github, los drafts iban a quedar implicitamente publicos, y la verdad no es algo que me parezca muy adecuado.</p>\n\n<p>Asi que pense que como desarrollador y aficionado a unix esto lo podia resolver facilmente, y cree unos sencillos shell scripts para encriptar y desencriptar los drafts de manera simple y segura utilizando un archivo de key que poseo en otro repositorio que es privado.</p>\n\n<p>Quiero compartir el proceso de configuracion de un blog publico y gratis, ya que me parece interesante.\n- Primero cree un repositorio privado (se consiguen infinitos en gitlab y en bitbucket)\n- Clonamos el repo como de costumbre</p>\n\n<pre><code class="language-bash">git clone [url del repo privado]\n</code></pre>\n\n<ul>\n<li>Se agrega nuestro repo de github page como submodulo (el mio por ejemplo es git@github.com:nicosommi/nicosommi.github.io.git)\n<code>bash\ngit submodule add [url del repo del blog]\n</code></li>\n<li>Se agrega un archivo key en dicho repo parent con un contenido que servira para encriptar y desencriptar nuestros drafts</li>\n<li>Se hacen o se copian los scripts de encripcion y desencription (se pueden tomar <a href="https://github.com/nicosommi/nicosommi.github.io">de aqui</a> tal como yo los utilizo, son los archivos ddrafts.sh y edrafts.sh para desencriptar y encriptar respectivamente, notar que requieren el paquete gpg de linux o <a href="#" title="brew install -v gpg">de osx</a>)</li>\n<li>Se agrega al gitignore la carpeta de draft originales para que no vayan al repo (tambien se puede ver del <a href="https://github.com/nicosommi/nicosommi.github.io">repo de este blog</a>)</li>\n<li>Opcionalmente se puede agregar un pre commit hook para que agregue el archivo encriptado en los commits\n<code>bash\necho &quot;#\\!/usr/bin/env bash\\n./ddrafts.sh\\ngit add drafts.contents\\n&quot; &gt; ../.git/modules/nicosommi.github.io/hooks/pre-commit\n</code></li>\n</ul>\n',Summary:"Haciendo un blog con gohugo En estos dias me puse como meta rehacer mi blog. Para esto me propuse un simple objetivo: poder utilizar mis notas directamente como blog posts. Esto responde a que al respetar el estilo clasico de crear un articulo como un proceso independiente me consume mas tiempo del que quisiera, es mas extenso de lo que los lectores quisieran, y otras muchas razones&hellip; por ejemplo, utilizar mi IDE favorito, manejar todo directamente con git, utilizar markdown, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li><a href="#haciendo-un-blog-con-gohugo">Haciendo un blog con gohugo</a></li>\n</ul>\n</nav>',Truncated:!0,Draft:!0,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:513,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"gohugo",Description:"",Keywords:[],Date:"2016-09-18T12:16:51-03:00",Lastmod:"2016-09-18T12:16:51-03:00",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Experiencias"],tags:["containers","docker","only","volume"]},Content:'<p>En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.</p>\n\n<p>Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad.</p>\n\n<p>Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente</p>\n\n<pre><code class="bash">docker run -it -v /etc:/etc coreos/apache /bin/bash\n</code></pre>\n\n<p>Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?</p>\n\n<p>Bueno esto tampoco es dificil, por ejemplo algo asi</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  webserver:\n    image: coreos/apache\n    volumes:\n      - /etc:/etc\n  app2:\n    build: .\n    volumes:\n      - /etc:/etc\n</code></pre>\n\n<p>Podriamos utilizar los &#8216;named&#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.</p>\n\n<p>Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria se\xf1alar:</p>\n\n<pre><code class="yaml">version: \'2\'\nservices:\n  data:\n    image: tianon/true\n    volumes:\n      - /etc:/etc\n  webserver:\n    image: coreos/apache\n    volumes_from:\n      - data\n  app2:\n    build: .\n    volumes_from:\n      - data\n  app3:\n    image: postgres\n    volumes_from:\n      - data\n</code></pre>\n\n<p>Bueno aqui ven el patron al que me refiero. Es extra\xf1o porque hay incluso imagenes en docker hub que son &#8220;fake&#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &#8216;data&#8217; que tomarlos de &#8216;webserver&#8217;) y bueno porque de docker te dicen que lo hagas asi.</p>\n\n<p>Creo que vale la pena se\xf1alarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &#8220;deducir&#8221; que esta es la &#8220;mejor&#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado <a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container">aqui</a> y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun <a href="https://github.com/docker/docker/issues/17798">este issue</a>).</p>\n\n<p>Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.</p>\n',Summary:"En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir. Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extra\xf1a que se da casi por casualidad. Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente docker run -it -v /etc:/etc coreos/apache /bin/bash Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:450,FuzzyWordCount:500,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Contenedores unicamente de volumenes en docker (volume only containers)",Description:"",Keywords:[],Date:"2016-09-07T00:10:13Z",Lastmod:"2016-09-07T00:10:13Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify on github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/">leer este articulo en espa\xf1ol</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.</figcaption></figure></p>\n\n<p><em>Note: GDD and gddify are a work in progress.</em></p>\n\n<p>Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.</p>\n\n<p>Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.</p>\n\n<p>Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.</p>\n\n<p>Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).</p>\n\n<p>As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &#8220;mix&#8221;, in the reality, is like a cell-level genesis that grows.</p>\n\n<p>Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.</p>\n\n<p>But let&#8217;s take a look at some common problems right now:</p>\n\n<p>&#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture</p>\n\n<p>&#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.</p>\n\n<p>&#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on</p>\n\n<p>&#8211; unmaintained modules: it&#8217;s a common case that some libraries are abandonware because of different reasons</p>\n\n<p>&#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.</p>\n\n<p>&#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components</p>\n\n<p>&#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)</p>\n\n<p>&#8211; template issues: IDE&#8217;s are not prepared to parse two languages in the same file on most cases</p>\n\n<p>All these are reasons made me think that there is something better out there. There are things to improve.</p>\n\n<p>Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.</p>\n\n<p>From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.</p>\n\n<h2 id="which-is-that-necessary-information">Which is that necessary information?</h2>\n\n<p>This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.</p>\n\n<p>Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&#8217;s take a look at those elements one by one:</p>\n\n<ul>\n<li><p><em>sw component (swComponent)</em>: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.</p></li>\n\n<li><p><em>sw block (swBlock)</em>: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.</p></li>\n\n<li><p><em>source code files</em>: this is the minimum unit for generation. a file.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Inside place holders, that content will be always the same for that particular file even after updates</figcaption></figure>\n\n<ul>\n<li><em>place holders</em>: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.</li>\n</ul>\n\n<p>Example using gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>replacements</em>: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).</p>\n\n<p>Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">a replacement example</figcaption></figure></p>\n\n<ul>\n<li><p><em>stamps</em>: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.</p>\n\n<p>Example using gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Stamps are code blocks shared and immutable across components (that can be ignored)</figcaption></figure></p>\n\n<ul>\n<li><p><em>ignoring stamps</em>: array of names of stamps that will be ignored on this file.</p>\n\n<p>Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps are those code blocks that we do not want to show this particular file</figcaption></figure></p>\n\n<p>The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.</p>\n\n<p>I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.</p>\n\n<h2 id="contribute">Contribute</h2>\n\n<p>I&#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify on github leer este articulo en espa\xf1ol Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file. Note: GDD and gddify are a work in progress. Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#which-is-that-necessary-information">Which is that necessary information?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n<li><a href="#contribute">Contribute</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1416,FuzzyWordCount:1500,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introduction to the idea and to gddify",Description:"",Keywords:[],Date:"2016-05-27T13:38:42Z",Lastmod:"2016-05-27T13:38:42Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/",Permalink:"",Slug:"gddify-es",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","GDD"]},Content:'\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n\n<p><a href="http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/">read this article in english</a><figure id="attachment_639" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png" alt="Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo." width="300" height="300" class="size-medium wp-image-639" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.</figcaption></figure></p>\n\n<p><em>Nota: GDD y gddify son un trabajo en curso.</em></p>\n\n<p>Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.</p>\n\n<p>Los puntos de vista, o modelos, se podr\xeda decir que son lo observado, mas una carga subjetiva del observador, una meta informaci\xf3n. Para los mas t\xe9cnicos: payload y meta.</p>\n\n<p>Durante los \xfaltimos a\xf1os me vi muchas veces desarrollando generadores de c\xf3digo. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con alg\xfan script personalizado.</p>\n\n<p>Tambi\xe9n, durante los \xfaltimos a\xf1os, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareci\xf3 siempre muy interesante, y acertado a la vez. Es que no s\xf3lo simplifica el modo de escribir funciones, tambi\xe9n elimina ambig\xfcedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).</p>\n\n<p>A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animar\xeda a criticarlos&#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo f\xedsico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &#8220;mezcla&#8221;, en la realidad se produce por ejemplo, por reproducci\xf3n a nivel celular que luego, crece.</p>\n\n<p>Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representaci\xf3n de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.</p>\n\n<p>Toda esta introducci\xf3n, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patr\xf3n de responsabilidad simple), las constantes actualizaciones de librer\xedas, las librer\xedas abandonadas, las compatibilidades que se rompen, la lisa y llana repetici\xf3n de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&#8230; todo esto como decia, me ha llevado a pensar en que all\xed hab\xeda algo por mejorar.</p>\n\n<p>Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atenci\xf3n a la meta informaci\xf3n de dichos puntos de vista, que son la percepci\xf3n de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.</p>\n\n<p>De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que a\xf1adir en el c\xf3digo fuente, informaci\xf3n necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta informaci\xf3n del c\xf3digo fuente: los comentarios.</p>\n\n<h2 id="cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</h2>\n\n<p>Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:</p>\n\n<ul>\n<li><p><em>componente sw (swComponent)</em>: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.</p></li>\n\n<li><p><em>bloques sw (swBlock)</em>: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.</p></li>\n\n<li><p><em>archivo de codigo fuente (source code files)</em>: este es la unidad base de sincronizacion/generacion. Es un archivo.</p></li>\n</ul>\n\n<figure id="attachment_630" style="width: 300px" class="wp-caption alignnone"><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png" alt="place holders" width="300" height="255" class="size-medium wp-image-630" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones</figcaption></figure>\n\n<ul>\n<li><em>contenedores (place holders)</em>: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.</li>\n</ul>\n\n<p>Ejemplo de implementacion en gddify (js)</p>\n\n<pre><code class="javascript">/* ph constructor */\nconstructor () {\n  this.name = \'nico\'\n}\n/* endph */\n</code></pre>\n\n<ul>\n<li><p><em>reemplazos (replacements)</em>: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).</p>\n\n<p>Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph replacements <em>/\n/</em> name, /myClass/g, myClass <em>/\n/</em> endph */\n</code></pre><figure id="attachment_629" style="width: 280px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png" alt="replacements" width="280" height="300" class="size-medium wp-image-629" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w" sizes="(max-width: 280px) 85vw, 280px" /><figcaption class="wp-caption-text">un ejemplo complejo de reemplazos</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas (stamps)</em>: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)</p>\n\n<p>Ejemplo en gddify (js)</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* stamp toJson <em>/\ntoJSON () {\n  return { name: this.name }\n}\n/</em> endstamp */\n</code></pre><figure id="attachment_631" style="width: 199px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png" alt="stamps" width="199" height="300" class="size-medium wp-image-631" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w" sizes="(max-width: 199px) 85vw, 199px" /><figcaption class="wp-caption-text">Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)</figcaption></figure></p>\n\n<ul>\n<li><p><em>estampas ignoradas (ignoringStamps)</em>: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.</p>\n\n<p>Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps</p></li>\n</ul>\n\n<p><pre><code class="javascript">/* ph ignoringStamps <em>/\n/</em> toJson, parse <em>/\n/</em> endstamp */\n</code></pre><figure id="attachment_632" style="width: 300px" class="wp-caption alignnone"></p>\n\n<p><img src="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png" alt="Ignoring stamps" width="300" height="244" class="size-medium wp-image-632" srcset="http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w" sizes="(max-width: 300px) 85vw, 300px" /><figcaption class="wp-caption-text">Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular</figcaption></figure></p>\n\n<p>La descripci\xf3n de estos componentes de software de manera correcta, nos permitir\xe1 no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcci\xf3n de generadores, y en un solo lenguaje sin templates. He all\xed el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido com\xfan.</p>\n\n<p>Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integraci\xf3n continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.</p>\n\n<p>Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.</p>\n\n<p>Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de c\xf3digo y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularizaci\xf3n a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visi\xf3n de <a href="http://integracionesagiles.com">Integraciones Agiles</a>.</p>\n\n<h2 id="conclusi\xf3n">Conclusi\xf3n</h2>\n\n<p>Esto es una simple introducci\xf3n al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicaci\xf3n, c\xf3digos de ejemplo, y mucho mas.</p>\n\n<h2 id="colaboraci\xf3n">Colaboraci\xf3n</h2>\n\n<p>Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.</p>\n\n<p><a href="http://integracionesagiles.com">http://integracionesagiles.com</a></p>\n\n<p><a href="https://github.com/nicosommi/gddify">gddify en github</a></p>\n',Summary:"gddify en github read this article in english Mantenga los bloques de c\xf3digo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo. Nota: GDD y gddify son un trabajo en curso. Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la informaci\xf3n a lenguajes de programaci\xf3n.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#cual-es-la-informacion-necesaria">Cual es la informacion necesaria?</a></li>\n<li><a href="#conclusi\xf3n">Conclusi\xf3n</a></li>\n<li><a href="#colaboraci\xf3n">Colaboraci\xf3n</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1358,FuzzyWordCount:1400,ReadingTime:7,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Generation Driven Development \u2013 Introducci\xf3n a la idea y a gddify",Description:"",Keywords:[],Date:"2016-05-26T00:08:30Z",Lastmod:"2016-05-26T00:08:30Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/",Permalink:"",Slug:"gddify",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Technology"]},Content:'<blockquote>\n<p><em><strong>&#8220;Little things can make a big difference.&#8221;</strong></em></p>\n</blockquote>\n\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.</p>\n\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like</p>\n\n<pre><code class="javascript">gulp test\n</code></pre>\n\n<p><strong>Right?</strong></p>\n\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.</em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.</em></p>\n\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container / user / developer / anybody to install something globally on their environments</em> besides of the natural requirements for that technology. Because <em>is just unrelated</em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>.</strong> The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.</em></p>\n\n<p><em>Let&#8217;s imagine this situation for a minute.</em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</em></p>\n\n<blockquote>\n<p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>/potential contributors</em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.</strong></p>\n</blockquote>\n\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.</p>\n\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.</em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.</p>\n\n<blockquote>\n<p>_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money</em></strong>.</p>\n\n<p>**_</p>\n</blockquote>\n\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></p>\n\n<blockquote>\n<p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.</em></strong></p>\n</blockquote>\n\n<p><strong>Introduction to the &#8220;trivial&#8221; solution</strong></p>\n\n<p><em>Node.js comes with the npm binary built in</em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json</em>.</p>\n\n<blockquote>\n<p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.</em></strong></p>\n</blockquote>\n\n<p>You can see a reference here <a href="https://docs.npmjs.com/cli/run-script">https://docs.npmjs.com/cli/run-script</a></p>\n\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.</em> And, luckily, that is transparent to us.</p>\n\n<blockquote>\n<p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks</strong></p>\n</blockquote>\n\n<p><strong>How to do this?</strong></p>\n\n<p>Well basically, let&#8217;s say you want to replace your <em>gulp test</em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>And that&#8217;s it!</strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this</p>\n\n<pre><code class="javascript">npm test\n</code></pre>\n\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!</em> <em>You just need to install gulp (or the CLI you want to make local) locally</em> in your project before you execute the script through <strong>npm run</strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.</p>\n\n<pre><code class="javascript">npm uninstall -g gulp\n</code></pre>\n\n<blockquote>\n<p>**<em>This npm test command is not executing the global gulp.</em> The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally</p>\n\n<p>**</p>\n</blockquote>\n\n<p>**Sugar for complex cases</p>\n\n<p>**</p>\n\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command</p>\n\n<pre><code class="javacript">npm run gulp yourcustomtask\n</code></pre>\n\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask</em></strong>, check it out:</p>\n\n<pre><code class="javascript">...(content on your package.json)...\n"scripts": {\n"test": "gulp test",\n"gulp": "gulp"\n}\n...(more content on your package.json)...\n</code></pre>\n\n<p><strong>Other examples</strong></p>\n\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015</em>, and there lots of examples. <em>Grunt also applies</em><strong>,</strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.</p>\n\n<p>&nbsp;</p>\n\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com</p>\n\n<p>Thanks for reading.</p>\n',Summary:"&#8220;Little things can make a big difference.&#8221; \u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t. Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like gulp test Right?",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1737,FuzzyWordCount:1800,ReadingTime:9,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)",Description:"",Keywords:[],Date:"2016-03-30T16:47:00Z",Lastmod:"2016-03-30T16:47:00Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'\n\n<h2 id="how-s-that">How\u2019s that?</h2>\n\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features</strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.</p>\n\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber</strong> (first time for me), because our team used it before in Ruby and they were happy with it. And <strong>there is a JS version</strong> for it. Oh yes it is, and it works pretty well. Read more <a href="https://cucumber.io/docs/reference/javascript" target="_blank">here</a>.</p>\n\n<h2 id="but-why-cucumber">But\u2026 why cucumber?</h2>\n\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href="https://cucumber.io/" target="_blank">homepage</a>.</p>\n\n<p>It was a great decision for us.</p>\n\n<h2 id="other-tools-and-practices">Other tools and practices?</h2>\n\n<p>Yes. <a href="http://martinfowler.com/bliki/TestDrivenDevelopment.html" target="_blank">TDD</a>/BDD, <a href="https://github.com/gotwarlost/istanbul" target="_blank">test coverage</a> and <a href="https://www.bithound.io/" target="_blank">source code quality</a> controls. All those practices/tools were helpful. It\u2019s not just cucumber.</p>\n\n<h2 id="introduction">Introduction</h2>\n\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I</strong> really <strong>want</strong> <strong>to share</strong> is <strong>this particular experience,</strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.</p>\n\n<p>We already made a lot of improvements to our agile framework.</p>\n\n<p>Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).</p>\n\n<p>Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).</p>\n\n<p>But recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.</p>\n\n<p>**</p>\n\n<h2 id="ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</h2>\n\n<p>Well we experienced it with the authentication/authorization <strong>feature</strong> <em>-gherkin speaking-</em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).</p>\n\n<p>So the User Stories usually says something like \u201cAs a user/admin/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.</p>\n\n<p>At first, we were doing special cucumber <strong>scenarios</strong> on each cucumber <strong>feature</strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n</code></pre>\n\n<p>As you can see <strong>in this example feature</strong>, there is <strong>one different scenario per authorization</strong> <strong>scenario on each business</strong> <strong>feature</strong>.</p>\n\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.</p>\n\n<p>On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.</p>\n\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.</p>\n\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code</strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that</strong>.</p>\n\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).</p>\n\n<p>So our new business feature like item creation became something like this</p>\n\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n</code></pre>\n\n<p>And we created another feature for the authorization and authentication like this one</p>\n\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n</code></pre>\n\n<h2 id="conclusion">Conclusion</h2>\n\n<p>In short terms,\xa0 you need a user story for this kind of shared feature.</p>\n\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it</strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).</p>\n\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.</p>\n\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.</p>\n',Summary:"How\u2019s that? Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber features I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share. We started using agile practices with our team at the very beginning of our project. Very soon we started using cucumber (first time for me), because our team used it before in Ruby and they were happy with it.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:'<nav id="TableOfContents">\n<ul>\n<li>\n<ul>\n<li><a href="#how-s-that">How\u2019s that?</a></li>\n<li><a href="#but-why-cucumber">But\u2026 why cucumber?</a></li>\n<li><a href="#other-tools-and-practices">Other tools and practices?</a></li>\n<li><a href="#introduction">Introduction</a></li>\n<li><a href="#ok-but-technically-speaking-how-it-happened">Ok, but technically speaking, how it happened?</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul></li>\n</ul>\n</nav>',Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1494,FuzzyWordCount:1500,ReadingTime:8,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"How, adopting cucumber js and other agile practices, can help you improve your development process",Description:"",Keywords:[],Date:"2015-10-21T14:47:35Z",Lastmod:"2015-10-21T14:47:35Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="https://github.com/nicosommi/partialClass" target="_blank">Source code</a></p>\n\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.</p>\n\n<p>One of those rules is the <strong>class complexity</strong>.</p>\n\n<p>So you have a giant class. You may <strong>need or want to split it up into different files</strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#</strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.</p>\n\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\xa0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps</strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):</p>\n\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.</li>\n<li>Create an index.js inside of it that contains the actual class</li>\n<li>Create some file with the function/functions that you want to have in different files</li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.</li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).</li>\n</ul>\n\n<p>That&#8217;s basically all! <strong>See</strong> <a href="http://github.com/nicosommi/partialClass">this repo</a> to take a look at a working source code.</p>\n\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.</strong></p>\n',Summary:"Source code When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details. One of those rules is the class complexity. So you have a giant class. You may need or want to split it up into different files. Of course, you can do some hacks with the javascript language to get that done.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:405,FuzzyWordCount:500,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Partial class approach for ES5/ES6",Description:"",Keywords:[],Date:"2015-08-10T02:50:50Z",Lastmod:"2015-08-10T02:50:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/08/10/partial-class-approach-for-es6/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias"]},Content:'<p><a href="http://nicosommi.com/?p=403">Read this article in english</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Ir al componente en npm</a></p>\n\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion</strong> en algun momento, <strong>pero todavia no sabiamos cuando</strong> esto iba a ser apoyado por las prioridades del negocio.</p>\n\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto</strong>.</p>\n\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes</strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).</p>\n\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas</strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes</strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.</p>\n\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:</p>\n\n<ul>\n<li>Un <strong>readme acorde</strong>, con las secciones y badges deseables</li>\n<li><strong>test coverage</strong></li>\n<li><strong>integracion continua</strong></li>\n<li><strong>calidad de codigo</strong></li>\n<li><strong>chequeo de dependencias</strong></li>\n<li><strong>tareas de compilado</strong></li>\n<li><strong>testeo de compatibilidad con browsers</strong></li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5</strong></li>\n<li><strong>archivos de linting</strong></li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas</li>\n</ul>\n\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado</strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos</strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.</p>\n\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo</strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).</p>\n\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.</p>\n\n<p>Como se utiliza?</p>\n\n<p><strong>Lo mas recomendado es</strong> <a href="https://github.com/FreeAllMedia/generator-oss-component/" target="_blank">leer el README</a> pero basicamente:</p>\n\n<ol>\n<li>creas tu repositorio en github</li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)</li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.</li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component</em></li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones</li>\n<li>comenza a codear</li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica</li>\n</ol>\n\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.</p>\n',Summary:"Read this article in english Ir al componente en npm Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que ibamos a componentizar la aplicacion en algun momento, pero todavia no sabiamos cuando esto iba a ser apoyado por las prioridades del negocio.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:708,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Crear un componente javascript y open source de calidad en minutos",Description:"",Keywords:[],Date:"2015-07-17T01:34:25Z",Lastmod:"2015-07-17T01:34:25Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences"]},Content:'<p><a href="http://nicosommi.com/?p=395">Leer este articulo en espaniol</a></p>\n\n<p><a href="https://www.npmjs.com/package/generator-oss-component">Go to the component on npm</a></p>\n\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components</strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when</strong> the business would support it by increasing the priority.</p>\n\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality</strong> with the previous one. <strong>Then it happened: the real need</strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead</strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours</strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator</strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.</p>\n\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:</strong></p>\n\n<ul>\n<li><strong>A good README</strong> with <strong>badges</strong> and common sections</li>\n<li>The <strong>LICENSE file</strong></li>\n<li><strong>Test coverage support</strong> (generation and report integration with travis and coveralls)</li>\n<li><strong>Continuous integration</strong> (with <strong>travis</strong>)</li>\n<li><strong>gulp tasks</strong> for compile sources and testing them</li>\n<li><strong>browser compatibility tests</strong> using karma and a optional sauce labs integration</li>\n<li><strong>ES6 and ES5</strong> compatibility using babel</li>\n<li><strong>linting files</strong> a eslint file and the required dependencies</li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior</li>\n</ul>\n\n<p>Luckily us this component quickly <strong>give us the expected result</strong> and, <strong>even knowing that this is a still very early version</strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already</strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community</strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.</p>\n\n<p>Of course <strong>this open source component generator is an open source component by itself</strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts</strong> (currently some little manual changes are needed).</p>\n\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation</strong> to <strong>contribute</strong> to our project if you want to or just <strong>use it</strong> if you want to get a new component in just minutes.</p>\n\n<p><em><strong>How do you use it?</strong></em></p>\n\n<p>First highly recommended steps is to <strong>read the README, but basically</strong></p>\n\n<ol>\n<li><em>create the github repo</em></li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)</em></li>\n<li><em>if you want to add another tool supported by the component and you want to use.</em></li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp</li>\n<li><em>npm install -g generator-oss-component</em></li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component</em></li>\n<li>answer the questions using the credentials if needed for the integrations to be done</li>\n<li>execute travis setup npm if you want to auto publish to npm your component</li>\n<li>start coding</li>\n</ol>\n\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request</strong> by following the contribution guide on the README \ud83d\ude42</p>\n',Summary:"Leer este articulo en espaniol Go to the component on npm Some months ago with the team from Free All Media we started to build a new javascript project, which rapidly began to grow in code lines and in what we called components, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that sooner or later creating component will be necesary, but we didn&#8217;t knew yet when the business would support it by increasing the priority.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:763,FuzzyWordCount:800,ReadingTime:4,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Create a javascript quality open source component in minutes",Description:"",Keywords:[],Date:"2015-07-17T01:34:06Z",Lastmod:"2015-07-17T01:34:06Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["World"]},Content:'<p>Estos dias estuve leyendo sobre el alejamiento de <a href="http://es.wikipedia.org/wiki/Brendan_Eich" title="Brendan Eich">Brendan Eich</a> de Mozilla (noticia difundida en varios lugares por ejemplo <a href="http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html" title="aca">aca</a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a href="http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video" title="aca">aca</a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores</strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.</p>\n\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a href="https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management" title="este link">este link</a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente</strong>.</p>\n\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a href="https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/" title="aca">aca</a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores</strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).</p>\n\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/" title="esto">esto</a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc</strong>), estan por ejemplo <a href="https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324" title="este">este</a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos</strong>.</p>\n\n<p>Esto me hizo sospechar de intereses economicos y encontre <a href="http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/" title="este">este</a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla</strong>.</p>\n\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.</p>\n\n<dl>\n<dt>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.</dt>\n</dl>\n\n<p>:/</p>\n\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.</strong></p>\n',Summary:"Estos dias estuve leyendo sobre el alejamiento de Brendan Eich de Mozilla (noticia difundida en varios lugares por ejemplo aca). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona aca es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:596,FuzzyWordCount:600,ReadingTime:3,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Mmmmm\u2026. mozilla\u2026",Description:"",Keywords:[],Date:"2014-06-21T19:12:03Z",Lastmod:"2014-06-21T19:12:03Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/06/21/mmmmm-mozilla/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["World"]},Content:'<p>Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo.</p>\n\n<p>Es de Mark Surman de Mozilla. Y dice:</p>\n\n<p><em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco.</em></p>\n\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):</p>\n\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.</p>\n\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\xf3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\xed.</p>\n\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\xf1ada para servir a unos pocos en lugar de servir a muchos. B\xe1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\xe9 creado para evitarlas. Desanima. Pero&#8230;</p>\n\n<p>Lo exitante (Dije que \xedbamos a llegar ac\xe1):</p>\n\n<p>Las cosas no est\xe1n tan quietas como parecen &#8211; y la verdad es, el futuro est\xe1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\xe9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\xed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\xe1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.</p>\n\n<p>Y esta pelea empieza ahora mismo. En las pr\xf3ximas semanas y meses estamos lanzando una campa\xf1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\xfablico y no a unas pocas gigantes compa\xf1\xedas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\xe9s? Hac\xe9noslo saber, y unite a los millones que est\xe1n ayudando a formar el futuro del recurso p\xfablico m\xe1s grande del mundo.</p>\n\n<p>Y si despu\xe9s de decirnos tu peque\xf1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\xf3n del navegador Firefox. No voy a entrar en detalles de porqu\xe9 es maravilloso (aunque desear\xeda poder hacerlo), pero he aqu\xed es un peque\xf1o vistazo: es m\xe1s seguro, es m\xe1s r\xe1pido, es m\xe1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\xe9 hecho con la misi\xf3n de ponerte a vos primero.</p>\n\n<p>Al final del d\xeda, la genial comunidad global Mozilla es la raz\xf3n por la cual peleamos la pelea, resolvemos problemas dif\xedciles y tomamos acciones importantes. Y mientras nuestra misi\xf3n no cambie (y no lo har\xe1), estamos haciendo paquetes m\xe1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\xf3lo el comienzo.</p>\n\n<p>Sigue conectado.</p>\n\n<p>Mark&#8221;</p>\n\n<p><a href="https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014">Para m\xe1s informaci\xf3n sobre Firefox click aqu\xed.</a></p>\n\n<p>Texto Original</p>\n\n<blockquote>\n<p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.</p>\n\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):</p>\n\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.</p>\n\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.</p>\n\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;</p>\n\n<p>The exciting (I told you we&#8217;d get there):</p>\n\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.</p>\n\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:</p>\n\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.</p>\n\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.</p>\n\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.</p>\n\n<p>Stay tuned,</p>\n\n<p>Mark&#8221;</p>\n</blockquote>\n\n<p>Cualquier sugerencia sobre la traducci\xf3n nicosommi@gmail.com</p>\n',Summary:"Hoy recib\xed un mail lindo y prometedor y quisiera que los que hablan s\xf3lo espa\xf1ol puedan tambi\xe9n leerlo. Es de Mark Surman de Mozilla. Y dice: &#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\xe9n asusta un poco. Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien): Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\xe9rmino que todos los dem\xe1s.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:1067,FuzzyWordCount:1100,ReadingTime:6,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Asusta pero es exitante \u2013 Traducci\xf3n al espa\xf1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)",Description:"",Keywords:[],Date:"2014-05-02T01:56:10Z",Lastmod:"2014-05-02T01:56:10Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Technology"]},Content:"<p><a href=\"http://nicosommi.com/?p=250\" title=\"Debugueando node\"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.</p>\n\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.</p>\n\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.</p>\n\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.</p>\n\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.</p>\n\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the  <strong>debugger;</strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.</p>\n\n<p>The command list is obviously on the official documentation here <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>As I pre-announced some, the most used are:</p>\n\n<ul>\n<li>step in: just with s</li>\n<li>step out: writing o</li>\n<li>next step: n</li>\n<li>pause (just writing that)</li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step</li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it</li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number</li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C</li>\n</ul>\n\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Another common case: test unit. With debug? Yes. For example if we execute</p>\n\n<p><code>mocha debug test/example.js</code></p>\n\n<p>then we also get the debugger.</p>\n\n<p>Combining mocha and grunt/gulp you can do this currently (also with nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.</p>\n\n<p>You get a ENOSPC Error?</p>\n\n<p>That&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).</p>\n\n<p>You can solve this by increasing the max_user_watches with this command</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>The correct number depends on your needs. You can see your current by executing this</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Also remember to execute nodemon with the -i node_modules argument.</p>\n\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.</p>\n\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com</p>\n",Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly. One of the things that scared me the most in this node-hell at my begining was the debug method.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:898,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugging node",Description:"",Keywords:[],Date:"2014-05-02T01:39:40Z",Lastmod:"2014-05-02T01:39:40Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/05/02/debugging-node/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Tecnicos"],tags:["debug","javascript","js","node.js"]},Content:"<p><a href=\"http://nicosommi.com/?p=284\" title=\"Debugging node\"><em>To see this article in english click here.</em></a></p>\n\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.</p>\n\n<p>Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\xe1s copados como debug, ain2, winston o algo as\xed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.</p>\n\n<p>En mi experiencia hab\xeda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\xed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\xe1s din\xe1mico y liviano en memoria. Tambi\xe9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\xed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\xe9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\xe9n clave para no complicarse la vida con la depuraci\xf3n en node.js.</p>\n\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.</p>\n\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\xe1pidamente. Muchos podr\xe1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\xf3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\xe1s est\xe1 decir que algunas veces los errores son tan complicados que la reproducci\xf3n del mismo nos lleva mucho tiempo y sincronizaci\xf3n, y por ende estar\xeda buen\xedsimo si descubrimos el error en la menor cantidad de intentos posibles.</p>\n\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\xf3n con el argumento debug.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\xe1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\xe1 hasta el pr\xf3ximo debugger;</p>\n\n<p>Hay una lista completa de comandos en la secci\xf3n Commands reference en el siguiente link <a href=\"http://nodejs.org/api/debugger.html\" title=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n\n<p>Los m\xe1s destacados son</p>\n\n<ul>\n<li>step in: se hace escribiendo s</li>\n<li>step out: escribiendo o</li>\n<li>next step: n</li>\n<li>pause</li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso</li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor</li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas</li>\n<li>repl : important\xedsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c</li>\n</ul>\n\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\xf3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\xf3n nodeArgs.</p>\n\n<p>Por ejemplo:</p>\n\n<p><code>nodemon({script: './app.js', nodeArgs: ['debug']})</code></p>\n\n<p>Otro caso com\xfan. Test unit. Con debug? S\xed. Por ejemplo si ejecutamos</p>\n\n<p><code>mocha debug test/ejemplo.js</code></p>\n\n<p>entonces nos llevar\xe1 a la consola de debug.</p>\n\n<p>Combinando mocha y grunt/gulp se puede hacer esto (tambi\xe9n con nodemon):</p>\n\n<p><code>nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});</code></p>\n\n<p>donde pon\xe9s la ruta a tu instalaci\xf3n global del ejecutable _mocha (con gui\xf3n bajo) y listo, con eso ten\xe9s tus test con el debugger built in y tus tareas previas ejecutadas.</p>\n\n<p>Obteniendo un error ENOSPC?</p>\n\n<p>Eso es porque hay muchos archivos abiertos (o ten\xe9s un editor que suele abrir muchos archivos como Sublime o nodemon est\xe1 incluyendo muchos archivos).</p>\n\n<p>Lo pod\xe9s solucionar incrementando el valor de max_user_watches con este comando</p>\n\n<p><code>sudo sysctl fs.inotify.max_user_watches=20000</code></p>\n\n<p>El n\xfamero correcto depende de tus necesidades. Pod\xe9s ver que ten\xe9s actualmente ejecutando esto</p>\n\n<p><code>more /proc/sys/fs/inotify/max_user_watches</code></p>\n\n<p>Tambi\xe9n record\xe1 executar nodemon con el argumento -i nodemodules</p>\n\n<p>En definitiva. Si todav\xeda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.</p>\n\n<p>Ten\xe9s una idea para mejorar este art\xedculo? Mand\xe1mela a nicosommi@gmail.com</p>\n",Summary:"To see this article in english click here. Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\xe1 haciendo al alt\xedsimo precio de llegar a un l\xedo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo. Una de las cosas que m\xe1s me asustaban en este node-hell es poder depurar nuestro script.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:861,FuzzyWordCount:900,ReadingTime:5,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Debugueando node",Description:"",Keywords:[],Date:"2014-04-20T15:17:15Z",Lastmod:"2014-04-20T15:17:15Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2014/04/20/debugging-node-seriously/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"]},Content:'<p><a href="http://nicosommi.com/?p=287" title="Explore BW-TEST"><em>To see this article in english click here.</em></a></p>\n\n<p>Es muy simple! Mir\xe1 el video!</p>\n\n<p>BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.</p>\n\n<p>Caracteristicas</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>Podes encontrar el codigo fuente aca: <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>Licencia LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"To see this article in english click here. Es muy simple! Mir\xe1 el video! BW-TEST es otra librer\xeda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\xednua como Jenkins. Tambi\xe9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:120,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explorando BW-TEST",Description:"",Keywords:[],Date:"2013-12-05T21:11:21Z",Lastmod:"2013-12-05T21:11:21Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/05/explore-bw-test/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=174" title="BW-REST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p><strong>NOTE:</strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.</p>\n\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!</p>\n\n<p><a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>See the video here!</p>\n\n<p>Features v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>LICENSE: LGPL v3 \xa92013 BW-REST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. NOTE: TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0. When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:230,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-12-02T01:41:11Z",Lastmod:"2013-12-02T01:41:11Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/bw-rest-2/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["English","Experiences","Integration","Technology"]},Content:'<p><a href="http://nicosommi.com/?p=209" title="Explorando BW-TEST"><em>Para ver este art\xedculo en espa\xf1ol click aqu\xed.</em></a></p>\n\n<p>It is really easy! Look the video!</p>\n\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features</p>\n\n<ul>\n<li>xunit compatible (tested with jenkins)</li>\n<li>multiple assertion support by using Assertions.process once in your test</li>\n<li>test suites support</li>\n<li>xml and html reports</li>\n<li>startup once running</li>\n<li>support running on every request</li>\n</ul>\n\n<p>You can found the source code in <a href="http://github.com/nicosommi/bw-test" title="bw-test">http://github.com/nicosommi/bw-test</a></p>\n\n<p>License LGPL v3 \xa92013 BW-TEST</p>\n',Summary:"Para ver este art\xedculo en espa\xf1ol click aqu\xed. It is really easy! Look the video! BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:129,FuzzyWordCount:200,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Explore BW-TEST",Description:"",Keywords:[],Date:"2013-12-02T01:38:50Z",Lastmod:"2013-12-02T01:38:50Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/12/02/explore-bw-test-2/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico",categories:["Espa\xf1ol","Experiencias","Integration","Tecnicos"],tags:["tibco business works designer json rest esb"]},Content:'<p><a href="http://nicosommi.com/?p=291" title="BW-REST"><em>To see this article in english click here.</em></a></p>\n\n<p><strong>NOTA:</strong> TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0.</p>\n\n<p>Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.</p>\n\n<p>Es de codigo abierto! <a title="repo" href="http://github.com/nicosommi/bw-rest" target="_blank">You can found it here <a href="http://github.com/nicosommi/bw-rest">http://github.com/nicosommi/bw-rest</a></a></p>\n\n<p>Mira el video!</p>\n\n<p>Caracteristicas v 0.1</p>\n\n<ul>\n<li>JADE templating support</li>\n<li>Controller support</li>\n<li>Project-relative paths</li>\n<li>Support for regular expressions</li>\n<li>Support query string and url parameters</li>\n<li>Static resource support (recursivelly)</li>\n<li>Built in implementation customizable by defaultvars</li>\n<li>Cookie support</li>\n<li>Multiple server on the same project/archive</li>\n</ul>\n\n<p>Licencia LGPL v3 \xa92013 BW-REST</p>\n',Summary:"To see this article in english click here. NOTA: TIBCO finalmente anunci\xf3 soporte para web services REST desde ActiveMatrix 6.0. Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc.",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!0,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"",WordCount:215,FuzzyWordCount:300,ReadingTime:2,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"BW-REST",Description:"",Keywords:[],Date:"2013-10-18T01:54:52Z",Lastmod:"2013-10-18T01:54:52Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"/index.php/2013/10/18/bw-rest/",Permalink:"",Slug:"",Section:"",IsHome:!1},{Params:{author:"nico"},Content:'<p>Please don&rsquo;t ask me for my CV and see my social profiles instead (<a href="https://www.linkedin.com/in/nicosommi/">linkedin</a>, <a href="https://github.com/nicosommi">github</a>, <a href="https://stackoverflow.com/users/1015217/nico">stackoverflow</a>).</p>\n\n<p>And if you want to contact me, send a message to <a href="maito:nicosommi@gmail.com" title="nicosommi@gmail.com">nicosommi@gmail.com</a></p>\n\n<p><a href="https://flattr.com/submit/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F" target="_blank"><img src="//button.flattr.com/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></p>\n\n<p>&nbsp;</p>\n',Summary:"Please don&rsquo;t ask me for my CV and see my social profiles instead (linkedin, github, stackoverflow). And if you want to contact me, send a message to nicosommi@gmail.com &nbsp;",Aliases:null,Status:"",Images:null,Videos:null,TableOfContents:"",Truncated:!1,Draft:!1,PublishDate:"0001-01-01T00:00:00Z",Markup:"markdown",Layout:"page",WordCount:29,FuzzyWordCount:100,ReadingTime:1,Weight:0,Frontmatter:null,Contents:null,RSSLink:"",Data:null,Title:"Resume/Acerca de mi",Description:"",Keywords:[],Date:"2013-04-11T22:27:04Z",Lastmod:"2013-04-11T22:27:04Z",Sitemap:{ChangeFreq:"",Priority:-1,Filename:""},URL:"",Permalink:"",Slug:"",Section:"",IsHome:!1}],Files:[{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}},{Contents:{}}],Menus:{},Hugo:null,Title:"nicosommi",RSSLink:"http://localhost:1313/index.xml",Author:{},LanguageCode:"es-AR",DisqusShortname:"",GoogleAnalytics:"",Copyright:"",LastChange:"2017-07-06T20:36:09-03:00",Permalinks:{},Params:{description:"a developer's blog",disqusShortname:"nicosommi",google_analytics:"UA-44929876-1",ignoreFiles:["\\.gitignore\\*$","\\*drafts\\*$"],slideDescription:"slide",theme:"hugo-nicosommi"},BuildDrafts:!0,Data:{translations:{"en-US":{hello:"hello"},"es-AR":{hello:"hola"}}}}}},function(e,o,n){n(40),e.exports=n(39)}]);
//# sourceMappingURL=main.32c259e6.js.map