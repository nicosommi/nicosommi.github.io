{"data":{"posts":[{"id":13,"title":"Resume\/Acerca de mi","slug":"resume","markdown":"\nTake a look at [http:\/\/integracionesagiles.com](http:\/\/integracionesagiles.com)\n\nOr send me a message to [nicosommi@gmail.com](maito:nicosommi@gmail.com \"nicosommi@gmail.com\")\n\n[![Flattr this](\/\/button.flattr.com\/flattr-badge-large.png \"Flattr this\")](https:\/\/flattr.com\/submit\/auto?fid=66xjlj&url=http%3A%2F%2Fnicosommi.com%2F)\n\n<script src=\"\/\/about.me\/embed\/nicosommi\"><\/script>\n\n\u00a0\n\n\n","html":"<p>Take a look at <a href=\"http:\/\/integracionesagiles.com\">http:\/\/integracionesagiles.com<\/a><\/p>\n<p>Or send me a message to <a title=\"nicosommi@gmail.com\" href=\"maito:nicosommi@gmail.com\">nicosommi@gmail.com<\/a><\/p>\n<p><a href=\"https:\/\/flattr.com\/submit\/auto?fid=66xjlj&#038;url=http%3A%2F%2Fnicosommi.com%2F\" target=\"_blank\"><img src=\"\/\/button.flattr.com\/flattr-badge-large.png\" alt=\"Flattr this\" title=\"Flattr this\" border=\"0\"><\/a><\/p>\n<p><script src=\"\/\/about.me\/embed\/nicosommi\"><\/script><\/p>\n<p>&nbsp;<\/p>\n","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 11 Apr 2013 22:27:04 +0000","created_by":1,"updated_at":"Mon, 18 Apr 2016 20:50:28 +0000","updated_by":1,"published_at":"Thu, 11 Apr 2013 22:27:04 +0000","published_by":1},{"id":174,"title":"BW-REST","slug":"bw-rest","markdown":"\n[*To see this article in english click here.*](http:\/\/nicosommi.com\/?p=291 \"BW-REST\")\n\n**NOTA:** TIBCO finalmente anunci\u00f3 soporte para web services REST desde ActiveMatrix 6.0.  \n Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.\n\nEs de codigo abierto! [You can found it here http:\/\/github.com\/nicosommi\/bw-rest](http:\/\/github.com\/nicosommi\/bw-rest \"repo\")\n\nMira el video!  \n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"473\" src=\"https:\/\/www.youtube.com\/embed\/RrPAYiXhTjc?feature=oembed\" width=\"840\"><\/iframe>\n\nCaracteristicas v 0.1\n\n- JADE templating support\n- Controller support\n- Project-relative paths\n- Support for regular expressions\n- Support query string and url parameters\n- Static resource support (recursivelly)\n- Built in implementation customizable by defaultvars\n- Cookie support\n- Multiple server on the same project\/archive\n\nLicencia LGPL v3 \u00a92013 BW-REST\n\n\n","html":"<p><a title=\"BW-REST\" href=\"http:\/\/nicosommi.com\/?p=291\"><em>To see this article in english click here.<\/em><\/a><\/p>\n<p><strong>NOTA:<\/strong> TIBCO finalmente anunci\u00f3 soporte para web services REST desde ActiveMatrix 6.0.<br \/>\nCuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.<\/p>\n<p>Es de codigo abierto! <a title=\"repo\" href=\"http:\/\/github.com\/nicosommi\/bw-rest\" target=\"_blank\">You can found it here http:\/\/github.com\/nicosommi\/bw-rest<\/a><\/p>\n<p>Mira el video!<br \/>\n<iframe width=\"840\" height=\"473\" src=\"https:\/\/www.youtube.com\/embed\/RrPAYiXhTjc?feature=oembed\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Caracteristicas v 0.1<\/p>\n<ul>\n<li>JADE templating support<\/li>\n<li>Controller support<\/li>\n<li>Project-relative paths<\/li>\n<li>Support for regular expressions<\/li>\n<li>Support query string and url parameters<\/li>\n<li>Static resource support (recursivelly)<\/li>\n<li>Built in implementation customizable by defaultvars<\/li>\n<li>Cookie support<\/li>\n<li>Multiple server on the same project\/archive<\/li>\n<\/ul>\n<p>Licencia LGPL v3 \u00a92013 BW-REST<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 18 Oct 2013 01:54:52 +0000","created_by":1,"updated_at":"Fri, 18 Oct 2013 01:54:52 +0000","updated_by":1,"published_at":"Fri, 18 Oct 2013 01:54:52 +0000","published_by":1},{"id":287,"title":"Explore BW-TEST","slug":"explore-bw-test-2","markdown":"\n[*Para ver este art\u00edculo en espa\u00f1ol click aqu\u00ed.*](http:\/\/nicosommi.com\/?p=209 \"Explorando BW-TEST\")\n\nIt is really easy! Look the video!\n\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"473\" src=\"https:\/\/www.youtube.com\/embed\/L6NWUp7wZ7E?feature=oembed\" width=\"840\"><\/iframe>\n\nBW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features\n\n- xunit compatible (tested with jenkins)\n- multiple assertion support by using Assertions.process once in your test\n- test suites support\n- xml and html reports\n- startup once running\n- support running on every request\n\nYou can found the source code in [http:\/\/github.com\/nicosommi\/bw-test](http:\/\/github.com\/nicosommi\/bw-test \"bw-test\")\n\nLicense LGPL v3 \u00a92013 BW-TEST\n\n\n","html":"<p><a title=\"Explorando BW-TEST\" href=\"http:\/\/nicosommi.com\/?p=209\"><em>Para ver este art\u00edculo en espa\u00f1ol click aqu\u00ed.<\/em><\/a><\/p>\n<p>It is really easy! Look the video!<\/p>\n<p><iframe width=\"840\" height=\"473\" src=\"https:\/\/www.youtube.com\/embed\/L6NWUp7wZ7E?feature=oembed\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>BW-TEST is another open source library. This one is for automating your tests. This time you will be able to do your tests within TIBCO Designer. It allows you to integrate your BusinessWorks developed project to your continuous integration server like jenkins. Also, it allows you to practice TDD! So, you can automate your test. You offer a better service. You use the same tool. You save time and money. Features<\/p>\n<ul>\n<li>xunit compatible (tested with jenkins)<\/li>\n<li>multiple assertion support by using Assertions.process once in your test<\/li>\n<li>test suites support<\/li>\n<li>xml and html reports<\/li>\n<li>startup once running<\/li>\n<li>support running on every request<\/li>\n<\/ul>\n<p>You can found the source code in <a title=\"bw-test\" href=\"http:\/\/github.com\/nicosommi\/bw-test\">http:\/\/github.com\/nicosommi\/bw-test<\/a><\/p>\n<p>License LGPL v3 \u00a92013 BW-TEST<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 02 Dec 2013 01:38:50 +0000","created_by":1,"updated_at":"Mon, 02 Dec 2013 01:38:50 +0000","updated_by":1,"published_at":"Mon, 02 Dec 2013 01:38:50 +0000","published_by":1},{"id":291,"title":"BW-REST","slug":"bw-rest-2","markdown":"\n[*Para ver este art\u00edculo en espa\u00f1ol click aqu\u00ed.*](http:\/\/nicosommi.com\/?p=174 \"BW-REST\")\n\n**NOTE:** TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.\n\nWhen we are working with Tibco BusinessWorks it\u2019s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don\u2019t want another layer on your app. Because you came from GI. Because you don\u2019t want to spend more money on another developer. Because you don\u2019t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It\u2019s open source!\n\n[You can found it here http:\/\/github.com\/nicosommi\/bw-rest](http:\/\/github.com\/nicosommi\/bw-rest \"repo\")\n\nSee the video here!\n\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"473\" src=\"https:\/\/www.youtube.com\/embed\/RrPAYiXhTjc?feature=oembed\" width=\"840\"><\/iframe>\n\nFeatures v 0.1\n\n- JADE templating support\n- Controller support\n- Project-relative paths\n- Support for regular expressions\n- Support query string and url parameters\n- Static resource support (recursivelly)\n- Built in implementation customizable by defaultvars\n- Cookie support\n- Multiple server on the same project\/archive\n\nLICENSE: LGPL v3 \u00a92013 BW-REST\n\n\n","html":"<p><a title=\"BW-REST\" href=\"http:\/\/nicosommi.com\/?p=174\"><em>Para ver este art\u00edculo en espa\u00f1ol click aqu\u00ed.<\/em><\/a><\/p>\n<p><strong>NOTE:<\/strong> TIBCO Announciates his support for REST Webservice finally from ActiveMatrix 6.0.<\/p>\n<p>When we are working with Tibco BusinessWorks it&#8217;s becoming more frequent the need to provide a REST API, just as the rest of the world. BW-REST goes beyond that and not only gives you the posibility to expose you services as a REST API, but also allows you to build an entire web application with HTML Templating, Cookies, Static resource routing, etc. It can be useful for several use cases like creating a rapid web application with latest javascript frameworks because you don&#8217;t want another layer on your app. Because you came from GI. Because you don&#8217;t want to spend more money on another developer. Because you don&#8217;t want to bring another error point to your application. Because you just need a little app to mantain the entities inside that project. Just a few cases. With BW-REST you can develop a complete web application like in the example: using backbone, require.js, jquery-ui, coffeescript, etc. It&#8217;s open source!<\/p>\n<p><a title=\"repo\" href=\"http:\/\/github.com\/nicosommi\/bw-rest\" target=\"_blank\">You can found it here http:\/\/github.com\/nicosommi\/bw-rest<\/a><\/p>\n<p>See the video here!<\/p>\n<p><iframe width=\"840\" height=\"473\" src=\"https:\/\/www.youtube.com\/embed\/RrPAYiXhTjc?feature=oembed\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Features v 0.1<\/p>\n<ul>\n<li>JADE templating support<\/li>\n<li>Controller support<\/li>\n<li>Project-relative paths<\/li>\n<li>Support for regular expressions<\/li>\n<li>Support query string and url parameters<\/li>\n<li>Static resource support (recursivelly)<\/li>\n<li>Built in implementation customizable by defaultvars<\/li>\n<li>Cookie support<\/li>\n<li>Multiple server on the same project\/archive<\/li>\n<\/ul>\n<p>LICENSE: LGPL v3 \u00a92013 BW-REST<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 02 Dec 2013 01:41:11 +0000","created_by":1,"updated_at":"Mon, 02 Dec 2013 01:41:11 +0000","updated_by":1,"published_at":"Mon, 02 Dec 2013 01:41:11 +0000","published_by":1},{"id":209,"title":"Explorando BW-TEST","slug":"explore-bw-test","markdown":"\n[*To see this article in english click here.*](http:\/\/nicosommi.com\/?p=287 \"Explore BW-TEST\")\n\nEs muy simple! Mir\u00e1 el video!\n\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"473\" src=\"https:\/\/www.youtube.com\/embed\/L6NWUp7wZ7E?feature=oembed\" width=\"840\"><\/iframe>\n\nBW-TEST es otra librer\u00eda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\u00ednua como Jenkins. Tambi\u00e9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.  \n Caracteristicas\n\n- xunit compatible (tested with jenkins)\n- multiple assertion support by using Assertions.process once in your test\n- test suites support\n- xml and html reports\n- startup once running\n- support running on every request\n\nPodes encontrar el codigo fuente aca: [http:\/\/github.com\/nicosommi\/bw-test](http:\/\/github.com\/nicosommi\/bw-test \"bw-test\")\n\nLicencia LGPL v3 \u00a92013 BW-TEST\n\n\n","html":"<p><a title=\"Explore BW-TEST\" href=\"http:\/\/nicosommi.com\/?p=287\"><em>To see this article in english click here.<\/em><\/a><\/p>\n<p>Es muy simple! Mir\u00e1 el video!<\/p>\n<p><iframe width=\"840\" height=\"473\" src=\"https:\/\/www.youtube.com\/embed\/L6NWUp7wZ7E?feature=oembed\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>BW-TEST es otra librer\u00eda open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion cont\u00ednua como Jenkins. Tambi\u00e9n te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.<br \/>\nCaracteristicas<\/p>\n<ul>\n<li>xunit compatible (tested with jenkins)<\/li>\n<li>multiple assertion support by using Assertions.process once in your test<\/li>\n<li>test suites support<\/li>\n<li>xml and html reports<\/li>\n<li>startup once running<\/li>\n<li>support running on every request<\/li>\n<\/ul>\n<p>Podes encontrar el codigo fuente aca: <a title=\"bw-test\" href=\"http:\/\/github.com\/nicosommi\/bw-test\">http:\/\/github.com\/nicosommi\/bw-test<\/a><\/p>\n<p>Licencia LGPL v3 \u00a92013 BW-TEST<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 05 Dec 2013 21:11:21 +0000","created_by":1,"updated_at":"Thu, 05 Dec 2013 21:11:21 +0000","updated_by":1,"published_at":"Thu, 05 Dec 2013 21:11:21 +0000","published_by":1},{"id":250,"title":"Debugueando node","slug":"debugging-node-seriously","markdown":"\n[*To see this article in english click here.*](http:\/\/nicosommi.com\/?p=284 \"Debugging node\")\n\nCuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\u00e1 haciendo al alt\u00edsimo precio de llegar a un l\u00edo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.\n\nUna de las cosas que m\u00e1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\u00e1s copados como debug, ain2, winston o algo as\u00ed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.\n\nEn mi experiencia hab\u00eda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\u00ed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con \u2013debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\u00e1s din\u00e1mico y liviano en memoria. Tambi\u00e9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\u00ed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\u00e9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\u00e9n clave para no complicarse la vida con la depuraci\u00f3n en node.js.\n\nEs tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.\n\nPrimero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\u00e1pidamente. Muchos podr\u00e1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\u00f3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\u00e1s est\u00e1 decir que algunas veces los errores son tan complicados que la reproducci\u00f3n del mismo nos lleva mucho tiempo y sincronizaci\u00f3n, y por ende estar\u00eda buen\u00edsimo si descubrimos el error en la menor cantidad de intentos posibles.\n\nMencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\u00f3n con el argumento debug.\n\n`node debug script.js`\n\nAlgo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\u00e1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo \u2018cont\u2019 o \u2018c\u2019 el debugger avanzar\u00e1 hasta el pr\u00f3ximo debugger;\n\nHay una lista completa de comandos en la secci\u00f3n Commands reference en el siguiente link [http:\/\/nodejs.org\/api\/debugger.html](http:\/\/nodejs.org\/api\/debugger.html \"http:\/\/nodejs.org\/api\/debugger.html\")\n\nLos m\u00e1s destacados son\n\n- step in: se hace escribiendo s\n- step out: escribiendo o\n- next step: n\n- pause\n- watch(\u2018variableName\u2019) : imprimira el valor en cada paso\n- unwatch(\u2018variableName\u2019) : dejara de monitorear el valor\n- list(4) : imprime el contexto en un radio de 4 lineas\n- repl : important\u00edsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c\n\nHay \u201ccomplicaciones\u201d extra para quienes utilizan gulp\/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\u00f3n\u2026 pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\u00f3n nodeArgs.  \n Por ejemplo:  \n`nodemon({script: '.\/app.js', nodeArgs: ['debug']})`\n\nOtro caso com\u00fan. Test unit. Con debug? S\u00ed. Por ejemplo si ejecutamos  \n`mocha debug test\/ejemplo.js`  \n entonces nos llevar\u00e1 a la consola de debug.\n\nCombinando mocha y grunt\/gulp se puede hacer esto (tambi\u00e9n con nodemon):  \n`nodemon({script: '.\/node_modules\/mocha\/bin\/_mocha', nodeArgs: ['debug']});`  \n donde pon\u00e9s la ruta a tu instalaci\u00f3n global del ejecutable _mocha (con gui\u00f3n bajo) y listo, con eso ten\u00e9s tus test con el debugger built in y tus tareas previas ejecutadas.\n\nObteniendo un error ENOSPC?  \n Eso es porque hay muchos archivos abiertos (o ten\u00e9s un editor que suele abrir muchos archivos como Sublime o nodemon est\u00e1 incluyendo muchos archivos).  \n Lo pod\u00e9s solucionar incrementando el valor de max_user_watches con este comando  \n`sudo sysctl fs.inotify.max_user_watches=20000`  \n El n\u00famero correcto depende de tus necesidades. Pod\u00e9s ver que ten\u00e9s actualmente ejecutando esto  \n`more \/proc\/sys\/fs\/inotify\/max_user_watches`  \n Tambi\u00e9n record\u00e1 executar nodemon con el argumento -i nodemodules\n\nEn definitiva. Si todav\u00eda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.\n\nTen\u00e9s una idea para mejorar este art\u00edculo? Mand\u00e1mela a nicosommi@gmail.com\n\n\n","html":"<p><a title=\"Debugging node\" href=\"http:\/\/nicosommi.com\/?p=284\"><em>To see this article in english click here.<\/em><\/a><\/p>\n<p>Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se est\u00e1 haciendo al alt\u00edsimo precio de llegar a un l\u00edo muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.<\/p>\n<p>Una de las cosas que m\u00e1s me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes m\u00e1s copados como debug, ain2, winston o algo as\u00ed. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.<\/p>\n<p>En mi experiencia hab\u00eda debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java as\u00ed que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho m\u00e1s din\u00e1mico y liviano en memoria. Tambi\u00e9n puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ah\u00ed. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitu\u00e9 de ubuntu, git, y esas cosas. Perder el miedo a la consola es tambi\u00e9n clave para no complicarse la vida con la depuraci\u00f3n en node.js.<\/p>\n<p>Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.<\/p>\n<p>Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema r\u00e1pidamente. Muchos podr\u00e1n discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presi\u00f3n. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Dem\u00e1s est\u00e1 decir que algunas veces los errores son tan complicados que la reproducci\u00f3n del mismo nos lleva mucho tiempo y sincronizaci\u00f3n, y por ende estar\u00eda buen\u00edsimo si descubrimos el error en la menor cantidad de intentos posibles.<\/p>\n<p>Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicaci\u00f3n con el argumento debug.<\/p>\n<p><code>node debug script.js<\/code><\/p>\n<p>Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gr\u00e1ficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &#8216;cont&#8217; o &#8216;c&#8217; el debugger avanzar\u00e1 hasta el pr\u00f3ximo debugger;<\/p>\n<p>Hay una lista completa de comandos en la secci\u00f3n Commands reference en el siguiente link <a title=\"http:\/\/nodejs.org\/api\/debugger.html\" href=\"http:\/\/nodejs.org\/api\/debugger.html\">http:\/\/nodejs.org\/api\/debugger.html<\/a><\/p>\n<p>Los m\u00e1s destacados son<\/p>\n<ul>\n<li>step in: se hace escribiendo s<\/li>\n<li>step out: escribiendo o<\/li>\n<li>next step: n<\/li>\n<li>pause<\/li>\n<li>watch(&#8216;variableName&#8217;) : imprimira el valor en cada paso<\/li>\n<li>unwatch(&#8216;variableName&#8217;) : dejara de monitorear el valor<\/li>\n<li>list(4) : imprime el contexto en un radio de 4 lineas<\/li>\n<li>repl : important\u00edsimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c<\/li>\n<\/ul>\n<p>Hay &#8220;complicaciones&#8221; extra para quienes utilizan gulp\/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicaci\u00f3n&#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opci\u00f3n nodeArgs.<br \/>\nPor ejemplo:<br \/>\n<code>nodemon({script: '.\/app.js', nodeArgs: ['debug']})<\/code><\/p>\n<p>Otro caso com\u00fan. Test unit. Con debug? S\u00ed. Por ejemplo si ejecutamos<br \/>\n<code>mocha debug test\/ejemplo.js<\/code><br \/>\nentonces nos llevar\u00e1 a la consola de debug.<\/p>\n<p>Combinando mocha y grunt\/gulp se puede hacer esto (tambi\u00e9n con nodemon):<br \/>\n<code>nodemon({script: '.\/node_modules\/mocha\/bin\/_mocha', nodeArgs: ['debug']});<\/code><br \/>\ndonde pon\u00e9s la ruta a tu instalaci\u00f3n global del ejecutable _mocha (con gui\u00f3n bajo) y listo, con eso ten\u00e9s tus test con el debugger built in y tus tareas previas ejecutadas.<\/p>\n<p>Obteniendo un error ENOSPC?<br \/>\nEso es porque hay muchos archivos abiertos (o ten\u00e9s un editor que suele abrir muchos archivos como Sublime o nodemon est\u00e1 incluyendo muchos archivos).<br \/>\nLo pod\u00e9s solucionar incrementando el valor de max_user_watches con este comando<br \/>\n<code>sudo sysctl fs.inotify.max_user_watches=20000<\/code><br \/>\nEl n\u00famero correcto depende de tus necesidades. Pod\u00e9s ver que ten\u00e9s actualmente ejecutando esto<br \/>\n<code>more \/proc\/sys\/fs\/inotify\/max_user_watches<\/code><br \/>\nTambi\u00e9n record\u00e1 executar nodemon con el argumento -i nodemodules<\/p>\n<p>En definitiva. Si todav\u00eda no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.<\/p>\n<p>Ten\u00e9s una idea para mejorar este art\u00edculo? Mand\u00e1mela a nicosommi@gmail.com<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 20 Apr 2014 15:17:15 +0000","created_by":1,"updated_at":"Sun, 20 Apr 2014 15:17:15 +0000","updated_by":1,"published_at":"Sun, 20 Apr 2014 15:17:15 +0000","published_by":1},{"id":284,"title":"Debugging node","slug":"debugging-node","markdown":"\n[*Para ver este art\u00edculo en espa\u00f1ol click aqu\u00ed.*](http:\/\/nicosommi.com\/?p=250 \"Debugueando node\")\n\nWhen we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don\u2019t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.\n\nOne of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I\u2019m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.\n\nIn my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it\u2019s easy to use. You just start node with \u2013debug flag and connect the plugin to that port. It\u2019s a very good alternative. You can also use Chrome browser the same way. But today I\u2019m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.\n\nSo easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.\n\nFirst of all let\u2019s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills\u2026 I don\u2019t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.\n\nWell\u2026 now that we know the benefits, let\u2019s go deep on how do you do this. It\u2019s so simple\u2026 like everything in js. We just need to put the ** debugger; ** sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument\u2026.\n\n`node debug script.js`\n\nThat simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like \u2018n\u2019, \u2018s\u2019, \u2018c\u2019, or \u2018repl\u2019. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.\n\nThe command list is obviously on the official documentation here [http:\/\/nodejs.org\/api\/debugger.html](http:\/\/nodejs.org\/api\/debugger.html \"http:\/\/nodejs.org\/api\/debugger.html\")\n\nAs I pre-announced some, the most used are:\n\n- step in: just with s\n- step out: writing o\n- next step: n\n- pause (just writing that)\n- watch(\u2018variableName\u2019) : this will print the variable value on each step\n- unwatch(\u2018variableName\u2019) : delete some watch to stop printing it\n- list(4) : prints the context in a 4 line radious of the code, you can provide some other number\n- repl : very important it allows as I said before to eval something in the current context like the browser\u2019s console (we can see but we can\u2019t modify ). Exit with CTRL+C\n\nThere is extra \u201cproblems\u201d to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:  \n`nodemon({script: '.\/app.js', nodeArgs: ['debug']})`\n\nAnother common case: test unit. With debug? Yes. For example if we execute  \n`mocha debug test\/example.js`  \n then we also get the debugger.\n\nCombining mocha and grunt\/gulp you can do this currently (also with nodemon):  \n`nodemon({script: '.\/node_modules\/mocha\/bin\/_mocha', nodeArgs: ['debug']});`  \n where you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.\n\nYou get a ENOSPC Error?  \n That\u2019s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).  \n You can solve this by increasing the max_user_watches with this command  \n`sudo sysctl fs.inotify.max_user_watches=20000`  \n The correct number depends on your needs. You can see your current by executing this  \n`more \/proc\/sys\/fs\/inotify\/max_user_watches`  \n Also remember to execute nodemon with the -i node_modules argument.\n\nSo, if you didn\u2019t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.\n\nDo you have an idea to improve this article? tell me to nicosommi@gmail.com\n\n\n","html":"<p><a title=\"Debugueando node\" href=\"http:\/\/nicosommi.com\/?p=250\"><em>Para ver este art\u00edculo en espa\u00f1ol click aqu\u00ed.<\/em><\/a><\/p>\n<p>When we write scripts on node.js there is always some things flying around our minds.There is a lot of things to think about. Is simple, but you need to know what are you doing because if you don&#8217;t you can get into a mess quickly. Javascript. npm. The good, the bad and the uggly.<\/p>\n<p>One of the things that scared me the most in this node-hell at my begining was the debug method. Some of us are used to use frequently different kinds of logging utilities, from the built in console object to cool npm packages like debug, ain2, winston, etc. But what about the old well known debug process? Yes! I&#8217;m talking about that one that allow us to watch expressiones in the current context, view the backtrace, and that kind of things.<\/p>\n<p>In my experience I was debugging node when I started to use it, but in a heavy way. Using eclipse. I came from Java so that was familiar for me and the V8 eclipse plugin works great and it&#8217;s easy to use. You just start node with &#8211;debug flag and connect the plugin to that port. It&#8217;s a very good alternative. You can also use Chrome browser the same way. But today I&#8217;m working on a lighter environment. Now I use Sublime Text and Gedit. Lose the fear to the console is something that we must do. Many of us learn that from ubuntu, git and such. Lose the fear to the console is actually a key part for a light and easy debug with node.<\/p>\n<p>So easy as the well known debugger on complex IDE but in the console. Some programmers are used to this kind of debugging, but for people that worked mostly with Java, C#, TIBCO and that kind of high level programming languages that is not the common thing and this was my first time debugging through the console for real.<\/p>\n<p>First of all let&#8217;s take a look at the need. This came from real environments in which you have to solve a complexs issues all the time. Console logging sometimes does not give us the flexibility we need and in the time we need to know what is happening. Sometimes is just difficult to reproduce just one execution of some case. Many people can discuss about this and some maybe prefer to just trust in his skills&#8230; I don&#8217;t, I just prefer to not feel that pressure, I just want to know how to debug and detect problems watching the environment and using the tools the language provides for doing that.<\/p>\n<p>Well&#8230; now that we know the benefits, let&#8217;s go deep on how do you do this. It&#8217;s so simple&#8230; like everything in js. We just need to put the <strong> debugger; <\/strong> sentence in the places that we want, taking care of the asynchrounous nature of most apps on node, of course. Then we just execute the app with the debug argument&#8230;.<\/p>\n<p><code>node debug script.js<\/code><\/p>\n<p>That simple. That leave us in the debug console. Now is easy, but from command line. Command we are use to execute with F8, F10, and all that, now are commands like &#8216;n&#8217;, &#8216;s&#8217;, &#8216;c&#8217;, or &#8216;repl&#8217;. Yes, n is for next, s if for step into, c is for continue or run. Repl is for entering to a console to eval.<\/p>\n<p>The command list is obviously on the official documentation here <a title=\"http:\/\/nodejs.org\/api\/debugger.html\" href=\"http:\/\/nodejs.org\/api\/debugger.html\">http:\/\/nodejs.org\/api\/debugger.html<\/a><\/p>\n<p>As I pre-announced some, the most used are:<\/p>\n<ul>\n<li>step in: just with s<\/li>\n<li>step out: writing o<\/li>\n<li>next step: n<\/li>\n<li>pause (just writing that)<\/li>\n<li>watch(&#8216;variableName&#8217;) : this will print the variable value on each step<\/li>\n<li>unwatch(&#8216;variableName&#8217;) : delete some watch to stop printing it<\/li>\n<li>list(4) : prints the context in a 4 line radious of the code, you can provide some other number<\/li>\n<li>repl : very important it allows as I said before to eval something in the current context like the browser&#8217;s console (we can see but we can&#8217;t modify ). Exit with CTRL+C<\/li>\n<\/ul>\n<p>There is extra &#8220;problems&#8221; to people who use gulp or grunt (almost everyone) to execute some previous task before running. But if that is your case you can use for example nodemon with the nodeArgs option like this:<br \/>\n<code>nodemon({script: '.\/app.js', nodeArgs: ['debug']})<\/code><\/p>\n<p>Another common case: test unit. With debug? Yes. For example if we execute<br \/>\n<code>mocha debug test\/example.js<\/code><br \/>\nthen we also get the debugger.<\/p>\n<p>Combining mocha and grunt\/gulp you can do this currently (also with nodemon):<br \/>\n<code>nodemon({script: '.\/node_modules\/mocha\/bin\/_mocha', nodeArgs: ['debug']});<\/code><br \/>\nwhere you put your path to the _mocha (with the underscore, is just a file on the mocha module) file on the script option. And you get your test on debug with your previous tasks configured.<\/p>\n<p>You get a ENOSPC Error?<br \/>\nThat&#8217;s because of too many files open (either or you have an editor like Sublime or nodemon is including too much files).<br \/>\nYou can solve this by increasing the max_user_watches with this command<br \/>\n<code>sudo sysctl fs.inotify.max_user_watches=20000<\/code><br \/>\nThe correct number depends on your needs. You can see your current by executing this<br \/>\n<code>more \/proc\/sys\/fs\/inotify\/max_user_watches<\/code><br \/>\nAlso remember to execute nodemon with the -i node_modules argument.<\/p>\n<p>So, if you didn&#8217;t do this yet, do it, is easy and very useful. Just do a simple for script and try it by yourself. Is going to make your life easier.<\/p>\n<p>Do you have an idea to improve this article? tell me to nicosommi@gmail.com<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 02 May 2014 01:39:40 +0000","created_by":1,"updated_at":"Fri, 02 May 2014 01:39:40 +0000","updated_by":1,"published_at":"Fri, 02 May 2014 01:39:40 +0000","published_by":1},{"id":273,"title":"&quot;Asusta pero es exitante&quot; - Traducci\u00f3n al espa\u00f1ol de la carta de Mark Surman de Mozilla (Scary, but exciting)","slug":"asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting","markdown":"\nHoy recib\u00ed un mail lindo y prometedor y quisiera que los que hablan s\u00f3lo espa\u00f1ol puedan tambi\u00e9n leerlo.  \n Es de Mark Surman de Mozilla. Y dice:  \n*\u201cDesde donde yo lo veo, el futuro luce exitante pero tambi\u00e9n asusta un poco.*\n\nPrimero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):\n\nAhora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio \u2013 todo en el mismo t\u00e9rmino que todos los dem\u00e1s.\n\nEsto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\u00f3n y emprendedurismo. Probablemente escuchaste acerca de la \u201cneutralidad de la red\u201d (net neutrality). Estamos preocupados de que esto deje de ser as\u00ed.\n\nEstoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\u00f1ada para servir a unos pocos en lugar de servir a muchos. B\u00e1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\u00e9 creado para evitarlas. Desanima. Pero\u2026\n\nLo exitante (Dije que \u00edbamos a llegar ac\u00e1):  \n Las cosas no est\u00e1n tan quietas como parecen \u2013 y la verdad es, el futuro est\u00e1 en nuestras manos. No en \u201cnuestras\u201d como refiri\u00e9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\u00ed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\u00e1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.\n\nY esta pelea empieza ahora mismo. En las pr\u00f3ximas semanas y meses estamos lanzando una campa\u00f1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\u00fablico y no a unas pocas gigantes compa\u00f1\u00edas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\u00e9s? Hac\u00e9noslo saber, y unite a los millones que est\u00e1n ayudando a formar el futuro del recurso p\u00fablico m\u00e1s grande del mundo.\n\nY si despu\u00e9s de decirnos tu peque\u00f1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad \u2013 la nueva actualizaci\u00f3n del navegador Firefox. No voy a entrar en detalles de porqu\u00e9 es maravilloso (aunque desear\u00eda poder hacerlo), pero he aqu\u00ed es un peque\u00f1o vistazo: es m\u00e1s seguro, es m\u00e1s r\u00e1pido, es m\u00e1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\u00e9 hecho con la misi\u00f3n de ponerte a vos primero.\n\nAl final del d\u00eda, la genial comunidad global Mozilla es la raz\u00f3n por la cual peleamos la pelea, resolvemos problemas dif\u00edciles y tomamos acciones importantes. Y mientras nuestra misi\u00f3n no cambie (y no lo har\u00e1), estamos haciendo paquetes m\u00e1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\u00f3lo el comienzo.\n\nSigue conectado.\n\nMark\u201d\n\n[Para m\u00e1s informaci\u00f3n sobre Firefox click aqu\u00ed.](https:\/\/webwewant.mozilla.org\/es\/?utm_source=newsletter&utm_medium=newsletter&utm_content=foundationemail&utm_campaign=glow2014)\n\nTexto Original\n\n> \u201cFrom where I\u2019m sitting, the future looks exciting, but also a bit scary.\n> \n> First, the scary (What can I say? I\u2019m a worrier, and I\u2019d rather end on the high note.):\n> \n> Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.\n> \n> This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You\u2019ve probably heard about it as \u201cnet neutrality.\u201d We\u2019re worried it\u2019s about to go away.\n> \n> I\u2019m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It\u2019s discouraging. But\u2026\n> \n> The exciting (I told you we\u2019d get there):\n> \n> Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not \u201cus\u201d as in Mozilla staff. \u201cUs\u201d as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.\n> \n> And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:\n> \n> What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world\u2019s largest public resource.\n> \n> And after you\u2019ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we\u2019ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won\u2019t go into all the details as to why it\u2019s awesome (though I wish I could), but here\u2019s the upshot: it\u2019s more secure, it\u2019s faster, it\u2019s more customizable and it\u2019s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.\n> \n> At the end of that day, Mozilla\u2019s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we\u2019re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.\n> \n> Stay tuned,\n> \n> Mark\u201d\n\nCualquier sugerencia sobre la traducci\u00f3n nicosommi@gmail.com\n\n\n","html":"<p>Hoy recib\u00ed un mail lindo y prometedor y quisiera que los que hablan s\u00f3lo espa\u00f1ol puedan tambi\u00e9n leerlo.<br \/>\nEs de Mark Surman de Mozilla. Y dice:<br \/>\n<em>&#8220;Desde donde yo lo veo, el futuro luce exitante pero tambi\u00e9n asusta un poco.<\/em><\/p>\n<p>Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):<\/p>\n<p>Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &#8211; todo en el mismo t\u00e9rmino que todos los dem\u00e1s.<\/p>\n<p>Esto es lo que hace que la web sea lo que es hoy, un motor global de innovaci\u00f3n y emprendedurismo. Probablemente escuchaste acerca de la &#8220;neutralidad de la red&#8221; (net neutrality). Estamos preocupados de que esto deje de ser as\u00ed.<\/p>\n<p>Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y dise\u00f1ada para servir a unos pocos en lugar de servir a muchos. B\u00e1sicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fu\u00e9 creado para evitarlas. Desanima. Pero&#8230;<\/p>\n<p>Lo exitante (Dije que \u00edbamos a llegar ac\u00e1):<br \/>\nLas cosas no est\u00e1n tan quietas como parecen &#8211; y la verdad es, el futuro est\u00e1 en nuestras manos. No en &#8220;nuestras&#8221; como refiri\u00e9ndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a m\u00ed, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar m\u00e1s cerca entre nosotros, en lugar de que unos empujen a otros afuera.<\/p>\n<p>Y esta pelea empieza ahora mismo. En las pr\u00f3ximas semanas y meses estamos lanzando una campa\u00f1a de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien p\u00fablico y no a unas pocas gigantes compa\u00f1\u00edas. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web quer\u00e9s? Hac\u00e9noslo saber, y unite a los millones que est\u00e1n ayudando a formar el futuro del recurso p\u00fablico m\u00e1s grande del mundo.<\/p>\n<p>Y si despu\u00e9s de decirnos tu peque\u00f1o vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &#8211; la nueva actualizaci\u00f3n del navegador Firefox. No voy a entrar en detalles de porqu\u00e9 es maravilloso (aunque desear\u00eda poder hacerlo), pero he aqu\u00ed es un peque\u00f1o vistazo: es m\u00e1s seguro, es m\u00e1s r\u00e1pido, es m\u00e1s personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fu\u00e9 hecho con la misi\u00f3n de ponerte a vos primero.<\/p>\n<p>Al final del d\u00eda, la genial comunidad global Mozilla es la raz\u00f3n por la cual peleamos la pelea, resolvemos problemas dif\u00edciles y tomamos acciones importantes. Y mientras nuestra misi\u00f3n no cambie (y no lo har\u00e1), estamos haciendo paquetes m\u00e1s grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es s\u00f3lo el comienzo.<\/p>\n<p>Sigue conectado.<\/p>\n<p>Mark&#8221;<\/p>\n<p><a href=\"https:\/\/webwewant.mozilla.org\/es\/?utm_source=newsletter&amp;utm_medium=newsletter&amp;utm_content=foundationemail&amp;utm_campaign=glow2014\">Para m\u00e1s informaci\u00f3n sobre Firefox click aqu\u00ed.<\/a><\/p>\n<p>Texto Original<\/p>\n<blockquote><p>&#8220;From where I&#8217;m sitting, the future looks exciting, but also a bit scary.<\/p>\n<p>First, the scary (What can I say? I&#8217;m a worrier, and I&#8217;d rather end on the high note.):<\/p>\n<p>Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business \u2014 all on the same terms as everybody else.<\/p>\n<p>This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&#8217;ve probably heard about it as &#8220;net neutrality.&#8221; We&#8217;re worried it&#8217;s about to go away.<\/p>\n<p>I&#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&#8217;s discouraging. But&#8230;<\/p>\n<p>The exciting (I told you we&#8217;d get there):<\/p>\n<p>Things are not quite as bleak as they seem \u2014 and the truth is, the future is up to us. Not &#8220;us&#8221; as in Mozilla staff. &#8220;Us&#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.<\/p>\n<p>And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:<\/p>\n<p>What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&#8217;s largest public resource.<\/p>\n<p>And after you&#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&#8217;ve got something to help shape that reality \u2014 the newest update to the Firefox browser. I won&#8217;t go into all the details as to why it&#8217;s awesome (though I wish I could), but here&#8217;s the upshot: it&#8217;s more secure, it&#8217;s faster, it&#8217;s more customizable and it&#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.<\/p>\n<p>At the end of that day, Mozilla&#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.<\/p>\n<p>Stay tuned,<\/p>\n<p>Mark&#8221;<\/p><\/blockquote>\n<p>Cualquier sugerencia sobre la traducci\u00f3n nicosommi@gmail.com<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 02 May 2014 01:56:10 +0000","created_by":1,"updated_at":"Fri, 02 May 2014 01:56:10 +0000","updated_by":1,"published_at":"Fri, 02 May 2014 01:56:10 +0000","published_by":1},{"id":317,"title":"Posts","slug":"temp-slug-8","markdown":"","html":"","image":null,"featured":0,"page":1,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 11 May 2014 14:33:47 +0000","created_by":1,"updated_at":"Sun, 11 May 2014 14:33:47 +0000","updated_by":1,"published_at":"","published_by":1},{"id":329,"title":"Mmmmm.... mozilla...","slug":"mmmmm-mozilla","markdown":"\nEstos dias estuve leyendo sobre el alejamiento de [Brendan Eich](http:\/\/es.wikipedia.org\/wiki\/Brendan_Eich \"Brendan Eich\") de Mozilla (noticia difundida en varios lugares por ejemplo [aca](http:\/\/www.latimes.com\/business\/hiltzik\/la-fi-mh-gay-marriage-20140404-story.html \"aca\")). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona [aca](http:\/\/www.csmonitor.com\/USA\/2014\/0405\/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video \"aca\") es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero **supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores** (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.\n\nAhora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con [este link](https:\/\/fsf.org\/news\/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management \"este link\") en el que se anuncia que **la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente**.\n\nTan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar [aca](https:\/\/blog.mozilla.org\/blog\/2014\/05\/14\/drm-and-the-challenge-of-serving-users\/ \"aca\") y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, **Mozilla parece no ser tan intachable en sus valores**. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).\n\nLuego decidi por supuesto leer la opinion de Eich y encontre [esto](https:\/\/brendaneich.com\/2013\/10\/the-bridge-of-khazad-drm\/ \"esto\") que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (**como presiones de Hollywood, Google, Microsoft, etc**), estan por ejemplo [este](https:\/\/plus.google.com\/app\/basic\/stream\/z13qtnxhuojytbjbr04ci3cowrmtehsy324 \"este\") que nos habla que **DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos**.\n\nEsto me hizo sospechar de intereses economicos y encontre [este](http:\/\/www.redstate.com\/2014\/05\/17\/brendan-eich-removed-get-closed-source-drm-firefox\/ \"este\") articulo que **sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla**.\n\nUn sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.\n\nEsto no es un veredicto final, pero es verdad que la asociacion con Adobe para \u201cdar un beneficio al usuario\u201d, rompe los valores de la fundacion\u2026 y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.\n\n:\/\n\nPor ahora seguire con Firefox porque sigue garantizando cierta privacidad\u2026 pero en el futuro\u2026 que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero **esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.**\n\n\n","html":"<p>Estos dias estuve leyendo sobre el alejamiento de <a title=\"Brendan Eich\" href=\"http:\/\/es.wikipedia.org\/wiki\/Brendan_Eich\">Brendan Eich<\/a> de Mozilla (noticia difundida en varios lugares por ejemplo <a title=\"aca\" href=\"http:\/\/www.latimes.com\/business\/hiltzik\/la-fi-mh-gay-marriage-20140404-story.html\">aca<\/a>). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona <a title=\"aca\" href=\"http:\/\/www.csmonitor.com\/USA\/2014\/0405\/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video\">aca<\/a> es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero <strong>supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores<\/strong> (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.<\/p>\n<p>Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con <a title=\"este link\" href=\"https:\/\/fsf.org\/news\/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management\">este link<\/a> en el que se anuncia que <strong>la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente<\/strong>.<\/p>\n<p>Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar <a title=\"aca\" href=\"https:\/\/blog.mozilla.org\/blog\/2014\/05\/14\/drm-and-the-challenge-of-serving-users\/\">aca<\/a> y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, <strong>Mozilla parece no ser tan intachable en sus valores<\/strong>. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).<\/p>\n<p>Luego decidi por supuesto leer la opinion de Eich y encontre <a title=\"esto\" href=\"https:\/\/brendaneich.com\/2013\/10\/the-bridge-of-khazad-drm\/\">esto<\/a> que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (<strong>como presiones de Hollywood, Google, Microsoft, etc<\/strong>), estan por ejemplo <a title=\"este\" href=\"https:\/\/plus.google.com\/app\/basic\/stream\/z13qtnxhuojytbjbr04ci3cowrmtehsy324\">este<\/a> que nos habla que <strong>DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos<\/strong>.<\/p>\n<p>Esto me hizo sospechar de intereses economicos y encontre <a title=\"este\" href=\"http:\/\/www.redstate.com\/2014\/05\/17\/brendan-eich-removed-get-closed-source-drm-firefox\/\">este<\/a> articulo que <strong>sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla<\/strong>.<\/p>\n<p>Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.<\/p>\n<p>Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &#8220;dar un beneficio al usuario&#8221;, rompe los valores de la fundacion&#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.<\/p>\n<p>:\/<\/p>\n<p>Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&#8230; pero en el futuro&#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero <strong>esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.<\/strong><\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 21 Jun 2014 19:12:03 +0000","created_by":1,"updated_at":"Sat, 21 Jun 2014 19:12:03 +0000","updated_by":1,"published_at":"Sat, 21 Jun 2014 19:12:03 +0000","published_by":1},{"id":342,"title":"Techs","slug":"temp-slug-10","markdown":"","html":"","image":null,"featured":0,"page":1,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 25 Jun 2014 00:49:35 +0000","created_by":1,"updated_at":"Wed, 25 Jun 2014 00:49:35 +0000","updated_by":1,"published_at":"","published_by":1},{"id":354,"title":"Espa\u00f1ol","slug":"espanol","markdown":"\n[view in english](http:\/\/nicosommi.com\/ \"view in english\")\n\n[posts-for-page cat_slug=\u2019espanol\u2019 hide_images=\u2019false\u2019 num=\u20195\u2032 read_more='<br>Leer mas \u00bb\u2019 show_full_posts=\u2019false\u2019 use_wp_excerpt=\u2019true\u2019 strip_html=\u2019true\u2019 hide_post_content=\u2019false\u2019 show_meta=\u2019true\u2019]\n\n\n","html":"<p><a title=\"view in english\" href=\"http:\/\/nicosommi.com\/\">view in english<\/a><\/p>\n<p>[posts-for-page cat_slug=&#8217;espanol&#8217; hide_images=&#8217;false&#8217; num=&#8217;5&#8242; read_more='&lt;br&gt;Leer mas &amp;raquo;&#8217; show_full_posts=&#8217;false&#8217; use_wp_excerpt=&#8217;true&#8217; strip_html=&#8217;true&#8217; hide_post_content=&#8217;false&#8217; show_meta=&#8217;true&#8217;]<\/p>\n","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 25 Jun 2014 00:59:30 +0000","created_by":1,"updated_at":"Wed, 25 Jun 2014 00:59:30 +0000","updated_by":1,"published_at":"Wed, 25 Jun 2014 00:59:30 +0000","published_by":1},{"id":351,"title":"English","slug":"english","markdown":"\n[ver en <span id=\"sample-permalink\" tabindex=\"-1\">espa\u00f1ol<\/span>](http:\/\/nicosommi.com\/?page_id=354 \"ver en espa\u00f1ol\")\n\n[posts-for-page cat_slug=\u2019english\u2019 hide_images=\u2019false\u2019 num=\u20195\u2032 read_more='<br>Read More \u00bb\u2019 show_full_posts=\u2019false\u2019 use_wp_excerpt=\u2019true\u2019 strip_html=\u2019true\u2019 hide_post_content=\u2019false\u2019 show_meta=\u2019true\u2019]\n\n\n","html":"<p><a title=\"ver en espa\u00f1ol\" href=\"http:\/\/nicosommi.com\/?page_id=354\">ver en <span id=\"sample-permalink\" tabindex=\"-1\">espa\u00f1ol<\/span><\/a><\/p>\n<p>[posts-for-page cat_slug=&#8217;english&#8217; hide_images=&#8217;false&#8217; num=&#8217;5&#8242; read_more='&lt;br&gt;Read More &amp;raquo;&#8217; show_full_posts=&#8217;false&#8217; use_wp_excerpt=&#8217;true&#8217; strip_html=&#8217;true&#8217; hide_post_content=&#8217;false&#8217; show_meta=&#8217;true&#8217;]<\/p>\n","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 25 Jun 2014 00:59:38 +0000","created_by":1,"updated_at":"Wed, 25 Jun 2014 00:59:38 +0000","updated_by":1,"published_at":"Wed, 25 Jun 2014 00:59:38 +0000","published_by":1},{"id":341,"title":"All posts","slug":"temp-slug-13","markdown":"","html":"","image":null,"featured":0,"page":1,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 25 Jun 2014 01:02:11 +0000","created_by":1,"updated_at":"Wed, 25 Jun 2014 01:02:11 +0000","updated_by":1,"published_at":"","published_by":1},{"id":365,"title":"Organizing your app in jenkins","slug":"temp-slug-14","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 28 Jul 2014 23:57:38 +0000","created_by":1,"updated_at":"Mon, 28 Jul 2014 23:57:38 +0000","updated_by":1,"published_at":"","published_by":1},{"id":367,"title":"Fine tunning mysql","slug":"temp-slug-15","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 28 Jul 2014 23:57:59 +0000","created_by":1,"updated_at":"Mon, 28 Jul 2014 23:57:59 +0000","updated_by":1,"published_at":"","published_by":1},{"id":373,"title":"Monetize your site","slug":"temp-slug-16","markdown":"\nTell about monitizing your website with chargify and node\n\n\n","html":"<p>Tell about monitizing your website with chargify and node<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 21 Aug 2014 16:53:13 +0000","created_by":1,"updated_at":"Thu, 21 Aug 2014 16:53:13 +0000","updated_by":1,"published_at":"","published_by":1},{"id":375,"title":"Secure Startup incubator","slug":"temp-slug-17","markdown":"\nExplain how intag can help you to secure your startup by adding key features\n\n\n","html":"<p>Explain how intag can help you to secure your startup by adding key features<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 21 Aug 2014 16:54:28 +0000","created_by":1,"updated_at":"Thu, 21 Aug 2014 16:54:28 +0000","updated_by":1,"published_at":"","published_by":1},{"id":377,"title":"Zombie functions on node.js","slug":"temp-slug-18","markdown":"\nExplain and give examples about zombie functions, how they work, until when, common causes, etc.\n\n\n","html":"<p>Explain and give examples about zombie functions, how they work, until when, common causes, etc.<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 22 Aug 2014 13:59:47 +0000","created_by":1,"updated_at":"Fri, 22 Aug 2014 13:59:47 +0000","updated_by":1,"published_at":"","published_by":1},{"id":380,"title":"EH Strategy","slug":"temp-slug-19","markdown":"\nUsing some fwk to handle with web appender\n\nintag:  \n give analytics  \n but also action on errors: webhooks\n\n\u00a0\n\n\n","html":"<p>Using some fwk to handle with web appender<\/p>\n<p>intag:<br \/>\ngive analytics<br \/>\nbut also action on errors: webhooks<\/p>\n<p>&nbsp;<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 28 Aug 2014 14:26:13 +0000","created_by":1,"updated_at":"Thu, 28 Aug 2014 14:26:13 +0000","updated_by":1,"published_at":"","published_by":1},{"id":384,"title":"Private FREE alternative for your source code repos","slug":"temp-slug-20","markdown":"\nI\u2019m going to show you how to do it using mega.co.nz client sync app, and of course git. Also some web interface alternatives that you can use on them in the future (hosted dynamic proxies)\n\n\n","html":"<p>I&#8217;m going to show you how to do it using mega.co.nz client sync app, and of course git. Also some web interface alternatives that you can use on them in the future (hosted dynamic proxies)<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 10 Dec 2014 20:38:02 +0000","created_by":1,"updated_at":"Wed, 10 Dec 2014 20:38:02 +0000","updated_by":1,"published_at":"","published_by":1},{"id":371,"title":"Bot avoider","slug":"temp-slug-21","markdown":"\nAre you tired of taking in count visits from bots?\n\nDo you know there are bots that does not look for your robots.txt?\n\nI will explain in this article one approach to address this problem, but first I will start by telling some details on how that works and why is not enough to just create a robots file.\n\nRobots text file is for \u2018standard\u2019 bots, but there are web crawlers everywhere, client scripts that are non humans, following links automatically to your page. This can happen through a twit, a post on facebook, etc.\n\nWhat we need here is to avoid unuseful processing time and also to get more precise at statistics. So a regular approach is to mantain a filter black list with some precautions.\n\nHow is that? Well, basically check for http headers against a database but checking, for example, we don\u2019t filter by ip address those request that have a dynamic ip address, because that can cause loosing future requests from valid clients.\n\nSpecifically we can check the user agent mainly, and the visitor\u2019s ip address.\n\nHere is some data we can fill our database with: http:\/\/www.botopedia.org\/\n\nIf you want a ready-to-use solution, you can check my botavoider on github and start avoiding bots in just a few lines of code!\n\nUsing our database which I will maintain through time with my team using many trusted sources. This solution is free with some limits during the alpha version. You can request your apikey by contacting me directly to nicosommi@gmail.com\n\n\u00a0\n\n\n","html":"<p>Are you tired of taking in count visits from bots?<\/p>\n<p>Do you know there are bots that does not look for your robots.txt?<\/p>\n<p>I will explain in this article one approach to address this problem, but first I will start by telling some details on how that works and why is not enough to just create a robots file.<\/p>\n<p>Robots text file is for &#8216;standard&#8217; bots, but there are web crawlers everywhere, client scripts that are non humans, following links automatically to your page. This can happen through a twit, a post on facebook, etc.<\/p>\n<p>What we need here is to avoid unuseful processing time and also to get more precise at statistics. So a regular approach is to mantain a filter black list with some precautions.<\/p>\n<p>How is that? Well, basically check for http headers against a database but checking, for example, we don&#8217;t filter by ip address those request that have a dynamic ip address, because that can cause loosing future requests from valid clients.<\/p>\n<p>Specifically we can check the user agent mainly, and the visitor&#8217;s ip address.<\/p>\n<p>Here is some data we can fill our database with: http:\/\/www.botopedia.org\/<\/p>\n<p>If you want a ready-to-use solution, you can check my botavoider on github and start avoiding bots in just a few lines of code!<\/p>\n<p>Using our database which I will maintain through time with my team using many trusted sources. This solution is free with some limits during the alpha version. You can request your apikey by contacting me directly to nicosommi@gmail.com<\/p>\n<p>&nbsp;<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 10 Feb 2015 15:15:10 +0000","created_by":1,"updated_at":"Tue, 10 Feb 2015 15:15:10 +0000","updated_by":1,"published_at":"","published_by":1},{"id":391,"title":"Asumir la realidad y la privacidad","slug":"temp-slug-22","markdown":"\nActualmente vivimos en un mundo muy inundado de informacion que viaja sin patrones aparentes hacia todas las direcciones en intensidades muy grandes sobre todo en relacion al pasado.\n\nLa globalizacion tiene por definicion efectos globales, como la paranoia mas no sea lejana de estar siendo controlados por puntos desconocidos de \u201cel globo\u201d. Hechos inevitables en el mundo actual nos llevaron a adoptar rapidamente costumbres muy radicales a las tradicionales. Costumbres que a justa razon de razones se impusieron por sobre las previas.\n\nSin embargo, este hecho, como cualquier otro hecho, puede ser observado. Observado por quienes por ejemplo ya han vivido un suceso similar. Ellos son los que nos adelantan en el cambio.\n\nPara poder adelantarnos debemos trabajar profundamente y vivir para poder apreciar lo anteriormente dicho, y entonces y solo entonces decir no como masa y empezar a frenar con una pendiente negativa esta ola de corporacion sobre humano.\n\nPara poder hacer esto hay que enviar seniales difusas. Para hacer esto es primordial aportar nuestros granos de arena: usar mensajeria privada (telegram en vez de watsapp), utilizar navegadores que nos protegan (firefox en conjunto con el plugin ghostery, y comenzar a pensar en una plataforma social de codigo abierto en reemplazo del libro de caras), asi como tambien de no instalar aplicaciones de permisos obusivos y esperar la llegada de una mas adecuada o si es posible restringir los permisos a los legitimos.\n\n\n","html":"<p>Actualmente vivimos en un mundo muy inundado de informacion que viaja sin patrones aparentes hacia todas las direcciones en intensidades muy grandes sobre todo en relacion al pasado.<\/p>\n<p>La globalizacion tiene por definicion efectos globales, como la paranoia mas no sea lejana de estar siendo controlados por puntos desconocidos de &#8220;el globo&#8221;. Hechos inevitables en el mundo actual nos llevaron a adoptar rapidamente costumbres muy radicales a las tradicionales. Costumbres que a justa razon de razones se impusieron por sobre las previas.<\/p>\n<p>Sin embargo, este hecho, como cualquier otro hecho, puede ser observado. Observado por quienes por ejemplo ya han vivido un suceso similar. Ellos son los que nos adelantan en el cambio.<\/p>\n<p>Para poder adelantarnos debemos trabajar profundamente y vivir para poder apreciar lo anteriormente dicho, y entonces y solo entonces decir no como masa y empezar a frenar con una pendiente negativa esta ola de corporacion sobre humano.<\/p>\n<p>Para poder hacer esto hay que enviar seniales difusas. Para hacer esto es primordial aportar nuestros granos de arena: usar mensajeria privada (telegram en vez de watsapp), utilizar navegadores que nos protegan (firefox en conjunto con el plugin ghostery, y comenzar a pensar en una plataforma social de codigo abierto en reemplazo del libro de caras), asi como tambien de no instalar aplicaciones de permisos obusivos y esperar la llegada de una mas adecuada o si es posible restringir los permisos a los legitimos.<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 07 Jun 2015 05:03:59 +0000","created_by":1,"updated_at":"Sun, 07 Jun 2015 05:03:59 +0000","updated_by":1,"published_at":"","published_by":1},{"id":403,"title":"Create a javascript quality open source component in minutes","slug":"create-a-javascript-quality-open-source-component-in-minutes","markdown":"\n[Leer este articulo en espaniol](http:\/\/nicosommi.com\/?p=395)\n\n[Go to the component on npm](https:\/\/www.npmjs.com\/package\/generator-oss-component)\n\nSome months ago with the team from Free All Media we started to build a new javascript project, which **rapidly began to grow in code lines and in what we called components**, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that **sooner or later creating component will be necesary, but we didn\u2019t knew yet when** the business would support it by increasing the priority.\n\nAfter some time, **we had to create a new set of services, which shared some component functionality** with the previous one. **Then it happened: the real need** of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. **But the business wasn\u2019t very happy with spending money in creating so many components with all that creation overhead** and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, **each component would take many hours** to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to **create a component generator** with the target of optimizing the time and the related costs associated, specially on shared patterns.\n\nThis generator has **the responsibility of initialize a new open source component with a set of desirable features for them:**\n\n- **A good README** with **badges** and common sections\n- The **LICENSE file**\n- **Test coverage support** (generation and report integration with travis and coveralls)\n- **Continuous integration** (with **travis**)\n- **gulp tasks** for compile sources and testing them\n- **browser compatibility tests** using karma and a optional sauce labs integration\n- **ES6 and ES5** compatibility using babel\n- **linting files **a eslint file and the required dependencies\n- many more on the way: more integrations, more detailed questions and a smarter behavior\n\nLuckily us this component quickly **give us the expected result** and, **even knowing that this is a still very early version**, it\u2019s very useful and it has a great potential but **it saves us hours of working already**. We know that there are lots of tools out there to integrate a generic open source component to, but **we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community** like the normal process to cover such giant amount of options, if we everyone put\u2019s his own particular alternatives on it we will have lot\u2019s of options some day.\n\nOf course **this open source component generator is an open source component by itself** (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, **we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts** (currently some little manual changes are needed).\n\nIn conclusion, I think it worth enough the contribution to the community and this post is just an **invitation** to **contribute** to our project if you want to or just **use it** if you want to get a new component in just minutes.\n\n***How do you use it?***\n\nFirst highly recommended steps is to **read the README, but basically**\n\n1. *create the github repo*\n2. *link it with coveralls and travis (basic to get ci and test coverage)*\n3. *if you want to add another tool supported by the component and you want to use.*\n4. (if you don\u2019t have yeoman) npm install -g yo bower grunt-cli gulp\n5. *npm install -g generator-oss-component*\n6. initialize the repo with github and go to that folder and type*: yo oss-component*\n7. answer the questions using the credentials if needed for the integrations to be done\n8. execute travis setup npm if you want to auto publish to npm your component\n9. start coding\n\nRemember if you do not find the application to integrate with we invite you to **send us a pull request** by following the contribution guide on the README \ud83d\ude42\n\n\n","html":"<p><a href=\"http:\/\/nicosommi.com\/?p=395\">Leer este articulo en espaniol<\/a><\/p>\n<p><a href=\"https:\/\/www.npmjs.com\/package\/generator-oss-component\">Go to the component on npm<\/a><\/p>\n<p>Some months ago with the team from Free All Media we started to build a new javascript project, which <strong>rapidly began to grow in code lines and in what we called components<\/strong>, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that <strong>sooner or later creating component will be necesary, but we didn&#8217;t knew yet when<\/strong> the business would support it by increasing the priority.<\/p>\n<p>After some time, <strong>we had to create a new set of services, which shared some component functionality<\/strong> with the previous one. <strong>Then it happened: the real need<\/strong> of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. <strong>But the business wasn&#8217;t very happy with spending money in creating so many components with all that creation overhead<\/strong> and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, <strong>each component would take many hours<\/strong> to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to <strong>create a component generator<\/strong> with the target of optimizing the time and the related costs associated, specially on shared patterns.<\/p>\n<p>This generator has <strong>the responsibility of initialize a new open source component with a set of desirable features for them:<\/strong><\/p>\n<ul>\n<li><strong>A good README<\/strong> with <strong>badges<\/strong> and common sections<\/li>\n<li>The <strong>LICENSE file<\/strong><\/li>\n<li><strong>Test coverage support<\/strong> (generation and report integration with travis and coveralls)<\/li>\n<li><strong>Continuous integration<\/strong> (with <strong>travis<\/strong>)<\/li>\n<li><strong>gulp tasks<\/strong> for compile sources and testing them<\/li>\n<li><strong>browser compatibility tests<\/strong> using karma and a optional sauce labs integration<\/li>\n<li><strong>ES6 and ES5<\/strong> compatibility using babel<\/li>\n<li><strong>linting files <\/strong>a eslint file and the required dependencies<\/li>\n<li>many more on the way: more integrations, more detailed questions and a smarter behavior<\/li>\n<\/ul>\n<p>Luckily us this component quickly <strong>give us the expected result<\/strong> and, <strong>even knowing that this is a still very early version<\/strong>, it&#8217;s very useful and it has a great potential but <strong>it saves us hours of working already<\/strong>. We know that there are lots of tools out there to integrate a generic open source component to, but <strong>we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community<\/strong> like the normal process to cover such giant amount of options, if we everyone put&#8217;s his own particular alternatives on it we will have lot&#8217;s of options some day.<\/p>\n<p>Of course <strong>this open source component generator is an open source component by itself<\/strong> (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, <strong>we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts<\/strong> (currently some little manual changes are needed).<\/p>\n<p>In conclusion, I think it worth enough the contribution to the community and this post is just an <strong>invitation<\/strong> to <strong>contribute<\/strong> to our project if you want to or just <strong>use it<\/strong> if you want to get a new component in just minutes.<\/p>\n<p><em><strong>How do you use it?<\/strong><\/em><\/p>\n<p>First highly recommended steps is to <strong>read the README, but basically<\/strong><\/p>\n<ol>\n<li><em>create the github repo<\/em><\/li>\n<li><em>link it with coveralls and travis (basic to get ci and test coverage)<\/em><\/li>\n<li><em>if you want to add another tool supported by the component and you want to use.<\/em><\/li>\n<li>(if you don&#8217;t have yeoman) npm install -g yo bower grunt-cli gulp<\/li>\n<li><em>npm install -g generator-oss-component<\/em><\/li>\n<li>initialize the repo with github and go to that folder and type<em>: yo oss-component<\/em><\/li>\n<li>answer the questions using the credentials if needed for the integrations to be done<\/li>\n<li>execute travis setup npm if you want to auto publish to npm your component<\/li>\n<li>start coding<\/li>\n<\/ol>\n<p>Remember if you do not find the application to integrate with we invite you to <strong>send us a pull request<\/strong> by following the contribution guide on the README \ud83d\ude42<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 17 Jul 2015 01:34:06 +0000","created_by":1,"updated_at":"Fri, 17 Jul 2015 01:34:06 +0000","updated_by":1,"published_at":"Fri, 17 Jul 2015 01:34:06 +0000","published_by":1},{"id":395,"title":"Crear un componente javascript y open source de calidad en minutos","slug":"crear-un-componente-javascript-y-open-source-de-calidad-en-minutos","markdown":"\n[Read this article in english](http:\/\/nicosommi.com\/?p=403)\n\n[Ir al componente en npm](https:\/\/www.npmjs.com\/package\/generator-oss-component)\n\nHace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que **ibamos a componentizar la aplicacion** en algun momento, **pero todavia no sabiamos cuando** esto iba a ser apoyado por las prioridades del negocio.\n\nLuego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la **necesidad de compartir componentes con al menos un proyecto**.\n\nEn ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes \u201cmagicos\u201d. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. **Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes** en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).\n\nHablando en numeros, **cada componente manualmente tardaria en inicializarse varias horas**, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y **decidimos hacer un generador de componentes** en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.\n\nEste generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:\n\n- Un **readme acorde**, con las secciones y badges deseables\n- **test coverage**\n- **integracion continua**\n- **calidad de codigo**\n- **chequeo de dependencias**\n- **tareas de compilado**\n- **testeo de compatibilidad con browsers**\n- compatibilidad con **standards ECMA 6 y 5**\n- **archivos de linting**\n- muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas\n\nPor suerte este componente **dio rapidamente el resultado esperado** y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que **en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos**. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.\n\nDesde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se \u201cpiso\u201d consigo mismo). De hecho, **para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo** (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).\n\nEn definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.\n\nComo se utiliza?\n\n**Lo mas recomendado es**[leer el README](https:\/\/github.com\/FreeAllMedia\/generator-oss-component\/) pero basicamente:\n\n1. creas tu repositorio en github\n2. lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)\n3. si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.\n4. (si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp\n5. *npm install -g generator-oss-component*\n6. *inicialiar repo en github, ir a la carpeta y tipear: yo oss-component*\n7. contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones\n8. comenza a codear\n9. despues, ejecuta travis setup npm asi tu componente se autopublica\n\nSi no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.\n\n\n","html":"<p><a href=\"http:\/\/nicosommi.com\/?p=403\">Read this article in english<\/a><\/p>\n<p><a href=\"https:\/\/www.npmjs.com\/package\/generator-oss-component\">Ir al componente en npm<\/a><\/p>\n<p>Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que <strong>ibamos a componentizar la aplicacion<\/strong> en algun momento, <strong>pero todavia no sabiamos cuando<\/strong> esto iba a ser apoyado por las prioridades del negocio.<\/p>\n<p>Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la <strong>necesidad de compartir componentes con al menos un proyecto<\/strong>.<\/p>\n<p>En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &#8220;magicos&#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. <strong>Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes<\/strong> en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).<\/p>\n<p>Hablando en numeros, <strong>cada componente manualmente tardaria en inicializarse varias horas<\/strong>, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y <strong>decidimos hacer un generador de componentes<\/strong> en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.<\/p>\n<p>Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:<\/p>\n<ul>\n<li>Un <strong>readme acorde<\/strong>, con las secciones y badges deseables<\/li>\n<li><strong>test coverage<\/strong><\/li>\n<li><strong>integracion continua<\/strong><\/li>\n<li><strong>calidad de codigo<\/strong><\/li>\n<li><strong>chequeo de dependencias<\/strong><\/li>\n<li><strong>tareas de compilado<\/strong><\/li>\n<li><strong>testeo de compatibilidad con browsers<\/strong><\/li>\n<li>compatibilidad con <strong>standards ECMA 6 y 5<\/strong><\/li>\n<li><strong>archivos de linting<\/strong><\/li>\n<li>muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas<\/li>\n<\/ul>\n<p>Por suerte este componente <strong>dio rapidamente el resultado esperado<\/strong> y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que <strong>en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos<\/strong>. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.<\/p>\n<p>Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &#8220;piso&#8221; consigo mismo). De hecho, <strong>para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo<\/strong> (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).<\/p>\n<p>En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.<\/p>\n<p>Como se utiliza?<\/p>\n<p><strong>Lo mas recomendado es<\/strong> <a href=\"https:\/\/github.com\/FreeAllMedia\/generator-oss-component\/\" target=\"_blank\">leer el README<\/a> pero basicamente:<\/p>\n<ol>\n<li>creas tu repositorio en github<\/li>\n<li>lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)<\/li>\n<li>si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.<\/li>\n<li>(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp<\/li>\n<li><em>npm install -g generator-oss-component<\/em><\/li>\n<li><em>inicialiar repo en github, ir a la carpeta y tipear: yo oss-component<\/em><\/li>\n<li>contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones<\/li>\n<li>comenza a codear<\/li>\n<li>despues, ejecuta travis setup npm asi tu componente se autopublica<\/li>\n<\/ol>\n<p>Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 17 Jul 2015 01:34:25 +0000","created_by":1,"updated_at":"Fri, 17 Jul 2015 01:34:25 +0000","updated_by":1,"published_at":"Fri, 17 Jul 2015 01:34:25 +0000","published_by":1},{"id":432,"title":"Partial class approach for ES5\/ES6","slug":"partial-class-approach-for-es6","markdown":"\n[Source code](https:\/\/github.com\/nicosommi\/partialClass)\n\nWhen you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.\n\nOne of those rules is the **class complexity**.\n\nSo you have a giant class. You may **need or want to split it up into different files**. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I\u2019m trying to show here is an approach to get **something like the partial class declaration from OOP languages like C#**. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use \u201cthis\u201d on every method), etc. And at the same time you should produce self documented code.\n\nSo I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\u00a0It is not something trivial actually but not so hard neither. It consist on some **easy to follow steps** (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):\n\n- Instead of creating a file for your class, create a folder for it.\n- Create an index.js inside of it that contains the actual class\n- Create some file with the function\/functions that you want to have in different files\n- Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods\u2026 I will work on it soon to check that it happens and then update the article\/source code with a better solution.\n- If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).\n\nThat\u2019s basically all! **See **[this repo](http:\/\/github.com\/nicosommi\/partialClass) to take a look at a working source code.\n\n**Now you have a class in several files, small and self documented files with functions with reduced complexity.**\n\n\n","html":"<p><a href=\"https:\/\/github.com\/nicosommi\/partialClass\" target=\"_blank\">Source code<\/a><\/p>\n<p>When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.<\/p>\n<p>One of those rules is the <strong>class complexity<\/strong>.<\/p>\n<p>So you have a giant class. You may <strong>need or want to split it up into different files<\/strong>. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&#8217;m trying to show here is an approach to get <strong>something like the partial class declaration from OOP languages like C#<\/strong>. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &#8220;this&#8221; on every method), etc. And at the same time you should produce self documented code.<\/p>\n<p>So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype).\u00a0It is not something trivial actually but not so hard neither. It consist on some <strong>easy to follow steps<\/strong> (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):<\/p>\n<ul>\n<li>Instead of creating a file for your class, create a folder for it.<\/li>\n<li>Create an index.js inside of it that contains the actual class<\/li>\n<li>Create some file with the function\/functions that you want to have in different files<\/li>\n<li>Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&#8230; I will work on it soon to check that it happens and then update the article\/source code with a better solution.<\/li>\n<li>If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).<\/li>\n<\/ul>\n<p>That&#8217;s basically all! <strong>See <\/strong><a href=\"http:\/\/github.com\/nicosommi\/partialClass\">this repo<\/a> to take a look at a working source code.<\/p>\n<p><strong>Now you have a class in several files, small and self documented files with functions with reduced complexity.<\/strong><\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 10 Aug 2015 02:50:50 +0000","created_by":1,"updated_at":"Mon, 10 Aug 2015 02:50:50 +0000","updated_by":1,"published_at":"Mon, 10 Aug 2015 02:50:50 +0000","published_by":1},{"id":447,"title":"Aliases on nodejs and their impact (ES5)","slug":"temp-slug-26","markdown":"\nYou start a new node js project using ES5. Everything is great. You install debug, browserify, express, and like a hundred cool packages. You\u2019re feeling like your app will rock. Some time after that, some guy that maintain the cool package #37 change the whole api. The guys from package #67 got fired because they startup failed. The girl from package #45 went on vacations and when she got back she decided to be a lawyer (poor girl) so she just abandon their js packages.\n\nSo you learn the lession and you started to wrap components into yours. But anyway, you will have to do some work that you don\u2019t need right the second. It\u2019s not adding value to your user. Is tech debt. But it can break your app.\n\nOn the other hand some components you know that today they meet your expectations but tomorrow probably they won\u2019t,\u00a0 because you will need your own component, because you don\u2019t have time to do it now maybe.\n\nAnd\u2026 usually, when you create a wrapper component for your need, at first you create a component that just calls the original one without any modification, because there is nothing to add, you just need not to be tied to a person or group that you don\u2019t know and therefore you can\u2019t rely your business on, right? So I think that a good simple option will be to install dependencies with an alias. The ES6 \u201cas\u201d solution, which is not entirely great since the string after the alias is still tied to the package name.\n\nI\u2019m thinking in a \u201caliases\u201d: {\u201cmyDateService\u201d: \u201cmoment\u201d} element on the package.json. But that\u2019s not supported by npm. So with pseudonim you can add that to the package.json and it will work.\n\nThen, when you require the method, call pseudonim instead of require like this\n\n```\n<code class=\"javascript\">var pseudonim = require(\"pseudonim\");\nvar dateService = pseudonim(\"myDateService\");\n```\n\nor for ES6\n\n```\n<code class=\"javascript\">import {pseudonim} from \"pseudonim\";\nimport dateService from pseudonim(\"dateService\"); \/\/it just returns the string\n```\n\nEasy right?\n\nNote: remember to npm i \u2013save pseudonim of course and require it from somewhere of your source code.\n\nYEAP THAT\u2019S ALL FOLKS.\n\nNow you know that if the girl turns out t be a lawyer, you can just fork her package and use your own in like 5 minutes because there is no refactor implied. Also, if you know that you will need your customization on the future and a new component of yours, you can start with this without spending any time now.\n\nIf npm has this built on it will be much better. But that is not the case right now.\n\n\n","html":"<p>You start a new node js project using ES5. Everything is great. You install debug, browserify, express, and like a hundred cool packages. You&#8217;re feeling like your app will rock. Some time after that, some guy that maintain the cool package #37 change the whole api. The guys from package #67 got fired because they startup failed. The girl from package #45 went on vacations and when she got back she decided to be a lawyer (poor girl) so she just abandon their js packages.<\/p>\n<p>So you learn the lession and you started to wrap components into yours. But anyway, you will have to do some work that you don&#8217;t need right the second. It&#8217;s not adding value to your user. Is tech debt. But it can break your app.<\/p>\n<p>On the other hand some components you know that today they meet your expectations but tomorrow probably they won&#8217;t,\u00a0 because you will need your own component, because you don&#8217;t have time to do it now maybe.<\/p>\n<p>And&#8230; usually, when you create a wrapper component for your need, at first you create a component that just calls the original one without any modification, because there is nothing to add, you just need not to be tied to a person or group that you don&#8217;t know and therefore you can&#8217;t rely your business on, right? So I think that a good simple option will be to install dependencies with an alias. The ES6 &#8220;as&#8221; solution, which is not entirely great since the string after the alias is still tied to the package name.<\/p>\n<p>I&#8217;m thinking in a &#8220;aliases&#8221;: {&#8220;myDateService&#8221;: &#8220;moment&#8221;} element on the package.json. But that&#8217;s not supported by npm. So with pseudonim you can add that to the package.json and it will work.<\/p>\n<p>Then, when you require the method, call pseudonim instead of require like this<\/p>\n<pre><code class=\"javascript\">var pseudonim = require(\"pseudonim\");\nvar dateService = pseudonim(\"myDateService\");\n<\/code><\/pre>\n<p>or for ES6<\/p>\n<pre><code class=\"javascript\">import {pseudonim} from \"pseudonim\";\nimport dateService from pseudonim(\"dateService\"); \/\/it just returns the string\n<\/code><\/pre>\n<p>Easy right?<\/p>\n<p>Note: remember to npm i &#8211;save pseudonim of course and require it from somewhere of your source code.<\/p>\n<p>YEAP THAT&#8217;S ALL FOLKS.<\/p>\n<p>Now you know that if the girl turns out t be a lawyer, you can just fork her package and use your own in like 5 minutes because there is no refactor implied. Also, if you know that you will need your customization on the future and a new component of yours, you can start with this without spending any time now.<\/p>\n<p>If npm has this built on it will be much better. But that is not the case right now.<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 20 Aug 2015 02:54:49 +0000","created_by":1,"updated_at":"Thu, 20 Aug 2015 02:54:49 +0000","updated_by":1,"published_at":"","published_by":1},{"id":464,"title":"Donate","slug":"donate","markdown":"\n<small>`[donateextra]`<\/small>\n\n\n","html":"<p><small><code>[donateextra]<\/code><\/small><\/p>\n","image":null,"featured":0,"page":1,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 16 Oct 2015 20:13:29 +0000","created_by":1,"updated_at":"Fri, 16 Oct 2015 20:13:29 +0000","updated_by":1,"published_at":"","published_by":1},{"id":456,"title":"How, adopting cucumber js and other agile practices, can help you improve your development process","slug":"how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process","markdown":"\n\n## How\u2019s that?\n\nWell, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber **features** I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.\n\nWe started using agile practices with our team at the very beginning of our project. Very soon we started using **cucumber **(first time for me), because our team used it before in Ruby and they were happy with it. And** there is a JS version** for it. Oh yes it is, and it works pretty well. Read more [here](https:\/\/cucumber.io\/docs\/reference\/javascript).\n\n\n## But\u2026 why cucumber?\n\nWell, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical\/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their [homepage](https:\/\/cucumber.io\/).  \n It was a great decision for us.\n\n\n## Other tools and practices?\n\nYes. [TDD](http:\/\/martinfowler.com\/bliki\/TestDrivenDevelopment.html)\/BDD, [test coverage](https:\/\/github.com\/gotwarlost\/istanbul) and [source code quality](https:\/\/www.bithound.io\/) controls. All those practices\/tools were helpful. It\u2019s not just cucumber.\n\n\n## Introduction\n\nWell this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what **I **really** want****to share **is** this particular experience,** in which cucumber, in combination with those other practices and tools actually made our scrum, better.\n\nWe already made a lot of improvements to our agile framework.  \n Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).  \n Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).\n\nBut recently we discovered a new issue on our development process: **shared features. And that\u2019s what I want to talk about.  \n**\n\n\n## Ok, but technically speaking, how it happened?\n\nWell we experienced it with the authentication\/authorization **feature***-gherkin speaking-* (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).  \n So the User Stories usually says something like \u201cAs a user\/admin\/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it\u2019s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.\n\nAt first, we were doing special cucumber **scenarios** on each cucumber **feature** to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):\n\n```\nGiven a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n```\n\nAs you can see **in this example feature**, there is **one different scenario per authorization****scenario on each business****feature**.\n\nIt turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD\/BDD approach.  \n On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication\/authorization function.\n\nLater, we split up our service into many services, so to different repositories\u2026 and I was actually writing the source code of a specific integration chore to provide authorization\/authentication to the first particular brand new service, and again because TDD\/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let\u2019s say the item creation feature that I shown previously.\n\nWell. That was the signal. I realized **that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code**. If you use istanbul or some other test coverage tool like I do, you will probably understand what I\u2019m talking about. The same branches are being tested twice or N-times being N the feature quantity **in which you actually remember to test that**.\n\nSo when the \u201cchore\u201d was completed it was obvious that, if we had a particular special feature for it, let\u2019s say an access token\/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case\u2026 using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).\n\nSo our new business feature like item creation became something like this\n\n```\nGiven a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n```\n\nAnd we created another feature for the authorization and authentication like this one\n\n```\nGiven a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n```\n\n\n## Conclusion\n\nIn short terms,\u00a0 you need a user story for this kind of shared feature.\n\nNow you may think \u201cEy well, don\u2019t try to change the business (user stories) from the source code, it\u2019s just better to test what the business says, don\u2019t touch the user stories and if you have to write more source code, well just write it and shut up\u201d. And that\u2019s ok. But I don\u2019t want to change the business. I just think **that there is a better model to approach it**. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).\n\nAlso we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.\n\nThis is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.\n\n\n","html":"<h2>How\u2019s that?<\/h2>\n<p>Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber <strong>features<\/strong> I said to him \u201cSo cucumber made our scrum better, how about that?\u201d so he told me to write about that and I think that is actually an interesting experience to share.<\/p>\n<p>We started using agile practices with our team at the very beginning of our project. Very soon we started using <strong>cucumber <\/strong>(first time for me), because our team used it before in Ruby and they were happy with it. And<strong> there is a JS version<\/strong> for it. Oh yes it is, and it works pretty well. Read more <a href=\"https:\/\/cucumber.io\/docs\/reference\/javascript\" target=\"_blank\">here<\/a>.<\/p>\n<h2>But\u2026 why cucumber?<\/h2>\n<p>Well, first off it\u2019s convenient for executives so you can easily start using it, because they can actually understand what\u2019s going on without a deep technical\/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that\u2019s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their <a href=\"https:\/\/cucumber.io\/\" target=\"_blank\">homepage<\/a>.<br \/>\nIt was a great decision for us.<\/p>\n<h2>Other tools and practices?<\/h2>\n<p>Yes. <a href=\"http:\/\/martinfowler.com\/bliki\/TestDrivenDevelopment.html\" target=\"_blank\">TDD<\/a>\/BDD, <a href=\"https:\/\/github.com\/gotwarlost\/istanbul\" target=\"_blank\">test coverage<\/a> and <a href=\"https:\/\/www.bithound.io\/\" target=\"_blank\">source code quality<\/a> controls. All those practices\/tools were helpful. It\u2019s not just cucumber.<\/p>\n<h2>Introduction<\/h2>\n<p>Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what <strong>I <\/strong>really<strong> want<\/strong> <strong>to share <\/strong>is<strong> this particular experience,<\/strong> in which cucumber, in combination with those other practices and tools actually made our scrum, better.<\/p>\n<p>We already made a lot of improvements to our agile framework.<br \/>\nLike for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time\u2026 otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it\u2019s wrong, because they are now confused wasting lots of time with context switch tasks).<br \/>\nAlso we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user\u2026 which defeats the whole purpose of scrum, dummy mistake).<\/p>\n<p>But recently we discovered a new issue on our development process: <strong>shared features. And that\u2019s what I want to talk about.<br \/>\n<\/strong><\/p>\n<h2>Ok, but technically speaking, how it happened?<\/h2>\n<p>Well we experienced it with the authentication\/authorization <strong>feature<\/strong> <em>-gherkin speaking-<\/em> (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the \u201cwalking skeleton\u201d from that point of view).<br \/>\nSo the User Stories usually says something like \u201cAs a user\/admin\/whatever I want to do something\u201d, all right? But anyway the common thing is to create one story for that. But it&#8217;s actually mixed: authentication, authorization, and the particular \u201csomething\u201d for that story.<\/p>\n<p>At first, we were doing special cucumber <strong>scenarios<\/strong> on each cucumber <strong>feature<\/strong> to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it\u2019s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):<\/p>\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven an invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n\nGiven an expired access token\nWhen a new item creation request is received\nThen throw an expired token error\n<\/code><\/pre>\n<p>As you can see <strong>in this example feature<\/strong>, there is <strong>one different scenario per authorization<\/strong> <strong>scenario on each business<\/strong> <strong>feature<\/strong>.<\/p>\n<p>It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD\/BDD approach.<br \/>\nOn the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication\/authorization function.<\/p>\n<p>Later, we split up our service into many services, so to different repositories&#8230; and I was actually writing the source code of a specific integration chore to provide authorization\/authentication to the first particular brand new service, and again because TDD\/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&#8217;s say the item creation feature that I shown previously.<\/p>\n<p>Well. That was the signal. I realized <strong>that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code<\/strong>. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity <strong>in which you actually remember to test that<\/strong>.<\/p>\n<p>So when the &#8220;chore&#8221; was completed it was obvious that, if we had a particular special feature for it, let&#8217;s say an access token\/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).<\/p>\n<p>So our new business feature like item creation became something like this<\/p>\n<pre><code>Given a valid access token\nWhen a new item creation request is received\nThen create a new item on the list\n\nGiven a invalid access token\nWhen a new item creation request is received\nThen throw an unauthorized error\n<\/code><\/pre>\n<p>And we created another feature for the authorization and authentication like this one<\/p>\n<pre><code>Given a valid access token\nWhen a generic message is received\nThen respond ok\n\nGiven a invalid access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a expired access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven a absent access token\nWhen a generic message is received\nThen throw an unauthorized error\n\nGiven an incomplete access token\nWhen a generic message is received\nThen throw an unauthorized error with a custom message\n<\/code><\/pre>\n<h2>Conclusion<\/h2>\n<p>In short terms,\u00a0 you need a user story for this kind of shared feature.<\/p>\n<p>Now you may think &#8220;Ey well, don&#8217;t try to change the business (user stories) from the source code, it&#8217;s just better to test what the business says, don&#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&#8221;. And that&#8217;s ok. But I don&#8217;t want to change the business. I just think <strong>that there is a better model to approach it<\/strong>. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).<\/p>\n<p>Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.<\/p>\n<p>This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 21 Oct 2015 14:47:35 +0000","created_by":1,"updated_at":"Wed, 21 Oct 2015 14:47:35 +0000","updated_by":1,"published_at":"Wed, 21 Oct 2015 14:47:35 +0000","published_by":1},{"id":500,"title":"El karamelero, el empresario, y el otro","slug":"temp-slug-29","markdown":"\nEl negocio de los dulces es un negocio muy competitivo, como todos. Si quieres de ello hacer mucho dinero y establecerte como una marca duradera, aun mas.\n\nManuel abrio una tienda de caramelos cuando tenia 24 anios en el barrio de Flores.\n\nEl tenia la conviccion de que todo negocio, si estaba bien manejado, podia ser rentable, y el se creia lo suficientemente habilidoso para llevarlo a cabo.\n\nComenzo eligiendo el local. El lugar. Luego de un estudio de la zona, y de la distribucion de la venta de dulces, penso que un local que se encontraba a una prudente distancia de otros competidores y a la vez cerca de un colegio podria ser una buena idea.\n\nLe costo bastante conseguir alquilar el local. Luego tenia que decidir el disenio del interior. Los colores primarios, los sponsors corporativos y otros detalles, pusieron todo en su debido lugar luego de dos semanas. El ya tenia algunas cosas previamente pactadas. Asi como tambien tenia a Cristina, una bella chica de cabello negro de 19 anios, a quien ese trabajo le venia justo para mantener sus estudios de disenio de interiores en la FADU. Ademas a Cristina le encantaban los chicos y era muy paciente con la gente mayor. Era muy amable. \u201cSeguro tiene algo raro\u201d pensaba Manuel, pero como no habia podido descifrarlo aun, decidio contratarla. De hecho no lo dudo, y considero su \u201cintuicion\u201d un prejuicio bastante tonto. Sobre todo porque penso que todos seriamos raros en algun punto ante la vision externa. Tantas cosas distintas vivimos a cada momento, similares, pero sentidas de otras maneras, enfocados en otras cosas, con ponderaciones distintas, con nombres distintos. Definitivamente no podia desestimar una empleada tan adecuada por el simple hecho de sospechar que \u201calgo raro deberia tener\u201d.\n\nRapidamente se dio cuenta de que la rentabilidad era muy baja. El primer mes gano relativamente bien, pero a duras penas le alcanzo para cubrir los gastos del local y los suyos. Asi nunca iba a recuperar la inversion. Entonces pasaba sus noches pensando maneras de mejorar su negocio, sus ingresos, y a su vez lograr que estos sean permanentes\n\nAl otro dia Manuel puso un cartel en la puerta que decia \u201cSi entras te regalamos un caramelo\u201d. Las ventas aumentaron, aunque no mucho. Tenia una canasta de caramelos cerca del mostrador y la gente se iba mas contenta. Quizas fidelizaba, pero no atraia mucho.\n\nLuego de unos meses Manuel puso otro cartel. \u201cTe regalamos un chocolatin a vos y uno a un chico carenciado por cada 50 pesos que gastes aqui\u201d. Las ventas aumentaron ahora si, bastante. La gente se sentia bien y se ligaba un chocolatin. Manuel, antes de ejecutar esta estrategia, aumento aproximadamente un 5% los precios de todos los productos, entonces en realidad con esto logro mejorar bastante los ingresos.\n\nManuel estaba muy satisfecho con sus ultimas decisiones. Pero el siempre fue muy ambicioso y sabia que podia mas. Mucho mas.\n\nDecidio abrir un nuevo local. Para ello tuvo que contratar dos nuevos empleados. Como Cristina era excelente, decidio apuntar a un estereotipo similar. Esta vez gano Liliana, estudiante tambien, de una carrera de administracion de empresas. Tambien tuvo que contratar alguien para tratar con tareas generales ya que el debia enfocarse en la administracion y segun sus calculos los nuevos ingresos ya permitirian un empleado de ese estilo. El nuevo local lo abrio en villa del parque.  \n Todo marchaba excelente. Sin embargo un dia, llego gente del gobierno a uno de sus locales, y\n\n\n","html":"<p>El negocio de los dulces es un negocio muy competitivo, como todos. Si quieres de ello hacer mucho dinero y establecerte como una marca duradera, aun mas.<\/p>\n<p>Manuel abrio una tienda de caramelos cuando tenia 24 anios en el barrio de Flores.<\/p>\n<p>El tenia la conviccion de que todo negocio, si estaba bien manejado, podia ser rentable, y el se creia lo suficientemente habilidoso para llevarlo a cabo.<\/p>\n<p>Comenzo eligiendo el local. El lugar. Luego de un estudio de la zona, y de la distribucion de la venta de dulces, penso que un local que se encontraba a una prudente distancia de otros competidores y a la vez cerca de un colegio podria ser una buena idea.<\/p>\n<p>Le costo bastante conseguir alquilar el local. Luego tenia que decidir el disenio del interior. Los colores primarios, los sponsors corporativos y otros detalles, pusieron todo en su debido lugar luego de dos semanas. El ya tenia algunas cosas previamente pactadas. Asi como tambien tenia a Cristina, una bella chica de cabello negro de 19 anios, a quien ese trabajo le venia justo para mantener sus estudios de disenio de interiores en la FADU. Ademas a Cristina le encantaban los chicos y era muy paciente con la gente mayor. Era muy amable. &#8220;Seguro tiene algo raro&#8221; pensaba Manuel, pero como no habia podido descifrarlo aun, decidio contratarla. De hecho no lo dudo, y considero su &#8220;intuicion&#8221; un prejuicio bastante tonto. Sobre todo porque penso que todos seriamos raros en algun punto ante la vision externa. Tantas cosas distintas vivimos a cada momento, similares, pero sentidas de otras maneras, enfocados en otras cosas, con ponderaciones distintas, con nombres distintos. Definitivamente no podia desestimar una empleada tan adecuada por el simple hecho de sospechar que &#8220;algo raro deberia tener&#8221;.<\/p>\n<p>Rapidamente se dio cuenta de que la rentabilidad era muy baja. El primer mes gano relativamente bien, pero a duras penas le alcanzo para cubrir los gastos del local y los suyos. Asi nunca iba a recuperar la inversion. Entonces pasaba sus noches pensando maneras de mejorar su negocio, sus ingresos, y a su vez lograr que estos sean permanentes<\/p>\n<p>Al otro dia Manuel puso un cartel en la puerta que decia &#8220;Si entras te regalamos un caramelo&#8221;. Las ventas aumentaron, aunque no mucho. Tenia una canasta de caramelos cerca del mostrador y la gente se iba mas contenta. Quizas fidelizaba, pero no atraia mucho.<\/p>\n<p>Luego de unos meses Manuel puso otro cartel. &#8220;Te regalamos un chocolatin a vos y uno a un chico carenciado por cada 50 pesos que gastes aqui&#8221;. Las ventas aumentaron ahora si, bastante. La gente se sentia bien y se ligaba un chocolatin. Manuel, antes de ejecutar esta estrategia, aumento aproximadamente un 5% los precios de todos los productos, entonces en realidad con esto logro mejorar bastante los ingresos.<\/p>\n<p>Manuel estaba muy satisfecho con sus ultimas decisiones. Pero el siempre fue muy ambicioso y sabia que podia mas. Mucho mas.<\/p>\n<p>Decidio abrir un nuevo local. Para ello tuvo que contratar dos nuevos empleados. Como Cristina era excelente, decidio apuntar a un estereotipo similar. Esta vez gano Liliana, estudiante tambien, de una carrera de administracion de empresas. Tambien tuvo que contratar alguien para tratar con tareas generales ya que el debia enfocarse en la administracion y segun sus calculos los nuevos ingresos ya permitirian un empleado de ese estilo. El nuevo local lo abrio en villa del parque.<br \/>\nTodo marchaba excelente. Sin embargo un dia, llego gente del gobierno a uno de sus locales, y<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 25 Dec 2015 22:05:25 +0000","created_by":1,"updated_at":"Fri, 25 Dec 2015 22:05:25 +0000","updated_by":1,"published_at":"","published_by":1},{"id":242,"title":"strategy draft","slug":"temp-slug-30","markdown":"\nPara que un strategy en un lenguaje funcional donde existe una funcion como apply?\n\nHace un tiempo estoy desarrollando un API Rest en Node.js para Zootrock.com, donde se nos presentaron varios desafios. **Uno de ellos comenzo observando un switch que se quer\u00eda remover, unos if molestos**. Algunos doblemente molestos porque preguntaban sobre negaciones. Como sacamos el switch? Y ah\u00ed es donde viene la principal ocurrencia: **el patr\u00f3n strategy**. Nada nuevo\u2026 pero eso no hace que deje de ser importante, ya que esto nos conduciria nada menos que a una solucion que nos d\u00e9 flexibilidad, escalabilidad arquitect\u00f3nica, escalabilidad en la complejidad. Siempre y cuando se aplique en el nivel necesario. Con la interfaz adecuada.\n\nTambien, en la practica, aparecen cuestiones de negocio con igual o mas importancia. Tiempos que apretan, funcionalidades que cubrir.\n\nPero volviendo al tema inicial, a ojos expertos, la necesidad de remover switchs ya ol\u00eda a strategy. Luego la necesidad de negocio le di\u00f3 un respaldo monetario al asunto y le subi\u00f3 la priorizaci\u00f3n. Vamos. El negocio hoy es lo infinito. Infinitas tecnolog\u00edas generan infinitas combinaciones e infinitos negocios. No podemos hacer hoy en d\u00eda una aplicaci\u00f3n que no interact\u00fae con otras. Del mismo modo que los seres humanos necesitamos interactuar, las aplicaciones tambi\u00e9n lo necesitan, ya que en ella subyace el mismo objetivo que en dicha comunicacion humana basica.\n\nAdentr\u00e1ndonos ya en la t\u00e9cnica, esto com\u00fanmente en un lenguaje orientado a objetos tiene una forma muy ordenadita. Similar a [esta](http:\/\/commons.wikimedia.org\/wiki\/File:Strategy_Pattern.jpg \"strategy pattern\"). En javascript nada es igual. Todo es diversi\u00f3n. Pero todo es callback-hell al mismo tiempo (salvo que seas un tipo \u201cpromise\/a+\u201d y vivas en un cielo a coste de un peque\u00f1o impuesto). Como dec\u00eda, en javascript todo es diversi\u00f3n. Las interfaces no existen m\u00e1s que a gusto y piacere del consumidor, para ser educados. Esta conclusi\u00f3n no la saqu\u00e9 blasfemando como pareciera sino escribiendo c\u00f3digo y luego simplific\u00e1ndolo hasta al final darme cuenta de que al principio hab\u00eda sido un idiota.\n\nEn primera instancia de hecho intent\u00e9 utilizar un patr\u00f3n m\u00e1s o menos estructurado. Como imitando a su aplicacion en lenguajes de otras caracteristicas. Y de esto resultaron muchas clases, muchas funciones. Codigo para manejar carpetas, archivos\u2026 olia mal, muy mal\u2026\n\nLuego me d\u00ed cuenta que JS no era lo mismo. Eso era demasiado formal. Mucho codigo. Pense, entonces, algo como esto:  \n```\n<br><\/br>\n\/\/outsite.js<br><\/br>\nvar strategy = require('.\/strategies');<br><\/br>\nstrategy.using(entity.type).strategicMethod(); \/\/this is how I want to code!```\n\n\/\/strategies\/concrete-strategy.js  \n var func = function() {};  \n func.strategicMethod = function() {  \n \/\/default implementation  \n };  \n module.exports = func;\n\n\/\/strategies\/index.js  \n var index = {  \n using: function(name) {  \n return require(\u2018.\/\u2019+name);  \n }  \n };  \n module.exports = index;\n\nDespues me di cuenta que no ten\u00eda que reinventar la rueda asi que atine a buscar frameworks de IOC. Encontre que haciendo lo mismo con por ejemplo [wire ](https:\/\/github.com\/cujojs\/wire)resultaba algo asi:\n\n(describir patron tecnicamente)\n\nEsta t\u00e9cnica reutiliza el manejo de cach\u00e9 y la ausencia de extensiones del require provisto por node. Si queremos ademas podemos agregar una clase que sea la que utiliza las estrategias y colocar en ese objeto el conocimiento del directorio y los archivos de estrategias. Este objeto lo identificamos como el el \u201cgeneralizador\u201d del comportamiento de las estrategias. Es quien sabe la ubicaci\u00f3n de las estrategias. Es cohesivo a su responsabilidad.\n\nConclusi\u00f3n\n\nReutilizaci\u00f3n y eficiencia con los objetivos de negocio balanceados, esta estrategia nos va a proveer un c\u00f3digo bien distribuido, bien ordenado, muy claro de entender a ojos extra\u00f1os, y adem\u00e1s al momento de programar nos va a brindar una ventaja de poder complejizar en una rama independiente sin anidar l\u00f3gica extranjera, reduciendo el efecto de lado por definici\u00f3n. Tambien nos permitira enchufar y desenchufar componentes sin mas esfuerzo que mover el archivo.\n\nQuizas haya una implementaci\u00f3n m\u00e1s simple y eficiente, pero m\u00e1s all\u00e1 de que la haya, es una forma muy clara y concisa para implementar un strategy en node.js.\n\nTan querido en otros lados, ha encontrado un nuevo nicho en NodeJS debido a la simplicidad de su aplicaci\u00f3n y su incre\u00edble flexibilidad gracias a javascript.\n\nCabe senialar que mas alla de la implementacion tecnica, la implementacion de negocio (referido a lo economico del mismo) es lo que nos dira a traves del tiempo que metodos hemos puesto correctamente y cuales no. Pero eso solo se puede experimentar en cada aplicacion.\n\n\n","html":"<p>Para que un strategy en un lenguaje funcional donde existe una funcion como apply?<\/p>\n<p>Hace un tiempo estoy desarrollando un API Rest en Node.js para Zootrock.com, donde se nos presentaron varios desafios. <strong>Uno de ellos comenzo observando un switch que se quer\u00eda remover, unos if molestos<\/strong>. Algunos doblemente molestos porque preguntaban sobre negaciones. Como sacamos el switch? Y ah\u00ed es donde viene la principal ocurrencia: <strong>el patr\u00f3n strategy<\/strong>. Nada nuevo&#8230; pero eso no hace que deje de ser importante, ya que esto nos conduciria nada menos que a una solucion que nos d\u00e9 flexibilidad, escalabilidad arquitect\u00f3nica, escalabilidad en la complejidad. Siempre y cuando se aplique en el nivel necesario. Con la interfaz adecuada.<\/p>\n<p>Tambien, en la practica, aparecen cuestiones de negocio con igual o mas importancia. Tiempos que apretan, funcionalidades que cubrir.<\/p>\n<p>Pero volviendo al tema inicial, a ojos expertos, la necesidad de remover switchs ya ol\u00eda a strategy. Luego la necesidad de negocio le di\u00f3 un respaldo monetario al asunto y le subi\u00f3 la priorizaci\u00f3n. Vamos. El negocio hoy es lo infinito. Infinitas tecnolog\u00edas generan infinitas combinaciones e infinitos negocios. No podemos hacer hoy en d\u00eda una aplicaci\u00f3n que no interact\u00fae con otras. Del mismo modo que los seres humanos necesitamos interactuar, las aplicaciones tambi\u00e9n lo necesitan, ya que en ella subyace el mismo objetivo que en dicha comunicacion humana basica.<\/p>\n<p>Adentr\u00e1ndonos ya en la t\u00e9cnica, esto com\u00fanmente en un lenguaje orientado a objetos tiene una forma muy ordenadita. Similar a <a title=\"strategy pattern\" href=\"http:\/\/commons.wikimedia.org\/wiki\/File:Strategy_Pattern.jpg\" target=\"_blank\">esta<\/a>. En javascript nada es igual. Todo es diversi\u00f3n. Pero todo es callback-hell al mismo tiempo (salvo que seas un tipo &#8220;promise\/a+&#8221; y vivas en un cielo a coste de un peque\u00f1o impuesto). Como dec\u00eda, en javascript todo es diversi\u00f3n. Las interfaces no existen m\u00e1s que a gusto y piacere del consumidor, para ser educados. Esta conclusi\u00f3n no la saqu\u00e9 blasfemando como pareciera sino escribiendo c\u00f3digo y luego simplific\u00e1ndolo hasta al final darme cuenta de que al principio hab\u00eda sido un idiota.<\/p>\n<p>En primera instancia de hecho intent\u00e9 utilizar un patr\u00f3n m\u00e1s o menos estructurado. Como imitando a su aplicacion en lenguajes de otras caracteristicas. Y de esto resultaron muchas clases, muchas funciones. Codigo para manejar carpetas, archivos&#8230; olia mal, muy mal&#8230;<\/p>\n<p>Luego me d\u00ed cuenta que JS no era lo mismo. Eso era demasiado formal. Mucho codigo. Pense, entonces, algo como esto:<br \/>\n<code><br \/>\n\/\/outsite.js<br \/>\nvar strategy = require('.\/strategies');<br \/>\nstrategy.using(entity.type).strategicMethod(); \/\/this is how I want to code!<\/code><\/p>\n<p>\/\/strategies\/concrete-strategy.js<br \/>\nvar func = function() {};<br \/>\nfunc.strategicMethod = function() {<br \/>\n\/\/default implementation<br \/>\n};<br \/>\nmodule.exports = func;<\/p>\n<p>\/\/strategies\/index.js<br \/>\nvar index = {<br \/>\nusing: function(name) {<br \/>\nreturn require(&#8216;.\/&#8217;+name);<br \/>\n}<br \/>\n};<br \/>\nmodule.exports = index;<\/p>\n<p>Despues me di cuenta que no ten\u00eda que reinventar la rueda asi que atine a buscar frameworks de IOC. Encontre que haciendo lo mismo con por ejemplo <a href=\"https:\/\/github.com\/cujojs\/wire\">wire <\/a>resultaba algo asi:<\/p>\n<p>(describir patron tecnicamente)<\/p>\n<p>Esta t\u00e9cnica reutiliza el manejo de cach\u00e9 y la ausencia de extensiones del require provisto por node. Si queremos ademas podemos agregar una clase que sea la que utiliza las estrategias y colocar en ese objeto el conocimiento del directorio y los archivos de estrategias. Este objeto lo identificamos como el el &#8220;generalizador&#8221; del comportamiento de las estrategias. Es quien sabe la ubicaci\u00f3n de las estrategias. Es cohesivo a su responsabilidad.<\/p>\n<p>Conclusi\u00f3n<\/p>\n<p>Reutilizaci\u00f3n y eficiencia con los objetivos de negocio balanceados, esta estrategia nos va a proveer un c\u00f3digo bien distribuido, bien ordenado, muy claro de entender a ojos extra\u00f1os, y adem\u00e1s al momento de programar nos va a brindar una ventaja de poder complejizar en una rama independiente sin anidar l\u00f3gica extranjera, reduciendo el efecto de lado por definici\u00f3n. Tambien nos permitira enchufar y desenchufar componentes sin mas esfuerzo que mover el archivo.<\/p>\n<p>Quizas haya una implementaci\u00f3n m\u00e1s simple y eficiente, pero m\u00e1s all\u00e1 de que la haya, es una forma muy clara y concisa para implementar un strategy en node.js.<\/p>\n<p>Tan querido en otros lados, ha encontrado un nuevo nicho en NodeJS debido a la simplicidad de su aplicaci\u00f3n y su incre\u00edble flexibilidad gracias a javascript.<\/p>\n<p>Cabe senialar que mas alla de la implementacion tecnica, la implementacion de negocio (referido a lo economico del mismo) es lo que nos dira a traves del tiempo que metodos hemos puesto correctamente y cuales no. Pero eso solo se puede experimentar en cada aplicacion.<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 09 Feb 2016 14:56:35 +0000","created_by":1,"updated_at":"Tue, 09 Feb 2016 14:56:35 +0000","updated_by":1,"published_at":"","published_by":1},{"id":511,"title":"Spaceplugin - an open source DBRMS adapter","slug":"temp-slug-31","markdown":"\nThese days we launched the alfa stage here on integraciones agiles with this new product: the spaceplugin.\n\n**What is it?**\n\nThe space plugin is a tiny node js application, which allows you to capture events on your relational database and trigger a message to an external application.\n\n**Why?**\n\nIt doesn\u2019t require development efforts, and it\u2019s open source.\n\n**How does it work?**\n\nIt creates objects (triggers, tables, etc.) on your database to capture the events, and runs some queries to retrieve the new events that may occur.\n\n**Why are you doing this?**\n\nWe are about to launch a platform for you to easy integrate the services \/ micro-services within your application.\n\n*Ready to try it out?* Hey wait! We are just starting the development, but you can apply for the alpha or the beta stages, just send us an email to **info@integracionesagiles.com**\n\nhttp:\/\/github.com\/integracionesagiles\/spaceplugin\n\n\u00a0\n\n\n","html":"<p>These days we launched the alfa stage here on integraciones agiles with this new product: the spaceplugin.<\/p>\n<p><strong>What is it?<\/strong><\/p>\n<p>The space plugin is a tiny node js application, which allows you to capture events on your relational database and trigger a message to an external application.<\/p>\n<p><strong>Why?<\/strong><\/p>\n<p>It doesn&#8217;t require development efforts, and it&#8217;s open source.<\/p>\n<p><strong>How does it work?<\/strong><\/p>\n<p>It creates objects (triggers, tables, etc.) on your database to capture the events, and runs some queries to retrieve the new events that may occur.<\/p>\n<p><strong>Why are you doing this?<\/strong><\/p>\n<p>We are about to launch a platform for you to easy integrate the services \/ micro-services within your application.<\/p>\n<p><em>Ready to try it out?<\/em> Hey wait! We are just starting the development, but you can apply for the alpha or the beta stages, just send us an email to <strong>info@integracionesagiles.com<\/strong><\/p>\n<p>http:\/\/github.com\/integracionesagiles\/spaceplugin<\/p>\n<p>&nbsp;<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 09 Feb 2016 15:11:18 +0000","created_by":1,"updated_at":"Tue, 09 Feb 2016 15:11:18 +0000","updated_by":1,"published_at":"","published_by":1},{"id":503,"title":"Conan, an easy-to-learn framework to deploy your services on your platform service provider like AWS Lambda\/Api Gateway","slug":"temp-slug-32","markdown":"\nHow much time do you spend by creating an auto scalable, robust, auto deployed, secure and reliable service? and how much time will you spend if you have to do 100 of those? And I don\u2019t mean by the actual functional development of the service but the quality attributes for their architecture that I just mentioned. You will need to decide if you\u2019re using a web server like express and nginx, or some service like Heroku or Amazon AWS. Among other options. It may also depend on the technology you want to use.\n\nWell with Node.js and using Conan, you can do that in just a couple of minutes.\n\n**What is Conan?** It\u2019s a component that we created with the team at FAM, which allows you to **define your api and deploy it** to providers like **AWS** (**api gateway and lambda**), and potentially **others in the near future**. The good news for you is that you will be using the programming language you know and in a very intuitive way instead of learning how to use the AWS console, reducing the learning curve to the minimum and it gives you more time to care about your business instead\u2026 and it\u2019s not vendor locking. Besides of this, is open source under MIT. There is a link to the repo at the end of this article.\n\n**What does Conan do for you?**\n\n- It **creates the necessary objects** (Lambda \/ Api Gateway \/ IAM and counting) that you need and configures them entirely for you, avoiding the need of using their complex console and avoiding also going through their learning curve, which is not a tiny thing let me tell you. Resources, roles, integration request and response, function code uploading, stages, deployment, everything you need.\n- It **compiles** your **native packages** within the AWS infrastructure.\n- Easily define resources and their handler, in a similar way that you did with web servers **like express js**.\n- Easily define **CORS** resources.\n- Easily define **response status codes for error handling**.\n- **Easily define the handler** for the container (it can be either a **function or a class** in whatever directory you want!)\n- Manage multiple **versions\/aliases really easy** (if you want to support let\u2019s say a staging and a production environment)\n- Intuitive way of using **header, query string and path parameters** in your resources and having them available inside your handler\n- A **flexible well documented plugin-based architecture** that let\u2019s us, or you, or the community, to add support for new providers, services, etc.\n\nAs you can see Conan has a lot to offer and this is just the beginning.\n\n**Stay tuned, soon I will show you how to do something great with Conan so you can see how easy it is**\n\nIf you can\u2019t wait, go ahead and take a look at the source code, and try it  \n https:\/\/github.com\/FreeAllMedia\/conan\n\n\n","html":"<p>How much time do you spend by creating an auto scalable, robust, auto deployed, secure and reliable service? and how much time will you spend if you have to do 100 of those? And I don&#8217;t mean by the actual functional development of the service but the quality attributes for their architecture that I just mentioned. You will need to decide if you&#8217;re using a web server like express and nginx, or some service like Heroku or Amazon AWS. Among other options. It may also depend on the technology you want to use.<\/p>\n<p>Well with Node.js and using Conan, you can do that in just a couple of minutes.<\/p>\n<p><strong>What is Conan?<\/strong> It&#8217;s a component that we created with the team at FAM, which allows you to <strong>define your api and deploy it<\/strong> to providers like <strong>AWS<\/strong> (<strong>api gateway and lambda<\/strong>), and potentially <strong>others in the near future<\/strong>. The good news for you is that you will be using the programming language you know and in a very intuitive way instead of learning how to use the AWS console, reducing the learning curve to the minimum and it gives you more time to care about your business instead&#8230; and it&#8217;s not vendor locking. Besides of this, is open source under MIT. There is a link to the repo at the end of this article.<\/p>\n<p><strong>What does Conan do for you?<\/strong><\/p>\n<ul>\n<li>It <strong>creates the necessary objects<\/strong> (Lambda \/ Api Gateway \/ IAM and counting) that you need and configures them entirely for you, avoiding the need of using their complex console and avoiding also going through their learning curve, which is not a tiny thing let me tell you. Resources, roles, integration request and response, function code uploading, stages, deployment, everything you need.<\/li>\n<li>It <strong>compiles<\/strong> your <strong>native packages<\/strong> within the AWS infrastructure.<\/li>\n<li>Easily define resources and their handler, in a similar way that you did with web servers <strong>like express js<\/strong>.<\/li>\n<li>Easily define <strong>CORS<\/strong> resources.<\/li>\n<li>Easily define <strong>response status codes for error handling<\/strong>.<\/li>\n<li><strong>Easily define the handler<\/strong> for the container (it can be either a <strong>function or a class<\/strong> in whatever directory you want!)<\/li>\n<li>Manage multiple <strong>versions\/aliases really easy<\/strong> (if you want to support let&#8217;s say a staging and a production environment)<\/li>\n<li>Intuitive way of using <strong>header, query string and path parameters<\/strong> in your resources and having them available inside your handler<\/li>\n<li>A <strong>flexible well documented plugin-based architecture<\/strong> that let&#8217;s us, or you, or the community, to add support for new providers, services, etc.<\/li>\n<\/ul>\n<p>As you can see Conan has a lot to offer and this is just the beginning.<\/p>\n<p><strong>Stay tuned, soon I will show you how to do something great with Conan so you can see how easy it is<\/strong><\/p>\n<p>If you can&#8217;t wait, go ahead and take a look at the source code, and try it<br \/>\nhttps:\/\/github.com\/FreeAllMedia\/conan<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 25 Feb 2016 00:15:52 +0000","created_by":1,"updated_at":"Thu, 25 Feb 2016 00:15:52 +0000","updated_by":1,"published_at":"","published_by":1},{"id":543,"title":"Coverage defender","slug":"temp-slug-33","markdown":"\nSource code test coverage is nice. Is great. Is an amazing thing. But, as some people say, it hurts feelings. Much more than linting tools.\n\nSome people, mostly those who have not fully experienced tools like istanbul, say that it\u2019s an cool nice to have. They are affraid in most cases. This is called procastination. You don\u2019t want to be hurt. And it\u2019s all right. But at some point you should learn how to be a man\/woman.\n\nSubject 1: Branch coverage\n\nEvery system is a process that takes an input, do some processing, and produces an output. So, you should test every possible path that different input may produce. I want to make that clear because the branch coverage will force you to create \u201celse\u2019s\u201d that you didn\u2019t do because \u201cit is impossible\u201d or \u201cit is ensures by a previous layer\u201d or some crap like that. Well, again we are creating computer programs that are abstractions.\n\n\n","html":"<p>Source code test coverage is nice. Is great. Is an amazing thing. But, as some people say, it hurts feelings. Much more than linting tools.<\/p>\n<p>Some people, mostly those who have not fully experienced tools like istanbul, say that it&#8217;s an cool nice to have. They are affraid in most cases. This is called procastination. You don&#8217;t want to be hurt. And it&#8217;s all right. But at some point you should learn how to be a man\/woman.<\/p>\n<p>Subject 1: Branch coverage<\/p>\n<p>Every system is a process that takes an input, do some processing, and produces an output. So, you should test every possible path that different input may produce. I want to make that clear because the branch coverage will force you to create &#8220;else&#8217;s&#8221; that you didn&#8217;t do because &#8220;it is impossible&#8221; or &#8220;it is ensures by a previous layer&#8221; or some crap like that. Well, again we are creating computer programs that are abstractions.<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 11 Mar 2016 19:03:45 +0000","created_by":1,"updated_at":"Fri, 11 Mar 2016 19:03:45 +0000","updated_by":1,"published_at":"","published_by":1},{"id":518,"title":"A common pitfall when using \u201cglobal\u201d (not really) CLI\u2019s in your node.js project (like gulp)","slug":"a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp","markdown":"\n> ***\u201cLittle things can make a big difference.\u201d***\n\n\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I\u2019m going to talk about, but most people don\u2019t.\n\nWhy? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like\n\n```\n<code class=\"javascript\">gulp test\n```\n\n**Right?**\n\n*Well. I understand you if that\u2019s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that\u2019s a bad thing to do. I will say that you should stop doing that ASAP.* Not the gulpfile, that\u2019s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). *Let me explain you why.*\n\nFirstly, I want my node.js project to be cloned and executed right away. Period. *I do not want the container \/ user \/ developer \/ anybody to install something globally on their environments* besides of the natural requirements for that technology. Because *is just unrelated* to my node.js project environment. It\u2019s not a global dependency, it is a local dependency**. **The flow should be something more like: git clone, npm install, npm test. *And that\u2019s it.*\n\n*Let\u2019s imagine this situation for a minute.* I\u2019m making public modules relying on the global gulp. On the other hand, you\u2019re a developer and you\u2019re new to node.js\u2026 then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot\u2019s of docs to know what it is and how it works. *All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it\u2019s also unfair for those developers who don\u2019t know about our custom tool preference or they just don\u2019t want to learn it. So by doing this, you\u2019re not just creating a dependency for your projects in your environments but also for the users\/potential contributors of your module if it\u2019s a public module, or the developers in your team if it\u2019s not.*\n\n> **I would say that coupling gulp learning curve to my node.js modules is not intuitive and it\u2019s also unfair for those developers who don\u2019t know about our custom tool preference or they just don\u2019t want to learn it. So by doing this, you\u2019re not just creating a dependency for your projects in your environments but also for the users*\/potential contributors* of your module if it\u2019s a public module, or the developers in your team if it\u2019s not.**\n\nWait, this is not just some hedonistic crap. And it\u2019s not just me believing it\u2019s better. That thing can hurt your open source strategy and it can make you lose time with your team.\n\n*And there are even more real conflicts with this\u2026 specifically with module versions.* If you don\u2019t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you\u2019re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself \u201cis this CLI a real global dependency or is related to my projects individually?\u201d. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, ***making you lose time and money***.\n\nYou may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It\u2019s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.\n\n> ***Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself \u201cis this CLI a real global dependency or is related to my projects individually?\u201d Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, ***making you lose time and money***.  \n> ***\n\nEven if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel\/gulp letal combination. *I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.*\n\n> ***I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.***\n\n**Introduction to the \u201ctrivial\u201d solution**\n\n*Node.js comes with the npm binary built in*. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which *npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json*.\n\n> ***npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.***\n\nYou can see a reference here https:\/\/docs.npmjs.com\/cli\/run-script\n\n*So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.* And, luckily, that is transparent to us.\n\n> **So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks**\n\n**How to do this?**  \n Well basically, let\u2019s say you want to replace your *gulp test* command so you don\u2019t need a global gulp\u2026 well ok, then simply add this to your scripts section of your package.json\n\n```\n<code class=\"javascript\">...(content on your package.json)...\n\"scripts\": {\n\"test\": \"gulp test\"\n}\n...(more content on your package.json)...\n```\n\n**And that\u2019s it!** With that line now you just need a node js regular environment with nothing installed globally on it, like this\n\n```\n<code class=\"javascript\">npm test\n```\n\nTrivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don\u2019t know what happens behind the scenes and most people just use the global gulp*. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!**You just need to install gulp (or the CLI you want to make local) locally* in your project before you execute the script through **npm run**\u2026 remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.\n\n```\n<code class=\"javascript\">npm uninstall -g gulp\n```\n\n> ***This npm test command is not executing the global gulp. *The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally  \n> **\n\n**Sugar for complex cases  \n**\n\nAs I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that\u2019s your case, after you added it on your package.json, you need can run that custom npm script with this command\n\n```\n<code class=\"javacript\">npm run yourcustomscript\n```\n\nAnd here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like ***npm run gulp anytask***, check it out:\n\n```\n<code class=\"javascript\">...(content on your package.json)...\n\"scripts\": {\n\"test\": \"gulp test\",\n\"gulp\": \"gulp\"\n}\n...(more content on your package.json)...\n```\n\n**Other examples**\n\nAnd as I mentioned I\u2019m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but *every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015*, and there lots of examples. *Grunt also applies***,** you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.\n\n**Conclusion**\n\nSo in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don\u2019t couple the learning curve from the CLI to your module user\u2019s, and you don\u2019t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.\n\n\u00a0\n\nPlease any comment, suggestion, typo, send it to nicosommi@gmail.com\n\nThanks for reading.\n\n\n","html":"<blockquote><p><em><strong>&#8220;Little things can make a big difference.&#8221;<\/strong><\/em><\/p><\/blockquote>\n<p>\u201cLittle things can make a big difference.\u201d I\u2019m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&#8217;m going to talk about, but most people don\u2019t.<\/p>\n<p>Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like \u201ctest\u201d on it for example, and then run something like<\/p>\n<pre><code class=\"javascript\">gulp test\n<\/code><\/pre>\n<p><strong>Right?<\/strong><\/p>\n<p><em>Well. I understand you if that&#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&#8217;s a bad thing to do. I will say that you should stop doing that ASAP.<\/em> Not the gulpfile, that&#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). <em>Let me explain you why.<\/em><\/p>\n<p>Firstly, I want my node.js project to be cloned and executed right away. Period. <em>I do not want the container \/ user \/ developer \/ anybody to install something globally on their environments<\/em> besides of the natural requirements for that technology. Because <em>is just unrelated<\/em> to my node.js project environment. It&#8217;s not a global dependency, it is a local dependency<strong>. <\/strong>The flow should be something more like: git clone, npm install, npm test. <em>And that&#8217;s it.<\/em><\/p>\n<p><em>Let&#8217;s imagine this situation for a minute.<\/em> I&#8217;m making public modules relying on the global gulp. On the other hand, you&#8217;re a developer and you&#8217;re new to node.js&#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&#8217;s of docs to know what it is and how it works. <em>All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users\/potential contributors of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.<\/em><\/p>\n<blockquote><p><strong>I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&#8217;s also unfair for those developers who don&#8217;t know about our custom tool preference or they just don&#8217;t want to learn it. So by doing this, you&#8217;re not just creating a dependency for your projects in your environments but also for the users<em>\/potential contributors<\/em> of your module if it&#8217;s a public module, or the developers in your team if it&#8217;s not.<\/strong><\/p><\/blockquote>\n<p>Wait, this is not just some hedonistic crap. And it&#8217;s not just me believing it&#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.<\/p>\n<p><em>And there are even more real conflicts with this&#8230; specifically with module versions.<\/em> If you don&#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money<\/em><\/strong>.<\/p>\n<p>You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.<\/p>\n<blockquote><p><em><strong>Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &#8220;is this CLI a real global dependency or is related to my projects individually?&#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, <strong><em>making you lose time and money<\/em><\/strong>.<br \/>\n<\/strong><\/em><\/p><\/blockquote>\n<p>Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel\/gulp letal combination. <em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.<\/em><\/p>\n<blockquote><p><strong><em>I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.<\/em><\/strong><\/p><\/blockquote>\n<p><strong>Introduction to the &#8220;trivial&#8221; solution<\/strong><\/p>\n<p><em>Node.js comes with the npm binary built in<\/em>. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which <em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json<\/em>.<\/p>\n<blockquote><p><strong><em>npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.<\/em><\/strong><\/p><\/blockquote>\n<p>You can see a reference here https:\/\/docs.npmjs.com\/cli\/run-script<\/p>\n<p><em>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.<\/em> And, luckily, that is transparent to us.<\/p>\n<blockquote><p><strong>So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks<\/strong><\/p><\/blockquote>\n<p><strong>How to do this?<\/strong><br \/>\nWell basically, let&#8217;s say you want to replace your <em>gulp test<\/em> command so you don&#8217;t need a global gulp&#8230; well ok, then simply add this to your scripts section of your package.json<\/p>\n<pre><code class=\"javascript\">...(content on your package.json)...\n\"scripts\": {\n\"test\": \"gulp test\"\n}\n...(more content on your package.json)...\n<\/code><\/pre>\n<p><strong>And that&#8217;s it!<\/strong> With that line now you just need a node js regular environment with nothing installed globally on it, like this<\/p>\n<pre><code class=\"javascript\">npm test\n<\/code><\/pre>\n<p>Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&#8217;t know what happens behind the scenes and most people just use the global gulp<em>. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!<\/em> <em>You just need to install gulp (or the CLI you want to make local) locally<\/em> in your project before you execute the script through <strong>npm run<\/strong>&#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.<\/p>\n<pre><code class=\"javascript\">npm uninstall -g gulp\n<\/code><\/pre>\n<blockquote><p><strong><em>This npm test command is not executing the global gulp. <\/em>The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally<br \/>\n<\/strong><\/p><\/blockquote>\n<p><strong>Sugar for complex cases<br \/>\n<\/strong><\/p>\n<p>As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command<\/p>\n<pre><code class=\"javacript\">npm run yourcustomscript\n<\/code><\/pre>\n<p>And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like <strong><em>npm run gulp anytask<\/em><\/strong>, check it out:<\/p>\n<pre><code class=\"javascript\">...(content on your package.json)...\n\"scripts\": {\n\"test\": \"gulp test\",\n\"gulp\": \"gulp\"\n}\n...(more content on your package.json)...\n<\/code><\/pre>\n<p><strong>Other examples<\/strong><\/p>\n<p>And as I mentioned I&#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but <em>every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015<\/em>, and there lots of examples. <em>Grunt also applies<\/em><strong>,<\/strong> you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it\u2019s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.<\/p>\n<p><strong>Conclusion<\/strong><\/p>\n<p>So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&#8217;t couple the learning curve from the CLI to your module user&#8217;s, and you don&#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.<\/p>\n<p>&nbsp;<\/p>\n<p>Please any comment, suggestion, typo, send it to nicosommi@gmail.com<\/p>\n<p>Thanks for reading.<\/p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 30 Mar 2016 16:47:00 +0000","created_by":1,"updated_at":"Wed, 30 Mar 2016 16:47:00 +0000","updated_by":1,"published_at":"Wed, 30 Mar 2016 16:47:00 +0000","published_by":1},{"id":585,"title":"Como mantener un modulo backwards compatible","slug":"temp-slug-35","markdown":"\n- Introduccion y presentacion del caso: creacion y mantenimiento de modulos open source\n- Consideraciones del dia a dia del programador - mantener tests viejos\n- intentar no duplicar funcionalidad, pero si es necesario, si, aprovechar para optimizar en la nueva implementacion\n- mantener soporte de interfaces viejas: no cambiar cantidad ni tipo de argumento sin realizar el caso de salvataje\n- considerar migraciones posibles\n- agregar documentacion de actualizacion manual\n- mantener entry point actualizado y con todas las opciones\n- actualizar correctamente el numero de version si cambia la interfaz\n\n\n","html":"<ul>\n<li>Introduccion y presentacion del caso: creacion y mantenimiento de modulos open source<\/li>\n<li>Consideraciones del dia a dia del programador\n<ul>\n<li>mantener tests viejos<\/li>\n<li>intentar no duplicar funcionalidad, pero si es necesario, si, aprovechar para optimizar en la nueva implementacion<\/li>\n<li>mantener soporte de interfaces viejas: no cambiar cantidad ni tipo de argumento sin realizar el caso de salvataje<\/li>\n<li>considerar migraciones posibles<\/li>\n<li>agregar documentacion de actualizacion manual<\/li>\n<li>mantener entry point actualizado y con todas las opciones<\/li>\n<li>actualizar correctamente el numero de version si cambia la interfaz<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 03 Apr 2016 18:02:44 +0000","created_by":1,"updated_at":"Sun, 03 Apr 2016 18:02:44 +0000","updated_by":1,"published_at":"","published_by":1},{"id":2,"title":"Sample Page","slug":"sample-page","markdown":"\nThis is an example page. It\u2019s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n> Hi there! I\u2019m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi\u00f1a coladas. (And gettin\u2019 caught in the rain.)\n\n\u2026or something like this:\n\n> The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.\n\nAs a new WordPress user, you should go to [your dashboard](http:\/\/www.nicosommi.com\/wp-admin\/) to delete this page and create new pages for your content. Have fun!\n\n\n","html":"<p>This is an example page. It&#8217;s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:<\/p>\n<blockquote><p>Hi there! I&#8217;m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin&#8217; caught in the rain.)<\/p><\/blockquote>\n<p>&#8230;or something like this:<\/p>\n<blockquote><p>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.<\/p><\/blockquote>\n<p>As a new WordPress user, you should go to <a href=\"http:\/\/www.nicosommi.com\/wp-admin\/\">your dashboard<\/a> to delete this page and create new pages for your content. Have fun!<\/p>\n","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 16 Apr 2016 14:11:36 +0000","created_by":1,"updated_at":"Sat, 16 Apr 2016 14:11:36 +0000","updated_by":1,"published_at":"Sat, 16 Apr 2016 14:11:36 +0000","published_by":1},{"id":589,"title":"A simple set of promises","slug":"temp-slug-37","markdown":"\nA developer can gave more promises than politicians and also than these guys\n\nhttps:\/\/www.youtube.com\/watch?v=D9VrSxpSuVg\n\nWhy? Well because we create functions that create new promises each time it\u2019s called. But the computer is responsible. Not us. So don\u2019t feel guilty. I guess politicians think the same way\u2026 being the computer\u2026 OK forget about that. Nothing new if you\u2019re using already promises\u2026 so, to the point.\n\nI created a set of useful mapping promisified functions that can be easily chained so we can get really meaningful and semantic source code\u2026 and I just wanted to share them since I made them public following the SRP (Single Responisbility Pattern, meaning one module for each with just one reason to change).\n\nThese functions are\n\n- pull: it pulls a property from an object\n- accumulate: it sets a value into key in a target\n- log: it logs the object\n- match: search a value by string using regexes\n\nHere is a quick example on how can be used in a real use case with promises and async functions:\n\npromise chain:\n\n```\n<code class=\"javascript\">const errors = [\n {key: \/Unauthorized\/gi, value: 401}\n];\nreturn accumulate({}, \"id\", this.request.path.id)\n.then(input => accumulate(input, \"data\", pull(this.request, \"body.data\"))\n.then(log)\n.then(myOtherPromise)\n.catch(error => match(errors, error.message, 500);\n```\n\nes7 async functions\n\n```\n<code class=\"javascript\">const errors = [\n {key: \/Unauthorized\/gi, value: 401}\n];\nconst result = {};\nresult.id = this.request.path.id;\nresult.data = await pull(this.request, \"body.data\");\nawait log\ntry {\n  await myOtherPromise;\n} catch(e) {\n  response.status = await match(errors, e.message, 500);\n}\n```\n\n\n","html":"<p>A developer can gave more promises than politicians and also than these guys<\/p>\n<p>https:\/\/www.youtube.com\/watch?v=D9VrSxpSuVg<\/p>\n<p>Why? Well because we create functions that create new promises each time it&#8217;s called. But the computer is responsible. Not us. So don&#8217;t feel guilty. I guess politicians think the same way&#8230; being the computer&#8230; OK forget about that. Nothing new if you&#8217;re using already promises&#8230; so, to the point.<\/p>\n<p>I created a set of useful mapping promisified functions that can be easily chained so we can get really meaningful and semantic source code&#8230; and I just wanted to share them since I made them public following the SRP (Single Responisbility Pattern, meaning one module for each with just one reason to change).<\/p>\n<p>These functions are<\/p>\n<ul>\n<li>pull: it pulls a property from an object<\/li>\n<li>accumulate: it sets a value into key in a target<\/li>\n<li>log: it logs the object<\/li>\n<li>match: search a value by string using regexes<\/li>\n<\/ul>\n<p>Here is a quick example on how can be used in a real use case with promises and async functions:<\/p>\n<p>promise chain:<\/p>\n<pre><code class=\"javascript\">const errors = [\n {key: \/Unauthorized\/gi, value: 401}\n];\nreturn accumulate({}, \"id\", this.request.path.id)\n.then(input =&gt; accumulate(input, \"data\", pull(this.request, \"body.data\"))\n.then(log)\n.then(myOtherPromise)\n.catch(error =&gt; match(errors, error.message, 500);\n<\/code><\/pre>\n<p>es7 async functions<\/p>\n<pre><code class=\"javascript\">const errors = [\n {key: \/Unauthorized\/gi, value: 401}\n];\nconst result = {};\nresult.id = this.request.path.id;\nresult.data = await pull(this.request, \"body.data\");\nawait log\ntry {\n  await myOtherPromise;\n} catch(e) {\n  response.status = await match(errors, e.message, 500);\n}\n<\/code><\/pre>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 17 Apr 2016 01:52:21 +0000","created_by":1,"updated_at":"Sun, 17 Apr 2016 01:52:21 +0000","updated_by":1,"published_at":"","published_by":1},{"id":614,"title":"I can't await! A classic issue with passionated developers","slug":"temp-slug-38","markdown":"\nAnd I\u2019m one of those. For sure. I just spent hours trying to make async functions work. Then I realize one fringe use case in which they do not work because of some transpilation issue.\n\nIn that momento I felt stupid. Luckily me. I felt like that is a common mistake I see on technical and passionated people. It is a good signal, but a bad signal. I realized that I just made a common mistake. And I\u2019m writing this post because I believe that is a common mistake nowadays because of some tools that are cool: transpilers. They make you made this mistake. You can use tomorrow today. Well. Over design on that to provide more functionality and you get people working on things that does not work. It\u2019s frustrating. I was ready to ignore the processing overhead that the polyfill may take, but this is not working man!\n\nAdvise: stick with promises until new advise!\n\n\n","html":"<p>And I&#8217;m one of those. For sure. I just spent hours trying to make async functions work. Then I realize one fringe use case in which they do not work because of some transpilation issue.<\/p>\n<p>In that momento I felt stupid. Luckily me. I felt like that is a common mistake I see on technical and passionated people. It is a good signal, but a bad signal. I realized that I just made a common mistake. And I&#8217;m writing this post because I believe that is a common mistake nowadays because of some tools that are cool: transpilers. They make you made this mistake. You can use tomorrow today. Well. Over design on that to provide more functionality and you get people working on things that does not work. It&#8217;s frustrating. I was ready to ignore the processing overhead that the polyfill may take, but this is not working man!<\/p>\n<p>Advise: stick with promises until new advise!<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 18 Apr 2016 23:13:56 +0000","created_by":1,"updated_at":"Mon, 18 Apr 2016 23:13:56 +0000","updated_by":1,"published_at":"","published_by":1},{"id":616,"title":"Microservices: una breve introduccion","slug":"temp-slug-39","markdown":"\nLos Microservices o microservicios estan en todos lados. Practicamente todos escucharon de ellos. Algunos sabran mas, algunos menos. Algunos pocos tienen experiencia real implementandolos.\n\nEs un tema que a mi me compete desde hace tiempo y me parecio interesante para profundizar. Y en el camino voy a ir compartiendo mis experiencias pasadas.  \n Voy a comenzar, como es menester, desde el principio.\n\nQue es un microservice?  \n Es un patron de arquitectura. Un microservice, individualmente, es una pequena funcionalidad que tiene su propia base de datos (puede sonar conflictivo, pero esto es muy importante, luego se veran soluciones a todos los problemas que se presentan con este enfoque).  \n Una aplicacion desarrollada utilizando el patron de microservices es por ende, una suite de servicios de pequena funcionalidad.\n\nQue tan pequena es la funcionalidad que debe un microservicio abarcar?  \n Bueno para esto hay distintos\n\nFuentes:  \n http:\/\/martinfowler.com\/articles\/microservices.html  \n http:\/\/microservices.io\/\n\n\n","html":"<p>Los Microservices o microservicios estan en todos lados. Practicamente todos escucharon de ellos. Algunos sabran mas, algunos menos. Algunos pocos tienen experiencia real implementandolos.<\/p>\n<p>Es un tema que a mi me compete desde hace tiempo y me parecio interesante para profundizar. Y en el camino voy a ir compartiendo mis experiencias pasadas.<br \/>\nVoy a comenzar, como es menester, desde el principio.<\/p>\n<p>Que es un microservice?<br \/>\nEs un patron de arquitectura. Un microservice, individualmente, es una pequena funcionalidad que tiene su propia base de datos (puede sonar conflictivo, pero esto es muy importante, luego se veran soluciones a todos los problemas que se presentan con este enfoque).<br \/>\nUna aplicacion desarrollada utilizando el patron de microservices es por ende, una suite de servicios de pequena funcionalidad.<\/p>\n<p>Que tan pequena es la funcionalidad que debe un microservicio abarcar?<br \/>\nBueno para esto hay distintos<\/p>\n<p>Fuentes:<br \/>\nhttp:\/\/martinfowler.com\/articles\/microservices.html<br \/>\nhttp:\/\/microservices.io\/<\/p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 23 Apr 2016 20:08:26 +0000","created_by":1,"updated_at":"Sat, 23 Apr 2016 20:08:26 +0000","updated_by":1,"published_at":"","published_by":1}],"tags":[{"id":19,"name":"debug","slug":"debug","description":""},{"id":32,"name":"javascript","slug":"javascript","description":""},{"id":33,"name":"js","slug":"js","description":""},{"id":35,"name":"node.js","slug":"node-js","description":""},{"id":41,"name":"tibco business works designer json rest esb","slug":"tibco-business-works-designer-json-rest-esb","description":""}],"posts_tags":[{"tag_id":41,"post_id":174},{"tag_id":19,"post_id":250},{"tag_id":32,"post_id":250},{"tag_id":33,"post_id":250},{"tag_id":35,"post_id":250}],"users":[{"id":1,"slug":"gualivchenko","bio":false,"website":"http:\/\/nicosommi.com","created_at":"Sat, 16 Apr 2016 14:11:36 +0000","created_by":1,"email":"nicosommi@gmail.com","name":"gualivchenko"}]},"meta":{"exported_on":"Mon, 02 May 2016 10:34:23 +0000","version":"000"}}