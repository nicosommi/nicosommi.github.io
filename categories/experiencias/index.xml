<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiencias on nicosommi</title>
    <link>http://nicosommi.github.com/categories/experiencias/</link>
    <description>Recent content in Experiencias on nicosommi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-AR</language>
    <lastBuildDate>Wed, 07 Sep 2016 00:10:13 +0000</lastBuildDate>
    <atom:link href="http://nicosommi.github.com/categories/experiencias/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Contenedores unicamente de volumenes en docker (volume only containers)</title>
      <link>http://nicosommi.github.com/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/</link>
      <pubDate>Wed, 07 Sep 2016 00:10:13 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/</guid>
      <description>&lt;p&gt;En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.&lt;/p&gt;

&lt;p&gt;Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extraña que se da casi por casualidad.&lt;/p&gt;

&lt;p&gt;Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;docker run -it -v /etc:/etc coreos/apache /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?&lt;/p&gt;

&lt;p&gt;Bueno esto tampoco es dificil, por ejemplo algo asi&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;version: &#39;2&#39;
services:
  webserver:
    image: coreos/apache
    volumes:
      - /etc:/etc
  app2:
    build: .
    volumes:
      - /etc:/etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podriamos utilizar los &amp;#8216;named&amp;#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.&lt;/p&gt;

&lt;p&gt;Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria señalar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;version: &#39;2&#39;
services:
  data:
    image: tianon/true
    volumes:
      - /etc:/etc
  webserver:
    image: coreos/apache
    volumes_from:
      - data
  app2:
    build: .
    volumes_from:
      - data
  app3:
    image: postgres
    volumes_from:
      - data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bueno aqui ven el patron al que me refiero. Es extraño porque hay incluso imagenes en docker hub que son &amp;#8220;fake&amp;#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &amp;#8216;data&amp;#8217; que tomarlos de &amp;#8216;webserver&amp;#8217;) y bueno porque de docker te dicen que lo hagas asi.&lt;/p&gt;

&lt;p&gt;Creo que vale la pena señalarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &amp;#8220;deducir&amp;#8221; que esta es la &amp;#8220;mejor&amp;#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado &lt;a href=&#34;https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container&#34;&gt;aqui&lt;/a&gt; y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun &lt;a href=&#34;https://github.com/docker/docker/issues/17798&#34;&gt;este issue&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generation Driven Development – Introducción a la idea y a gddify</title>
      <link>http://nicosommi.github.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/</link>
      <pubDate>Thu, 26 May 2016 00:08:30 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify en github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/&#34;&gt;read this article in english&lt;/a&gt;&lt;figure id=&#34;attachment_639&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png&#34; alt=&#34;Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.&#34; width=&#34;300&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-639&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Mantenga los bloques de código en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota: GDD y gddify son un trabajo en curso.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la información a lenguajes de programación.&lt;/p&gt;

&lt;p&gt;Los puntos de vista, o modelos, se podría decir que son lo observado, mas una carga subjetiva del observador, una meta información. Para los mas técnicos: payload y meta.&lt;/p&gt;

&lt;p&gt;Durante los últimos años me vi muchas veces desarrollando generadores de código. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con algún script personalizado.&lt;/p&gt;

&lt;p&gt;También, durante los últimos años, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareció siempre muy interesante, y acertado a la vez. Es que no sólo simplifica el modo de escribir funciones, también elimina ambigüedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).&lt;/p&gt;

&lt;p&gt;A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animaría a criticarlos&amp;#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo físico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &amp;#8220;mezcla&amp;#8221;, en la realidad se produce por ejemplo, por reproducción a nivel celular que luego, crece.&lt;/p&gt;

&lt;p&gt;Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representación de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.&lt;/p&gt;

&lt;p&gt;Toda esta introducción, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patrón de responsabilidad simple), las constantes actualizaciones de librerías, las librerías abandonadas, las compatibilidades que se rompen, la lisa y llana repetición de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&amp;#8230; todo esto como decia, me ha llevado a pensar en que allí había algo por mejorar.&lt;/p&gt;

&lt;p&gt;Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atención a la meta información de dichos puntos de vista, que son la percepción de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.&lt;/p&gt;

&lt;p&gt;De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que añadir en el código fuente, información necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta información del código fuente: los comentarios.&lt;/p&gt;

&lt;h2 id=&#34;cual-es-la-informacion-necesaria&#34;&gt;Cual es la informacion necesaria?&lt;/h2&gt;

&lt;p&gt;Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;componente sw (swComponent)&lt;/em&gt;: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;bloques sw (swBlock)&lt;/em&gt;: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;archivo de codigo fuente (source code files)&lt;/em&gt;: este es la unidad base de sincronizacion/generacion. Es un archivo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure id=&#34;attachment_630&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png&#34; alt=&#34;place holders&#34; width=&#34;300&#34; height=&#34;255&#34; class=&#34;size-medium wp-image-630&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones&lt;/figcaption&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;contenedores (place holders)&lt;/em&gt;: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ejemplo de implementacion en gddify (js)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph constructor */
constructor () {
  this.name = &#39;nico&#39;
}
/* endph */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;reemplazos (replacements)&lt;/em&gt;: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).&lt;/p&gt;

&lt;p&gt;Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph replacements &lt;em&gt;/
/&lt;/em&gt; name, /myClass/g, myClass &lt;em&gt;/
/&lt;/em&gt; endph */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_629&#34; style=&#34;width: 280px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png&#34; alt=&#34;replacements&#34; width=&#34;280&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-629&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w&#34; sizes=&#34;(max-width: 280px) 85vw, 280px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;un ejemplo complejo de reemplazos&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;estampas (stamps)&lt;/em&gt;: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)&lt;/p&gt;

&lt;p&gt;Ejemplo en gddify (js)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* stamp toJson &lt;em&gt;/
toJSON () {
  return { name: this.name }
}
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_631&#34; style=&#34;width: 199px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png&#34; alt=&#34;stamps&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-631&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w&#34; sizes=&#34;(max-width: 199px) 85vw, 199px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;estampas ignoradas (ignoringStamps)&lt;/em&gt;: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.&lt;/p&gt;

&lt;p&gt;Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph ignoringStamps &lt;em&gt;/
/&lt;/em&gt; toJson, parse &lt;em&gt;/
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_632&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png&#34; alt=&#34;Ignoring stamps&#34; width=&#34;300&#34; height=&#34;244&#34; class=&#34;size-medium wp-image-632&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;La descripción de estos componentes de software de manera correcta, nos permitirá no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcción de generadores, y en un solo lenguaje sin templates. He allí el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido común.&lt;/p&gt;

&lt;p&gt;Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integración continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.&lt;/p&gt;

&lt;p&gt;Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.&lt;/p&gt;

&lt;p&gt;Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de código y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularización a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visión de &lt;a href=&#34;http://integracionesagiles.com&#34;&gt;Integraciones Agiles&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Esto es una simple introducción al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicación, códigos de ejemplo, y mucho mas.&lt;/p&gt;

&lt;h2 id=&#34;colaboración&#34;&gt;Colaboración&lt;/h2&gt;

&lt;p&gt;Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://integracionesagiles.com&#34;&gt;http://integracionesagiles.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify en github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crear un componente javascript y open source de calidad en minutos</title>
      <link>http://nicosommi.github.com/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/</link>
      <pubDate>Fri, 17 Jul 2015 01:34:25 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://nicosommi.com/?p=403&#34;&gt;Read this article in english&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/generator-oss-component&#34;&gt;Ir al componente en npm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que &lt;strong&gt;ibamos a componentizar la aplicacion&lt;/strong&gt; en algun momento, &lt;strong&gt;pero todavia no sabiamos cuando&lt;/strong&gt; esto iba a ser apoyado por las prioridades del negocio.&lt;/p&gt;

&lt;p&gt;Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la &lt;strong&gt;necesidad de compartir componentes con al menos un proyecto&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &amp;#8220;magicos&amp;#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. &lt;strong&gt;Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes&lt;/strong&gt; en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).&lt;/p&gt;

&lt;p&gt;Hablando en numeros, &lt;strong&gt;cada componente manualmente tardaria en inicializarse varias horas&lt;/strong&gt;, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y &lt;strong&gt;decidimos hacer un generador de componentes&lt;/strong&gt; en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.&lt;/p&gt;

&lt;p&gt;Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un &lt;strong&gt;readme acorde&lt;/strong&gt;, con las secciones y badges deseables&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test coverage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;integracion continua&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;calidad de codigo&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chequeo de dependencias&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tareas de compilado&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testeo de compatibilidad con browsers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;compatibilidad con &lt;strong&gt;standards ECMA 6 y 5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;archivos de linting&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por suerte este componente &lt;strong&gt;dio rapidamente el resultado esperado&lt;/strong&gt; y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que &lt;strong&gt;en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos&lt;/strong&gt;. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.&lt;/p&gt;

&lt;p&gt;Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &amp;#8220;piso&amp;#8221; consigo mismo). De hecho, &lt;strong&gt;para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo&lt;/strong&gt; (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).&lt;/p&gt;

&lt;p&gt;En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.&lt;/p&gt;

&lt;p&gt;Como se utiliza?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lo mas recomendado es&lt;/strong&gt; &lt;a href=&#34;https://github.com/FreeAllMedia/generator-oss-component/&#34; target=&#34;_blank&#34;&gt;leer el README&lt;/a&gt; pero basicamente:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;creas tu repositorio en github&lt;/li&gt;
&lt;li&gt;lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)&lt;/li&gt;
&lt;li&gt;si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.&lt;/li&gt;
&lt;li&gt;(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp&lt;/li&gt;
&lt;li&gt;&lt;em&gt;npm install -g generator-oss-component&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;inicialiar repo en github, ir a la carpeta y tipear: yo oss-component&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones&lt;/li&gt;
&lt;li&gt;comenza a codear&lt;/li&gt;
&lt;li&gt;despues, ejecuta travis setup npm asi tu componente se autopublica&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugueando node</title>
      <link>http://nicosommi.github.com/index.php/2014/04/20/debugging-node-seriously/</link>
      <pubDate>Sun, 20 Apr 2014 15:17:15 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2014/04/20/debugging-node-seriously/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://nicosommi.com/?p=284&#34; title=&#34;Debugging node&#34;&gt;&lt;em&gt;To see this article in english click here.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se está haciendo al altísimo precio de llegar a un lío muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo.&lt;/p&gt;

&lt;p&gt;Una de las cosas que más me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes más copados como debug, ain2, winston o algo así. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas.&lt;/p&gt;

&lt;p&gt;En mi experiencia había debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java así que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con &amp;#8211;debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho más dinámico y liviano en memoria. También puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ahí. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitué de ubuntu, git, y esas cosas. Perder el miedo a la consola es también clave para no complicarse la vida con la depuración en node.js.&lt;/p&gt;

&lt;p&gt;Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola.&lt;/p&gt;

&lt;p&gt;Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema rápidamente. Muchos podrán discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presión. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Demás está decir que algunas veces los errores son tan complicados que la reproducción del mismo nos lleva mucho tiempo y sincronización, y por ende estaría buenísimo si descubrimos el error en la menor cantidad de intentos posibles.&lt;/p&gt;

&lt;p&gt;Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicación con el argumento debug.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node debug script.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gráficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo &amp;#8216;cont&amp;#8217; o &amp;#8216;c&amp;#8217; el debugger avanzará hasta el próximo debugger;&lt;/p&gt;

&lt;p&gt;Hay una lista completa de comandos en la sección Commands reference en el siguiente link &lt;a href=&#34;http://nodejs.org/api/debugger.html&#34; title=&#34;http://nodejs.org/api/debugger.html&#34;&gt;http://nodejs.org/api/debugger.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Los más destacados son&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;step in: se hace escribiendo s&lt;/li&gt;
&lt;li&gt;step out: escribiendo o&lt;/li&gt;
&lt;li&gt;next step: n&lt;/li&gt;
&lt;li&gt;pause&lt;/li&gt;
&lt;li&gt;watch(&amp;#8216;variableName&amp;#8217;) : imprimira el valor en cada paso&lt;/li&gt;
&lt;li&gt;unwatch(&amp;#8216;variableName&amp;#8217;) : dejara de monitorear el valor&lt;/li&gt;
&lt;li&gt;list(4) : imprime el contexto en un radio de 4 lineas&lt;/li&gt;
&lt;li&gt;repl : importantísimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hay &amp;#8220;complicaciones&amp;#8221; extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicación&amp;#8230; pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opción nodeArgs.&lt;/p&gt;

&lt;p&gt;Por ejemplo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nodemon({script: &#39;./app.js&#39;, nodeArgs: [&#39;debug&#39;]})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Otro caso común. Test unit. Con debug? Sí. Por ejemplo si ejecutamos&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mocha debug test/ejemplo.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;entonces nos llevará a la consola de debug.&lt;/p&gt;

&lt;p&gt;Combinando mocha y grunt/gulp se puede hacer esto (también con nodemon):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nodemon({script: &#39;./node_modules/mocha/bin/_mocha&#39;, nodeArgs: [&#39;debug&#39;]});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;donde ponés la ruta a tu instalación global del ejecutable _mocha (con guión bajo) y listo, con eso tenés tus test con el debugger built in y tus tareas previas ejecutadas.&lt;/p&gt;

&lt;p&gt;Obteniendo un error ENOSPC?&lt;/p&gt;

&lt;p&gt;Eso es porque hay muchos archivos abiertos (o tenés un editor que suele abrir muchos archivos como Sublime o nodemon está incluyendo muchos archivos).&lt;/p&gt;

&lt;p&gt;Lo podés solucionar incrementando el valor de max_user_watches con este comando&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo sysctl fs.inotify.max_user_watches=20000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;El número correcto depende de tus necesidades. Podés ver que tenés actualmente ejecutando esto&lt;/p&gt;

&lt;p&gt;&lt;code&gt;more /proc/sys/fs/inotify/max_user_watches&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;También recordá executar nodemon con el argumento -i nodemodules&lt;/p&gt;

&lt;p&gt;En definitiva. Si todavía no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo.&lt;/p&gt;

&lt;p&gt;Tenés una idea para mejorar este artículo? Mandámela a nicosommi@gmail.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Explorando BW-TEST</title>
      <link>http://nicosommi.github.com/index.php/2013/12/05/explore-bw-test/</link>
      <pubDate>Thu, 05 Dec 2013 21:11:21 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2013/12/05/explore-bw-test/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://nicosommi.com/?p=287&#34; title=&#34;Explore BW-TEST&#34;&gt;&lt;em&gt;To see this article in english click here.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Es muy simple! Mirá el video!&lt;/p&gt;

&lt;p&gt;BW-TEST es otra librería open source. Esta es para automatizar tus test. Esta vez vas a poder tus test con TIBCO Designer. Te permite integrar Business Works a tu servidor de integracion contínua como Jenkins. También te permite practicar TDD! Entonces, repasando: ahorras dinero porque perdes menos tiempo testeando, ofreces un mejor servicio y de mayor calidad con el servidor de integracion continua.&lt;/p&gt;

&lt;p&gt;Caracteristicas&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xunit compatible (tested with jenkins)&lt;/li&gt;
&lt;li&gt;multiple assertion support by using Assertions.process once in your test&lt;/li&gt;
&lt;li&gt;test suites support&lt;/li&gt;
&lt;li&gt;xml and html reports&lt;/li&gt;
&lt;li&gt;startup once running&lt;/li&gt;
&lt;li&gt;support running on every request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podes encontrar el codigo fuente aca: &lt;a href=&#34;http://github.com/nicosommi/bw-test&#34; title=&#34;bw-test&#34;&gt;http://github.com/nicosommi/bw-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Licencia LGPL v3 ©2013 BW-TEST&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BW-REST</title>
      <link>http://nicosommi.github.com/index.php/2013/10/18/bw-rest/</link>
      <pubDate>Fri, 18 Oct 2013 01:54:52 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2013/10/18/bw-rest/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://nicosommi.com/?p=291&#34; title=&#34;BW-REST&#34;&gt;&lt;em&gt;To see this article in english click here.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTA:&lt;/strong&gt; TIBCO finalmente anunció soporte para web services REST desde ActiveMatrix 6.0.&lt;/p&gt;

&lt;p&gt;Cuando trabajamos con TIBCO BusinessWorks se vuelve cada vez mas frecuente la necesidad de proveer una API REST como el resto del mundo. BW-REST va mas alla y no solo te da esa posibilidad sino que tambien te permite construir una aplicacion web completa con HTML Templating, Cookies, Static resource routing, etc. Puede ser util en muchos casos de uso como crear una aplicacion web rapidamente y con los ultimos frameworks javascript. Porque no queres otra capa en tu aplicacion. Porque venis de GI. Porque no podes gastar mas dinero en otro desarrollador. Porque no queres introducir un nuevo punto de falla en la aplicacion. Porque simplemente necesitas una pequena aplicacion para mantener las entidades manipuladas en tu proyecto. Son tan solo algunos casos. Con BW-REST podes hacer aplicaciones como las del ejemplo: usando backbone, require.js, jquery-ui, coffeescript, etc.&lt;/p&gt;

&lt;p&gt;Es de codigo abierto! &lt;a title=&#34;repo&#34; href=&#34;http://github.com/nicosommi/bw-rest&#34; target=&#34;_blank&#34;&gt;You can found it here &lt;a href=&#34;http://github.com/nicosommi/bw-rest&#34;&gt;http://github.com/nicosommi/bw-rest&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mira el video!&lt;/p&gt;

&lt;p&gt;Caracteristicas v 0.1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JADE templating support&lt;/li&gt;
&lt;li&gt;Controller support&lt;/li&gt;
&lt;li&gt;Project-relative paths&lt;/li&gt;
&lt;li&gt;Support for regular expressions&lt;/li&gt;
&lt;li&gt;Support query string and url parameters&lt;/li&gt;
&lt;li&gt;Static resource support (recursivelly)&lt;/li&gt;
&lt;li&gt;Built in implementation customizable by defaultvars&lt;/li&gt;
&lt;li&gt;Cookie support&lt;/li&gt;
&lt;li&gt;Multiple server on the same project/archive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Licencia LGPL v3 ©2013 BW-REST&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>