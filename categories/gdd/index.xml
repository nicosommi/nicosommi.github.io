<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gdd on nicosommi</title>
    <link>http://nicosommi.github.com/categories/gdd/</link>
    <description>Recent content in Gdd on nicosommi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-AR</language>
    <lastBuildDate>Fri, 27 May 2016 13:38:42 +0000</lastBuildDate>
    <atom:link href="http://nicosommi.github.com/categories/gdd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Generation Driven Development – Introduction to the idea and to gddify</title>
      <link>http://nicosommi.github.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/</link>
      <pubDate>Fri, 27 May 2016 13:38:42 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify on github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/&#34;&gt;leer este articulo en español&lt;/a&gt;&lt;figure id=&#34;attachment_639&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png&#34; alt=&#34;Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.&#34; width=&#34;300&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-639&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: GDD and gddify are a work in progress.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.&lt;/p&gt;

&lt;p&gt;Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.&lt;/p&gt;

&lt;p&gt;Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.&lt;/p&gt;

&lt;p&gt;Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).&lt;/p&gt;

&lt;p&gt;As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &amp;#8220;mix&amp;#8221;, in the reality, is like a cell-level genesis that grows.&lt;/p&gt;

&lt;p&gt;Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&amp;#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.&lt;/p&gt;

&lt;p&gt;But let&amp;#8217;s take a look at some common problems right now:&lt;/p&gt;

&lt;p&gt;&amp;#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture&lt;/p&gt;

&lt;p&gt;&amp;#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.&lt;/p&gt;

&lt;p&gt;&amp;#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&amp;#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on&lt;/p&gt;

&lt;p&gt;&amp;#8211; unmaintained modules: it&amp;#8217;s a common case that some libraries are abandonware because of different reasons&lt;/p&gt;

&lt;p&gt;&amp;#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&amp;#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.&lt;/p&gt;

&lt;p&gt;&amp;#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components&lt;/p&gt;

&lt;p&gt;&amp;#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)&lt;/p&gt;

&lt;p&gt;&amp;#8211; template issues: IDE&amp;#8217;s are not prepared to parse two languages in the same file on most cases&lt;/p&gt;

&lt;p&gt;All these are reasons made me think that there is something better out there. There are things to improve.&lt;/p&gt;

&lt;p&gt;Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.&lt;/p&gt;

&lt;p&gt;From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.&lt;/p&gt;

&lt;h2 id=&#34;which-is-that-necessary-information&#34;&gt;Which is that necessary information?&lt;/h2&gt;

&lt;p&gt;This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.&lt;/p&gt;

&lt;p&gt;Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&amp;#8217;s take a look at those elements one by one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;sw component (swComponent)&lt;/em&gt;: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;sw block (swBlock)&lt;/em&gt;: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;source code files&lt;/em&gt;: this is the minimum unit for generation. a file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure id=&#34;attachment_630&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png&#34; alt=&#34;place holders&#34; width=&#34;300&#34; height=&#34;255&#34; class=&#34;size-medium wp-image-630&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Inside place holders, that content will be always the same for that particular file even after updates&lt;/figcaption&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;place holders&lt;/em&gt;: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example using gddify (js)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph constructor */
constructor () {
  this.name = &#39;nico&#39;
}
/* endph */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;replacements&lt;/em&gt;: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).&lt;/p&gt;

&lt;p&gt;Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph replacements &lt;em&gt;/
/&lt;/em&gt; name, /myClass/g, myClass &lt;em&gt;/
/&lt;/em&gt; endph */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_629&#34; style=&#34;width: 280px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png&#34; alt=&#34;replacements&#34; width=&#34;280&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-629&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w&#34; sizes=&#34;(max-width: 280px) 85vw, 280px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;a replacement example&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;stamps&lt;/em&gt;: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.&lt;/p&gt;

&lt;p&gt;Example using gddify (js)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* stamp toJson &lt;em&gt;/
toJSON () {
  return { name: this.name }
}
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_631&#34; style=&#34;width: 199px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png&#34; alt=&#34;stamps&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-631&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w&#34; sizes=&#34;(max-width: 199px) 85vw, 199px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Stamps are code blocks shared and immutable across components (that can be ignored)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;ignoring stamps&lt;/em&gt;: array of names of stamps that will be ignored on this file.&lt;/p&gt;

&lt;p&gt;Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph ignoringStamps &lt;em&gt;/
/&lt;/em&gt; toJson, parse &lt;em&gt;/
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_632&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png&#34; alt=&#34;Ignoring stamps&#34; width=&#34;300&#34; height=&#34;244&#34; class=&#34;size-medium wp-image-632&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Ignoring stamps are those code blocks that we do not want to show this particular file&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.&lt;/p&gt;

&lt;p&gt;I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of &lt;a href=&#34;http://integracionesagiles.com&#34;&gt;Integraciones Agiles&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.&lt;/p&gt;

&lt;h2 id=&#34;contribute&#34;&gt;Contribute&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://integracionesagiles.com&#34;&gt;http://integracionesagiles.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify en github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generation Driven Development – Introducción a la idea y a gddify</title>
      <link>http://nicosommi.github.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/</link>
      <pubDate>Thu, 26 May 2016 00:08:30 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify en github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/&#34;&gt;read this article in english&lt;/a&gt;&lt;figure id=&#34;attachment_639&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png&#34; alt=&#34;Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.&#34; width=&#34;300&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-639&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Mantenga los bloques de código en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota: GDD y gddify son un trabajo en curso.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la información a lenguajes de programación.&lt;/p&gt;

&lt;p&gt;Los puntos de vista, o modelos, se podría decir que son lo observado, mas una carga subjetiva del observador, una meta información. Para los mas técnicos: payload y meta.&lt;/p&gt;

&lt;p&gt;Durante los últimos años me vi muchas veces desarrollando generadores de código. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con algún script personalizado.&lt;/p&gt;

&lt;p&gt;También, durante los últimos años, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareció siempre muy interesante, y acertado a la vez. Es que no sólo simplifica el modo de escribir funciones, también elimina ambigüedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).&lt;/p&gt;

&lt;p&gt;A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animaría a criticarlos&amp;#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo físico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &amp;#8220;mezcla&amp;#8221;, en la realidad se produce por ejemplo, por reproducción a nivel celular que luego, crece.&lt;/p&gt;

&lt;p&gt;Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representación de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.&lt;/p&gt;

&lt;p&gt;Toda esta introducción, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patrón de responsabilidad simple), las constantes actualizaciones de librerías, las librerías abandonadas, las compatibilidades que se rompen, la lisa y llana repetición de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&amp;#8230; todo esto como decia, me ha llevado a pensar en que allí había algo por mejorar.&lt;/p&gt;

&lt;p&gt;Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atención a la meta información de dichos puntos de vista, que son la percepción de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.&lt;/p&gt;

&lt;p&gt;De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que añadir en el código fuente, información necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta información del código fuente: los comentarios.&lt;/p&gt;

&lt;h2 id=&#34;cual-es-la-informacion-necesaria&#34;&gt;Cual es la informacion necesaria?&lt;/h2&gt;

&lt;p&gt;Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;componente sw (swComponent)&lt;/em&gt;: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;bloques sw (swBlock)&lt;/em&gt;: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;archivo de codigo fuente (source code files)&lt;/em&gt;: este es la unidad base de sincronizacion/generacion. Es un archivo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure id=&#34;attachment_630&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png&#34; alt=&#34;place holders&#34; width=&#34;300&#34; height=&#34;255&#34; class=&#34;size-medium wp-image-630&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones&lt;/figcaption&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;contenedores (place holders)&lt;/em&gt;: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ejemplo de implementacion en gddify (js)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph constructor */
constructor () {
  this.name = &#39;nico&#39;
}
/* endph */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;reemplazos (replacements)&lt;/em&gt;: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).&lt;/p&gt;

&lt;p&gt;Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph replacements &lt;em&gt;/
/&lt;/em&gt; name, /myClass/g, myClass &lt;em&gt;/
/&lt;/em&gt; endph */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_629&#34; style=&#34;width: 280px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png&#34; alt=&#34;replacements&#34; width=&#34;280&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-629&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w&#34; sizes=&#34;(max-width: 280px) 85vw, 280px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;un ejemplo complejo de reemplazos&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;estampas (stamps)&lt;/em&gt;: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)&lt;/p&gt;

&lt;p&gt;Ejemplo en gddify (js)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* stamp toJson &lt;em&gt;/
toJSON () {
  return { name: this.name }
}
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_631&#34; style=&#34;width: 199px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png&#34; alt=&#34;stamps&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-631&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w&#34; sizes=&#34;(max-width: 199px) 85vw, 199px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;estampas ignoradas (ignoringStamps)&lt;/em&gt;: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.&lt;/p&gt;

&lt;p&gt;Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph ignoringStamps &lt;em&gt;/
/&lt;/em&gt; toJson, parse &lt;em&gt;/
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_632&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png&#34; alt=&#34;Ignoring stamps&#34; width=&#34;300&#34; height=&#34;244&#34; class=&#34;size-medium wp-image-632&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;La descripción de estos componentes de software de manera correcta, nos permitirá no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcción de generadores, y en un solo lenguaje sin templates. He allí el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido común.&lt;/p&gt;

&lt;p&gt;Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integración continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.&lt;/p&gt;

&lt;p&gt;Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.&lt;/p&gt;

&lt;p&gt;Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de código y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularización a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visión de &lt;a href=&#34;http://integracionesagiles.com&#34;&gt;Integraciones Agiles&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Esto es una simple introducción al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicación, códigos de ejemplo, y mucho mas.&lt;/p&gt;

&lt;h2 id=&#34;colaboración&#34;&gt;Colaboración&lt;/h2&gt;

&lt;p&gt;Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://integracionesagiles.com&#34;&gt;http://integracionesagiles.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify en github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>