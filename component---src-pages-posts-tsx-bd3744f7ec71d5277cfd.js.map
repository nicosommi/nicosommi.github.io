{"version":3,"file":"component---src-pages-posts-tsx-bd3744f7ec71d5277cfd.js","mappings":"6KAMe,SAASA,EAAT,GAAyC,IAAfC,EAAc,EAAdA,IACvC,OACE,QAACC,EAAD,MACE,kBACEC,MAAM,MACNC,OAAO,MACPH,IAAKA,EACLI,YAAY,IACZC,MAAM,0EACNC,iBAAe,KAMvB,IAAML,GAAYM,EAAAA,EAAAA,GAAE,MAAFA,GAAA,GAChBC,SAAU,WACVC,cAAe,SACfC,WAAY,GACZP,OAAQ,EACRQ,SAAU,SACVC,YAAa,EACbC,aAAc,IACb,yBAA0B,CACzBL,SAAU,WACVM,IAAK,EACLC,KAAM,EACNb,MAAO,OACPC,OAAQ,QAbM,K,6GCTX,SAASa,EAAT,GAAiE,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,WAChD,OACE,QAAClB,EAAD,CAAWgB,OAAQA,GAAS,GAAK,GAC9BC,EAAYE,QAAS,QAACrB,EAAA,EAAD,CAAgBC,IAAKkB,EAAYE,SACvD,QAAC,IAAD,CACEC,GAAIH,EAAYI,IAChBC,OAA6B,iBAArBL,EAAYM,OAEpB,QAACC,EAAD,KAASP,EAAYQ,SAEvB,QAACC,EAAD,SACIR,EADJ,eAC0B,mBACvBD,EAAYU,OAFf,MAE0BV,EAAYW,MACpC,mBACCX,EAAYY,SAAZ,IAA2BZ,EAAYY,UAWhD,IAAM7B,EAAYM,EAAAA,EAAAA,IAAH,wGAGC,gBAAGU,EAAH,EAAGA,MAAH,SAAUc,MAAqDC,QAAQC,QAAQhB,MAIzFQ,GAASlB,EAAAA,EAAAA,GAAE,KAAFA,CAAQ,IAEjBoB,GAASpB,EAAAA,EAAAA,GAAE,OAAFA,CAAU,CACvB2B,UAAW,OACXC,MAAO,SCrCM,SAASC,EAAT,GAAiC,IAAhBC,EAAe,EAAfA,KAC9B,OACE,QAAC,EAAD,KACGA,EAAKC,kBAAkBC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAChC,QAAC,cAAD,CAAgBC,IAAKF,EAAKG,KAAK1B,YAAYI,MACzC,QAACN,EAAD,CACEC,MAAOyB,EACPvB,WAAYsB,EAAKG,KAAKzB,WACtBD,YAAauB,EAAKG,KAAK1B,cAExBwB,EAAML,EAAKC,kBAAkBC,MAAMM,SAAU,QAACC,EAAD,WAOxD,IAAM7C,GAAYM,EAAAA,EAAAA,GAAE,MAAFA,CAAS,CACzBwC,QAAS,OACTC,cAAe,SACfC,eAAgB,iBAGZH,GAAMvC,EAAAA,EAAAA,GAAE,MAAFA,CAAS,CACnB2C,KAAM,c,wECtBR,UANkB,SAAC,GAAD,IAAGb,EAAH,EAAGA,KAAH,OAChB,QAAC,IAAD,MACE,QAAC,IAAD,CAAOA,KAAMA","sources":["webpack://personal-blog/./src/components/VideoContainer/index.tsx","webpack://personal-blog/./src/components/post/compact.tsx","webpack://personal-blog/./src/components/posts/index.tsx","webpack://personal-blog/./src/pages/posts.tsx"],"sourcesContent":["import { g, React } from \"src/utils/view\"\n\ntype Props = {\n  src: string\n}\n\nexport default function VideoContainer({ src }: Props) {\n  return (\n    <Container>\n      <iframe\n        width=\"560\"\n        height=\"315\"\n        src={src}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </Container>\n  )\n}\n\nconst Container = g(\"div\")({\n  position: \"relative\",\n  paddingBottom: \"56.25%\",\n  paddingTop: 20,\n  height: 0,\n  overflow: \"hidden\",\n  marginLeft: -3,\n  marginRight: -4,\n  [\"iframe, object, embed\"]: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n  },\n})\n","import SiteLink from \"src/components/link\"\nimport VideoContainer from \"src/components/VideoContainer\"\nimport { Theme } from \"src/themes/light\"\nimport { PostFrontmatter } from \"src/utils/types\"\nimport { g, React } from \"src/utils/view\"\n\ntype Props = {\n  timeToRead: number\n  frontmatter: PostFrontmatter\n  index?: number\n}\n\nexport function CompactPost({ index, frontmatter, timeToRead }: Props) {\n  return (\n    <Container index={(index || 0) % 4}>\n      {frontmatter.video && <VideoContainer src={frontmatter.video} />}\n      <SiteLink\n        to={frontmatter.url}\n        newTab={frontmatter.type === \"remark-slide\"}\n      >\n        <Header>{frontmatter.title}</Header>\n      </SiteLink>\n      <Footer>\n        ({timeToRead} min read) <br />\n        {frontmatter.author} - {frontmatter.date}\n        <br />\n        {frontmatter.version && `v${frontmatter.version}`}\n      </Footer>\n    </Container>\n  )\n}\n\ntype ContainerProps = {\n  index: number,\n  theme?: Theme\n}\n\nconst Container = g.div<ContainerProps>`\n  display: flex;\n  flex-direction: column;\n  box-shadow: ${({ index, theme }: ContainerProps & { theme: Theme }) => theme.compact.shadows[index]};\n  padding: 5,\n`\n\nconst Header = g(\"h1\")({})\n\nconst Footer = g(\"span\")({\n  textAlign: \"left\",\n  color: \"gray\",\n})\n","import { AllMarkdownRemark, PostFrontmatter } from \"src/utils/types\"\nimport { g, React } from \"src/utils/view\"\n\nimport { CompactPost } from \"../post/compact\"\n\ntype Props = {\n  data: {\n    allMarkdownRemark: AllMarkdownRemark<PostFrontmatter>\n  }\n}\n\nexport default function Posts({ data }: Props) {\n  return (\n    <Container>\n      {data.allMarkdownRemark.edges.map((edge, idx) => (\n        <React.Fragment key={edge.node.frontmatter.url}>\n          <CompactPost\n            index={idx}\n            timeToRead={edge.node.timeToRead}\n            frontmatter={edge.node.frontmatter}\n          />\n          {idx < data.allMarkdownRemark.edges.length && <Gap />}\n        </React.Fragment>\n      ))}\n    </Container>\n  )\n}\n\nconst Container = g(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"space-around\",\n})\n\nconst Gap = g(\"div\")({\n  flex: \"0 0 20px\",\n})\n","import { graphql } from \"gatsby\"\nimport Layout from \"src/components/Layout\"\nimport Posts from \"src/components/posts\"\nimport { React } from \"src/utils/view\"\n\ntype Props = any\n\nconst IndexPage = ({ data }: Props) => (\n  <Layout>\n    <Posts data={data} />\n  </Layout>\n)\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { type: { eq: null } } }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            url\n            title\n            author\n            categories\n            tags\n            type\n            version\n            video\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["VideoContainer","src","Container","width","height","frameBorder","allow","allowFullScreen","g","position","paddingBottom","paddingTop","overflow","marginLeft","marginRight","top","left","CompactPost","index","frontmatter","timeToRead","video","to","url","newTab","type","Header","title","Footer","author","date","version","theme","compact","shadows","textAlign","color","Posts","data","allMarkdownRemark","edges","map","edge","idx","key","node","length","Gap","display","flexDirection","justifyContent","flex"],"sourceRoot":""}