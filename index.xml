<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nicosommi</title>
    <link>http://nicosommi.github.com/</link>
    <description>Recent content on nicosommi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-AR</language>
    <lastBuildDate>Sat, 29 Apr 2017 06:34:58 -0300</lastBuildDate>
    <atom:link href="http://nicosommi.github.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Weekend experiment: a node.js SPA with multi stage builds from docker</title>
      <link>http://nicosommi.github.com/post/node-artifacts/</link>
      <pubDate>Sat, 29 Apr 2017 06:34:58 -0300</pubDate>
      
      <guid>http://nicosommi.github.com/post/node-artifacts/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Let&amp;rsquo;s build a small node.js single page application (SPA) using the multi stage builds feature from docker to optimize the image size&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;With multi stage builds (a feature announced in the docker con last week) we can create a tiny image that get&amp;rsquo;s pulled and pushed faster to the docker repository.&lt;/p&gt;

&lt;p&gt;A Single Page Applications (SPA&amp;rsquo;s) is a convenient use case to test the power of multi stage build easily in the node.js world.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with this.&lt;/p&gt;

&lt;h3 id=&#34;first-step-install-docker-17-05-ce&#34;&gt;First step: install docker 17.05-ce&lt;/h3&gt;

&lt;p&gt;Easy, go to &lt;a href=&#34;https://www.docker.com/community-edition#/download&#34;&gt;https://www.docker.com/community-edition#/download&lt;/a&gt;
Choose your platform AND, because we need multi stage builds and its still on the &lt;em&gt;edge channel&lt;/em&gt; we need to choose that instead of the stable channel. Download, install.&lt;/p&gt;

&lt;h3 id=&#34;second-step-building-a-spa&#34;&gt;Second step: Building a SPA&lt;/h3&gt;

&lt;p&gt;A single page application is just a static web page that can be served through any traditional web server.&lt;/p&gt;

&lt;p&gt;For this example, let&amp;rsquo;s pick a boilerplate SPA like create-react-app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g create-react-app

create-react-app my-app
cd my-app/
npm start # if you want to test it and check the browser for it
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;third-step-create-a-dockerfile&#34;&gt;Third step: create a Dockerfile&lt;/h3&gt;

&lt;p&gt;All right now the important thing, let&amp;rsquo;s take a look at a candidate Dockerfile&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;# buildtime
FROM node AS nodebase
LABEL maintainer &amp;quot;nicosommi@gmail.com&amp;quot;

ADD . /usr/src/app
WORKDIR /usr/src/app
RUN npm i &amp;amp;&amp;amp; npm run build

# runtime
FROM nginx:alpine
COPY --from=nodebase /usr/src/app/build /usr/share/nginx/html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s see.&lt;/p&gt;

&lt;p&gt;We start with a node:latest image, no problem with the image size because now we have multi stage builds.&lt;/p&gt;

&lt;p&gt;The LABEL maintainer, that&amp;rsquo;s recent too, no more MAINTAINER special instruction, now it&amp;rsquo;s a label.&lt;/p&gt;

&lt;p&gt;We add the current directory to the appropiate location and set the working directory to it.&lt;/p&gt;

&lt;p&gt;Install, build&amp;hellip; and that&amp;rsquo;s all that we need to generate our artifacts in our build folder.&lt;/p&gt;

&lt;p&gt;So after that, we take for the runtime the small nginx:alpine image and we just copy the build folder to the right place.&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;h3 id=&#34;fourth-step-build-and-run&#34;&gt;Fourth step: build and run!&lt;/h3&gt;

&lt;p&gt;So now, let&amp;rsquo;s build the image
&lt;code&gt;docker build -t my-app .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And now let&amp;rsquo;s look it&amp;rsquo;s size
&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All right! less than 16 MB! With the whole thing, linux, nginx and our app!&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s great. Just the node_modules folder size after installation is around 130 MB&amp;hellip; so this is a BIG win.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try it&lt;br /&gt;
&lt;code&gt;docker run -d --rm -p 8000:80 --name my-app my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open chrome in localhost:8000 and enjoy.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Multi stage builds are great, it let&amp;rsquo;s you easily build whatever you want and then create a thin self-sufficient pack with exactly what you need to let the user run your application.&lt;/p&gt;

&lt;p&gt;By making this clear distinction between different stages, docker let&amp;rsquo;s you think in a more organized way about the Dockerfile.&lt;/p&gt;

&lt;p&gt;With multi stage builds the LAST stage is the one that is used on your final image. Don&amp;rsquo;t forget that. &lt;em&gt;For example, the ONBUILD instruction on a previous stage wont have any effect&lt;/em&gt; because it will be overwritten with the last stage of the Dockerfile.&lt;/p&gt;

&lt;p&gt;As a side note, it is important to say that this may be a trigger to massively use webpack or some kind of bundler for standalone node.js applications. The node_modules folder get&amp;rsquo;s really big very quickly.&lt;/p&gt;

&lt;p&gt;nicosommi&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un posible futuro de los sistemas operativos es tuSO / yourOS</title>
      <link>http://nicosommi.github.com/post/tuos/</link>
      <pubDate>Sun, 23 Apr 2017 08:20:25 -0300</pubDate>
      
      <guid>http://nicosommi.github.com/post/tuos/</guid>
      <description>&lt;p&gt;&lt;em&gt;Imaginemos que en el futuro, la experiencia al manejar nuestros dispositivos ya no será como los conocemos ahora (sistemas operativos con aplicaciones) sino que serán meros ejecutadores de contenedores con las aplicaciones que elijamos. Imaginemos construyendo un sistema operativo para nuestro smartphone, justo con lo que necesitamos. Imaginemos una real democratización de nuestras elecciones, de los recursos que las aplicaciones utilizan, de nuestra privacidad. Imaginemos pagar un juego, una canción u otra obra tan sólo vez para todos nuestros dispositivos. Imaginemos&amp;hellip; de eso es este post&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hace un tiempo vengo estudiando acerca del futuro que tendrán los Sistemas Operativos (incluso comencé un post que nunca publiqué allá por septiembre de 2016). Imagino el futuro de los SO distinto, manteniendo su sentido escencial (seguirán administrando el uso del hardware), cambiando sustancialmente nuestra forma de experimentarlo. Más precisamente pienso esto muchísimo desde que conocí Docker hace ya casi 2 años. Esta nueva capa de abstracción nos permite ver a nuestro sistema operativo como un conjunto de contenedores que ejecutan aplicaciones que, a su vez, también son contenedores.&lt;/p&gt;

&lt;p&gt;Imaginemos correr una aplicación sin instalar, directa o indirectamente sus librerías, y sin conocer como configurarla. Imaginemos correr aplicaciones que no podrán acceder a nada (ni siquiera a a los archivos, puertos, etc) de nuestro sistema principal salvo que nosotros lo autorizemos explícitamente. Todo eso ya existe utilizando docker de manera manual, y se utiliza en servidores de aplicaciones y servicios en la nube. Requiere conocimientos específicos que sólo los que estamos sumergidos en el tema conocemos. Pero imaginemos todo eso en la cotidianeidad del usuario final, usando ya sea nuestro smartphone, tablet, pc de escritorio o cualquier dispositivo inteligente, con suerte hasta incluso consolas de videojuegos, de manera transparente.
 Imaginemos que nuestros dispositivos sólo sean interfaces de un SO a medida, que siempre es igual y se adapta a los mismos.&lt;br /&gt;
 Imaginemos tener servicios de aplicaciones en nuestros otros dispositivos o en la nube de manera transparente.&lt;br /&gt;
 Imaginemos administrar las aplicaciones desde cualquier dispositivo.&lt;br /&gt;
 Imaginemos comprar aplicaciones, canciones, juegos, y de todo tipo, que corran en todos nuestros dispositivos.&lt;br /&gt;
 Imaginar&amp;hellip; eso es Moby y Linuxkit (ver más adelante), impulsados en gran medida por Docker.&lt;/p&gt;

&lt;p&gt;Al principio lo veía utópico, pero en parte me sentía reconfortado porque había personas importantes en la industria que también lo pensaban.&lt;br /&gt;
Por ejemplo, Steve Francia (creador de hugo, ex de Docker ahora en Google) lo expresó alla por el año 2015 aunque más orientado a &lt;a href=&#34;https://es.slideshare.net/spf13/the-future-of-the-operating-system-linuxcon&#34;&gt;aplicaciones distribuidas&lt;/a&gt;.&lt;br /&gt;
Aun más cercanos a mis reflexiones de llevar los contenedores a dispositivos pequeños, están los ex &lt;a href=&#34;http://blog.hypriot.com/&#34;&gt;&amp;ldquo;docker pirates ARMados con cosas explosivas&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ya no lo veo tan utópico o descabellado. Sobre todo desde que liberaron &lt;a href=&#34;https://github.com/linuxkit/linuxkit&#34;&gt;linuxkit&lt;/a&gt; (un set de componentes basados en linux) hace pocos días, en conjunto con el ya existente proyecto &lt;a href=&#34;https://github.com/moby/moby&#34;&gt;Moby&lt;/a&gt;, que es una gran iniciativa de la compañía que persigue la idea de empujar el movimiento de los contenedores que tan fuerte viene evolucionando.&lt;/p&gt;

&lt;p&gt;Con Linuxkit y Moby podemos construir un sistema operativo juntando componentes, al estilo &amp;ldquo;Lego&amp;rdquo;, como ellos dicen. En la Dockercon 2017 demostraron en vivo, luego de liberar linuxkit, como construir un sistema operativo de &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; (una base de datos key value) con lo mínimo indispensable. Esta es la tendencia que confirma que mis pensamientos son muy posibles.&lt;/p&gt;

&lt;p&gt;Si bien hay muchísima evolución por delante como para ser aplicada al usuario final (para ser &amp;ldquo;user friendly&amp;rdquo;), creo que cuando un camino es mejor, es inevitable, ya que beneficia negocios y personas. Quizás el primer paso sea que los mayores SO actuales adopten una arquitectura basada en contenedores, para así abrir camino hacia un futuro en el cuál ellos mismos luego pasen a ser proveedores de distintos contenedores de interfaz de usuario, por ejemplo, o paquetes de oficina, stores de aplicaciones/contenedores, etc.&lt;/p&gt;

&lt;p&gt;Otra aplicación muy interesante es la que ya se está dando en dispositivos como raspberry pi y todo lo que es internet de las cosas (IoT), ya que tener un SO mínimo es muy conveniente para aplicaciones especializadas como estas. Cabe destacar que ya hay soporte para ARM además de x86 (gracias al esfuerzo de los docker pirates de hypriot! &lt;a href=&#34;http://blog.hypriot.com/about/&#34;&gt;http://blog.hypriot.com/about/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Con respecto a los móbiles, bien se podrían comenzar proyectos de controladores de hardware que ejecuten indistintamente aplicaciones de Android y iOS, lo que en el futuro incluso dispararía versiones más óptimas de las mismas, permitiéndoles utilizar lenguajes de su elección. También dispararía la componentización y por ende democratización de estos sistemas operativos, que hoy tienen un comportamiento por demás abusivo en cuanto a privacidad.&lt;/p&gt;

&lt;p&gt;Muchas veces se me ha ocurrido de manera errónea intentar ejecutar docker desde android. Eso sería oportuno para solucionar rápidamente inconvenientes de hoy en día, pero Moby en conjunto con linuxkit, u otro conjunto de contenedores básicos nos brindan que pueda surgir, un Ecosistema mucho más natural para estos dispositivos. Es importante destacar que ya existe una lista de sistemas operativos mínimos en desarrollo activo. Esto sin duda dejará para la comunidad, bloques para utilizar, que como consecuencia beneficiarán estas ideas.&lt;br /&gt;
Yo por mi cuenta, espero ser más y más activo en esta comunidad de contenedores.&lt;/p&gt;

&lt;p&gt;Habrá resistencias de intereses privados por mucho tiempo, pero como la historia reciente lo marca, si el movimiento es firme, ellos terminarán ahogados por la ola de los cambios y los nuevos emprendimientos que allí los lleven.&lt;/p&gt;

&lt;p&gt;Saber que los sistemas operativos puedan ser un conjunto de pequeñas cosas que tengan una simple responsabilidad, para que todos podamos tomar elecciones basadas en nuestro propio juicio, sabiendo a que nos atenemos, y así construir de manera consciente nuestro propio &amp;ldquo;Castillo&amp;rdquo; personal de aplicaciones.&lt;/p&gt;

&lt;p&gt;Se trata de una opinión y también de un deseo personal.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Imaginemos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;nicosommi&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker secrets</title>
      <link>http://nicosommi.github.com/slide/docker.secrets/</link>
      <pubDate>Wed, 29 Mar 2017 15:38:10 -0300</pubDate>
      
      <guid>http://nicosommi.github.com/slide/docker.secrets/</guid>
      <description>

&lt;!-- class: middle --&gt;

&lt;!-- layout: true --&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;http://nicosommi.github.com/assets/2017-03-25-13-39-09.png&#34; width=&#34;400px&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h1 id=&#34;docker-secrets&#34;&gt;Docker secrets&lt;/h1&gt;

&lt;h2 id=&#34;por-nicosommi&#34;&gt;Por nicosommi&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;name: agenda&lt;/p&gt;

&lt;h2 id=&#34;agenda&#34;&gt;Agenda&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Agenda e introducción&lt;/li&gt;
&lt;li&gt;Como surgen?&lt;/li&gt;
&lt;li&gt;¿Qué son los secrets?&lt;/li&gt;
&lt;li&gt;¿Para que sirven?&lt;/li&gt;
&lt;li&gt;Anotaciones de seguridad&lt;/li&gt;
&lt;li&gt;Detalles de utilización&lt;/li&gt;
&lt;li&gt;Preparando nuestras imágenes&lt;/li&gt;
&lt;li&gt;Creando un secreto sencillo&lt;/li&gt;
&lt;li&gt;Utilizando secrets con YML&amp;rsquo;s de docker compose&lt;/li&gt;
&lt;li&gt;Usando https con secrets&lt;/li&gt;
&lt;li&gt;Resumen de comandos&lt;/li&gt;
&lt;li&gt;Q &amp;amp; A&lt;/li&gt;
&lt;li&gt;Fin&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;como-surgen&#34;&gt;¿Como surgen?&lt;/h2&gt;

&lt;p&gt;Porque la comunidad toma decisiones heterogeneas y peligrosas:
- Usar variables de entorno (12 factor app)
- Variables de entorno en build
- Manual build (commit)
- Custom hacks (curl a webserver)
&amp;hellip; Se necesitan do&amp;rsquo;s and don&amp;rsquo;ts&lt;/p&gt;

&lt;p&gt;???
- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados&lt;/p&gt;

&lt;h2 id=&#34;hasta-se-decidio-no-encriptarlas-solo-para-que-la-gente-no-las-use-para-secretos&#34;&gt;- hasta se decidio no encriptarlas solo para que la gente no las use para secretos&lt;/h2&gt;

&lt;h2 id=&#34;qué-son-los-secrets&#34;&gt;¿Qué son los secrets?&lt;/h2&gt;

&lt;p&gt;Para docker es un BLOB de datos manejado de manera centralizada.
- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan
- Solo para swarm&amp;hellip; por ahora
- Hasta 500KB (no TAN large)
- Por ahora solo para runtime
&lt;center&gt;
  &lt;img src=&#34;http://nicosommi.github.com/slide/assets/2017-03-22-21-47-13.png&#34; width=&#34;800px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;???
Binary Large OBjects
Secure Sockets Layer (ahora Transport Layer Security)
SwarmKit es una libreria que se encarga del node management&lt;/p&gt;

&lt;h2 id=&#34;hay-un-issue-en-curso-para-build-time-secrets&#34;&gt;Hay un issue en curso para build time secrets&lt;/h2&gt;

&lt;h2 id=&#34;para-que-sirven&#34;&gt;¿Para que sirven?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos&amp;hellip; y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones&lt;/li&gt;
&lt;li&gt;Funciona como capa de abstraccion entre las credenciales y los contenedores&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;anotaciones-de-seguridad&#34;&gt;Anotaciones de seguridad&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Viajan a los managers del swarm por TLS&lt;/li&gt;
&lt;li&gt;Se almacenan en el Raft log, con todo lo que ello nos garantiza (que está encriptado y es replicado a través de los managers, garantizando la misma HA que el resto de la informacion del swarm)&lt;/li&gt;
&lt;li&gt;Cuando se detiene un container, se hace unmount y se flushea la memoria&lt;/li&gt;
&lt;li&gt;Si se pierde conexión con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucción hasta que se vuelva a conectar al swarm&lt;br /&gt;
&lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;http://thesecretlivesofdata.com/raft/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
* Esta encriptado desde la 1.13
* El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm
* El &amp;ldquo;Raft log&amp;rdquo; se refiere al consensus algorithm que utiliza swarmkit &lt;em&gt;entre managers&lt;/em&gt; para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue diseñado para ser simple de entender y que más sistemas utilizen un buen algoritmo de consenso para ser más tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y líderes.
* Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un líder es elegido. Después hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.
&lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;http://thesecretlivesofdata.com/raft/&lt;/a&gt;
Tienen un log y una maquina de estados.
Si una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, también relegando su liderazgo.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;detalles-de-utilización&#34;&gt;Detalles de utilización&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Se montan en /run/secrets/name&lt;/li&gt;
&lt;li&gt;Solo tiene acceso si es un manager o si tiene permisos específicos&lt;/li&gt;
&lt;li&gt;Se pueden ver, listar los secrets, pero no se puede borrar uno que está siendo utilizado, para ello se debe rotar el secret&lt;/li&gt;
&lt;li&gt;Se recomienda poner en el nombre una fecha o numero de version, para hacer más sencillo el control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
- &amp;ndash;secret source=mysql_password,target=wp_db_password,mode=0400&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;preparando-nuestras-imágenes&#34;&gt;Preparando nuestras imágenes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE además de MYSQL_PASSWORD)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;creando-un-secreto-sencillo&#34;&gt;Creando un secreto sencillo&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker swarm init --advertise-addr eth0 # solo para probar local
$ openssl rand -base64 20 | docker secret create mi_secreto -
$ docker service create --name mi_servicio --secret mi_secreto nginx
$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets
$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???
Si commiteamos el container a una imagen, el secreto es desmontado&lt;/p&gt;

&lt;h2 id=&#34;si-tengo-mas-replicas-el-comando-debe-ser-adaptado-porque-hay-mas-de-un-hash-tengo-que-hacerlo-mas-a-mano&#34;&gt;Si tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano&lt;/h2&gt;

&lt;h2 id=&#34;utilizando-secrets-con-yml-s-de-docker-compose&#34;&gt;Utilizando secrets con YML&amp;rsquo;s de docker compose&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3.1&#39;
services:
    test:
        image: &#39;alpine&#39;
        command: &#39;cat /run/secrets/my_secret&#39;
        secrets: 
            - my_secret
secrets:
    my_secret:
        file: ./mysecret.txt
        # o external: true para tomarlo del swarm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???
Gracias al stack del compose&lt;/p&gt;

&lt;h2 id=&#34;docker-stack-deploy-c-file-yml-name&#34;&gt;docker stack deploy -c file.yml name&lt;/h2&gt;

&lt;h2 id=&#34;usando-https-con-secrets&#34;&gt;Usando https con secrets&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Generar certificado con let&amp;rsquo;s encrypt, self-signed u otra CA&lt;/li&gt;
&lt;li&gt;Preparar nginx config&lt;/li&gt;
&lt;li&gt;Preparar secrets en el swarm
&lt;code&gt;shell
$ docker secret create site.key site.key
$ docker secret create site.crt site.crt
$ docker secret create site.conf site.conf
&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Crear el servicio&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker service create --name nginx --secret site.key \
 --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \
 sh -c &amp;quot;ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf &amp;amp;&amp;amp; exec nginx -g &#39;daemon off;&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???&lt;/p&gt;

&lt;h2 id=&#34;daemon-off-es-un-flag-de-nginx-para-docker-o-debug-que-lo-mantiene-en-foreground-y-que-es-amigo-de-tener-un-proceso-por-container&#34;&gt;Daemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container&lt;/h2&gt;

&lt;h2 id=&#34;resumen-de-comandos&#34;&gt;Resumen de comandos&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker swarm init --advertise-addr eth0 # solo para probar local
$ echo &amp;quot;a&amp;quot; | docker secret create mi_secreto -
$ docker secret inspect mi_secreto
$ docker secret ls
$ docker service create --name mi_servicio --secret mi_secreto nginx
$ docker service update mi_servicio --secret-rm mi_secreto
$ docker service update mi_servicio --secret-add mi_nuevo_secreto
$ docker secret rm mi_secreto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???&lt;/p&gt;

&lt;h2 id=&#34;aca-se-pueden-ver-todos-los-comandos-necesarios-para-por-ejemplo-hacer-una-rotacion-de-logs&#34;&gt;Aca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs&lt;/h2&gt;

&lt;h1 id=&#34;q-a&#34;&gt;Q &amp;amp; A&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;gracias&#34;&gt;Gracias!&lt;/h1&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>docker</title>
      <link>http://nicosommi.github.com/slide/docker/</link>
      <pubDate>Mon, 24 Oct 2016 15:38:10 -0300</pubDate>
      
      <guid>http://nicosommi.github.com/slide/docker/</guid>
      <description>

&lt;!-- class: middle --&gt;

&lt;!-- layout: true --&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;http://nicosommi.github.com/assets/docker-74de8.png&#34; width=&#34;400px&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h1 id=&#34;introduccion-a-docker&#34;&gt;Introduccion a docker&lt;/h1&gt;

&lt;h2 id=&#34;por-nicosommi&#34;&gt;Por nicosommi&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;name: agenda&lt;/p&gt;

&lt;h2 id=&#34;agenda&#34;&gt;Agenda&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Agenda y alcance&lt;/li&gt;
&lt;li&gt;Fundamentos&lt;/li&gt;
&lt;li&gt;Casos de uso&lt;/li&gt;
&lt;li&gt;Por dentro&lt;/li&gt;
&lt;li&gt;Componentes&lt;/li&gt;
&lt;li&gt;Ejemplo sencillo&lt;/li&gt;
&lt;li&gt;Q &amp;amp; A&lt;/li&gt;
&lt;li&gt;Mas componentes&lt;/li&gt;
&lt;li&gt;Comandos sobre contenedores e imágenes&lt;/li&gt;
&lt;li&gt;Ejemplo lateral&lt;/li&gt;
&lt;li&gt;Técnica para construir un Dockerfile&lt;/li&gt;
&lt;li&gt;Buenas prácticas&lt;/li&gt;
&lt;li&gt;Docker para SPA, web apps, etc&lt;/li&gt;
&lt;li&gt;Anexo: Services&lt;/li&gt;
&lt;li&gt;Q &amp;amp; A&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;class: center&lt;/p&gt;

&lt;h2 id=&#34;que-es&#34;&gt;Que es?&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-89c82.png&#34; width=&#34;400px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;???
Disculpen el teclado en ingles&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Técnicamente es una capa de abstracción para la utilización de cgroups, namespaces y UnionFS de linux.&lt;/li&gt;
&lt;li&gt;Basado en esto, crea el concepto de contenedor y nos permite construir de manera simple imagenes a partir de las cuales correr contenedores de manera aislada.&lt;/li&gt;
&lt;li&gt;UnionFS que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente&lt;/li&gt;
&lt;li&gt;Con los namespaces virtualiza los recursos como archivos, recursos de red y usuarios&lt;/li&gt;
&lt;li&gt;Con los cgroups aisla del uso de recursos (cpu, memoria, E/S)
&lt;center&gt;
&lt;img src=&#34;http://nicosommi.github.com/assets/docker-28b55.png&#34; width=&#34;300px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;class: right
&lt;img style=&#34;position: absolute&#34; src=&#34;http://nicosommi.github.com/assets/docker-04a7d.png&#34; width=&#34;200px&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h2 id=&#34;es-una-maquina-virtual-no&#34;&gt;Es una maquina virtual? No.&lt;/h2&gt;

&lt;h2 id=&#34;como-se-diferencia-de-una&#34;&gt;Como se diferencia de una?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Se diferencia porque no tiene un sistema operativo host y uno guest, sino que utiliza herramientas de un sistema operativo existente para la creacion de contenedores.
&lt;center&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/history.png&#34; width=&#34;600px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;
???
Comentar:
* historia
* primero escalabilidad horizontal
* despues optimizar recursos
* adicionales: docker swarm independiente
Nos permite cambiar la unidad de medida de nuestra aplicación de máquinas virtuales o físicas a simples containers.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;en-donde-corre&#34;&gt;En donde corre?&lt;/h2&gt;

&lt;p&gt;En sus inicios solo soportaba contenedores linux sobre linux, ahora puede correr contenedores linux-based tanto en mac como en windows y en varios otros providers (aws, etc).
Tambien, recientemente incorporaron contenedores basados en windows server.
&lt;center&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/platforms.png&#34; width=&#34;400px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-6a999.png&#34; width=&#34;100px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;nbsp-para-que-sirve&#34;&gt;&amp;nbsp;Para que sirve?&lt;/h2&gt;

&lt;p&gt;Para isolar el entorno de ejecución de una aplicación.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/pencil.png&#34; width=&#34;80px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;nbsp-datos&#34;&gt;&amp;nbsp;Datos&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Es open source desde el 2013.&lt;/li&gt;
&lt;li&gt;Esta escrito en go.&lt;/li&gt;
&lt;li&gt;Lo comenzó Solomon Hykes en dotCloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
Go esta pensado para concurrencia y productividad y tiene garbage collection&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;casos-de-uso&#34;&gt;Casos de uso&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://nicosommi.github.com/assets/usecases.png&#34; width=&#34;90%&#34;&gt;&lt;/img&gt;
???
Invitar a sugerir ideas u opinar sobre las mencionadas
Texto:
* CI/CD
* Entornos de desarrollo
* Compilar para distintos targets
* PaaS
* Escalabilidad horizontal
* High availability cluster
* Aislar ejecucion de codigo de manera segura (webpackbin, etc)
* Aprendizaje/investigacion
* Etc&amp;hellip;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;por-dentro&#34;&gt;Por dentro&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-c4f70.png&#34; width=&#34;140px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;nbsp-docker-image&#34;&gt;&amp;nbsp;Docker Image&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Es un template con instrucciones para la construccion de contenedores&lt;/li&gt;
&lt;li&gt;Tiene una o varias capas de solo lectura a partir del cual se crean contenedores&lt;/li&gt;
&lt;li&gt;Se pueden extender o empezar de cero&lt;/li&gt;
&lt;li&gt;Para su descripcion se utiliza una simple interfaz en un archivo de texto denominado Dockerfile&lt;/li&gt;
&lt;li&gt;El Dockerfile contiene instrucciones, y cada instruccion genera una capa adicional. Estas instrucciones son por ejemplo FROM, MAINTAINER, RUN, ADD, ENV, CMD.&lt;/li&gt;
&lt;li&gt;Docker simplemente lee las instrucciones, las ejecuta, y devuelve la imagen&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;docker-container&#34;&gt;Docker Container&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Es una instancia de una imagen que se puede correr, parar, mover, borrar, etc.&lt;/li&gt;
&lt;li&gt;Contiene una fina capa adicional a las de su imagen con permisos de escritura.&lt;/li&gt;
&lt;li&gt;Adicionalmente puede contar con metadata, como puertos de red, variables de entorno, volumenes, etc.&lt;/li&gt;
&lt;li&gt;Cada contenedor es aislado pero puede tener acceso a recursos del host o de otros contenedores.
&lt;center&gt;
&lt;img src=&#34;http://nicosommi.github.com/assets/docker-bb91f.png&#34; width=&#34;300px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
Preguntar diferencia entre contenedor e imagen y clarificar dudas&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;acerca-del-contenedor&#34;&gt;Acerca del Contenedor&lt;/h2&gt;

&lt;p&gt;Previamente se utilizaba lxc, luego libcontainer, pero ahora se esta avocando a runC y a llevar adelante OCI (Open Container Initiative).
&lt;center&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-71f58.png&#34; width=&#34;240px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-1c5ae.png&#34; width=&#34;70px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;nbsp-storage&#34;&gt;&amp;nbsp;Storage&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Utiliza union fs, que consiste en poner una capa arriba de otra hasta lograr un sistema de archivos coherente&lt;/li&gt;
&lt;li&gt;Es quien se encarga de manejar los archivos entre las capas de solo lectura y la del contenedor&lt;/li&gt;
&lt;li&gt;Docker utiliza &amp;lsquo;copy on write&amp;rsquo;, es decir que copia una capa sólo cuando la va a cambiar, lo que permite optimizar el tamaño en disco ocupado por la imagen y el tiempo de arranque de los contenedores.&lt;/li&gt;
&lt;li&gt;Toda la data de imagenes y contenedores se guarda en una carpeta.&lt;/li&gt;
&lt;li&gt;Hay muchas variantes de union fs (drivers): aufs, overlay/2, btrfs, zfs. Se deben elegir según caso de uso, experiencia del equipo y linux distro.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;componentes&#34;&gt;Componentes&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;docker-engine&#34;&gt;Docker Engine&lt;/h2&gt;

&lt;p&gt;Aplicacion cliente/servidor. Un daemon es el servidor que levanta una API Rest la cual es utilizada por un CLI para instruirlo.
&lt;img src=&#34;http://nicosommi.github.com/assets/docker-9cf40.png&#34; alt=&#34;Docker engine&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;machine&#34;&gt;Machine&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Manager para windows, osx y otros providers, que nos permite correr un docker host y permite manejar multiples hosts en una red desde linux.&lt;/li&gt;
&lt;li&gt;Nos deja instalar docker en terminales remotas y provisionar swarms.
&lt;img src=&#34;http://nicosommi.github.com/assets/docker-7ada0.png&#34; width=&#34;95%&#34;&gt;&lt;/img&gt;
???
Permite especificar drivers para distintos providers&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;compose&#34;&gt;Compose&lt;/h2&gt;

&lt;p&gt;Es una herramienta para definir y correr aplicaciones que consisten de varios containers mediante la especificacion de un archivo docker-compose.yml.
* Detecta cambios y recrea solo lo necesario
* Soporta variables en el compose file
* Guarda la data persistida en los volumes
* Es muy util para entornos de desarrollo, para deployment en un solo host
&lt;center&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-32d4f.png&#34; width=&#34;200px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/ubuntu.png&#34; width=&#34;50px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;nbsp-ejemplo-sencillo&#34;&gt;&amp;nbsp;Ejemplo sencillo&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --name miContenedor -it ubuntu:14.04 /bin/bash
root@3883936319fb:/# lsb_release -a
(...) Description:	Ubuntu 14.04.5 LTS (...)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Trae la ultima imagen, o si ya existe la utiliza.&lt;/li&gt;
&lt;li&gt;Crea, en base a la imagen, un contenedor.&lt;/li&gt;
&lt;li&gt;Guarda el contenedor en una carpeta y monta una capa con permisos de escritura.&lt;/li&gt;
&lt;li&gt;Asigna una interfaz de red con la cual habla con el host&lt;/li&gt;
&lt;li&gt;Setea una IP de una pool&lt;/li&gt;
&lt;li&gt;Ejecuta el proceso solicitado (/bin/bash)&lt;/li&gt;
&lt;li&gt;Captura y devuelve el output del contenedor por haber indicado -it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;???
i es para el interactive mode, que deja el stdin esperando
t asigna un pseudo tty / pty
* pull
* hablar de pull y de los otros parametros como name, port, volume&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;wordpress&#34;&gt;Wordpress&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&#34;bash hljs remark-code remark-code-line&#34; style=&#34;font-size: 13px;&#34;&gt;
  version: &#39;2&#39;

  services:
     db:
       image: mysql:5.7
       volumes:
         - &#34;./.data/db:/var/lib/mysql&#34;
       restart: always
       environment: (...)

     wordpress:
       depends_on:
         - db
       image: wordpress:latest
       links:
         - db
       ports:
         - &#34;8000:80&#34;
       restart: always
       environment: (...)
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;???
Environment está cortado por cuestiones de espacio del slide pero es un ejemplo tomado de la página oficial&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;q-a-parcial&#34;&gt;Q &amp;amp; A Parcial&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;docker-registry&#34;&gt;Docker Registry&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Es una libreria de imagenes.&lt;/li&gt;
&lt;li&gt;Puede ser publico o privado.&lt;/li&gt;
&lt;li&gt;Una vez construida la imagen, hacemos un push al registry&lt;/li&gt;
&lt;li&gt;Docker hub es un registry publico oficial&lt;/li&gt;
&lt;li&gt;Hay una imagen publica registry y una para el trusted registry
&lt;center&gt;
&lt;img src=&#34;http://nicosommi.github.com/assets/docker-89504.png&#34; width=&#34;240px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;
???
Trusted registry es con soporte comercial&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;data-volumes&#34;&gt;Data volumes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Encontrar
&lt;code&gt;bash
$ docker inspect myContainer
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Se pueden crear volúmenes o montar desde el host
&lt;code&gt;bash
$ docker run -d -P --name web -v /webapp myImage npm start
$ docker run -d -P --name web -v /src:/webapp myImage npm start
&lt;/code&gt;
???&lt;/li&gt;
&lt;li&gt;bypass a unionfs&lt;/li&gt;
&lt;li&gt;si no esta bindeado a host, copia el contenido adentro&lt;/li&gt;
&lt;li&gt;permite compartir entre containers con compose o con named volumes (flocker por ejemplo)&lt;/li&gt;
&lt;li&gt;esta diseñado para cambiar el container y que la data persista, incluso aunque ningun container la referencie&lt;/li&gt;
&lt;li&gt;soporta SCSI, NFS, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;data-volume-containers&#34;&gt;Data volume containers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://nicosommi.github.com/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/&#34;&gt;Es una práctica&lt;/a&gt;&lt;/em&gt; que consiste en crear un contenedor que sólo contiene data que luego será utilizada por otros contenedores
&lt;code&gt;bash
$ docker create -v /dbdata --name mydb postgres /bin/true
$ docker run -d --volumes-from mydb --name db1 postgres
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Puede ser bridge, none  y host
&lt;code&gt;bash
$ docker network ls
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pueden verse los detalles
&lt;code&gt;bash
$ docker network inspect bridge
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Se pueden crear nuestras redes en las cuales correr containers
???&lt;/li&gt;
&lt;li&gt;un container puede pertenecer a varias redes&lt;/li&gt;
&lt;li&gt;se ven entre los de la misma red&lt;/li&gt;
&lt;li&gt;puede ser overlay (swarm mode) o custom driver&lt;/li&gt;
&lt;li&gt;embedded dns en custom networks&lt;/li&gt;
&lt;li&gt;antes habia links y ahora se solapa un poco con networks, comparte envs, escribe el hosts&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;docker-aplicado&#34;&gt;Docker Aplicado&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-28b55.png&#34; width=&#34;70px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;nbsp-operaciones-sobre-contenedores&#34;&gt;&amp;nbsp;Operaciones sobre contenedores&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Run, Start, Stop&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# crea un contenedor en base a una imagen y corre el comando bash
$ docker run --name miContenedor alpine echo &amp;quot;Hola&amp;quot;
# arrancar un contenedor ya creado
$ docker start miContenedor
# parar contenedor con time to kill
$ docker stop -t 10 miContenedor
# also valid: docker restart -t 10 miContenedor
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Borrar, Listar, Inspeccionar
&lt;code&gt;bash
$ docker rm miContenedor
$ docker ps
$ docker ps --all
$ docker inspect miContenedor
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
* hablar de señales y su relacion con stop&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-c4f70.png&#34; width=&#34;70px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;nbsp-operaciones-sobre-imagenes&#34;&gt;&amp;nbsp;Operaciones sobre imagenes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cargar, Listar, Inspeccionar
&lt;code&gt;bash
$ docker pull repo/image:tag
$ docker load -i imagen.tar
$ docker images
$ docker inspect alpine
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Borrar, Construir, Taggear, Subir
&lt;code&gt;bash
$ docker rmi repo/image:tag
$ docker build -t image-name .
$ docker tag image-name repo/image-name:tag
$ docker push repo/image-name:tag
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
* es necesario un docker login myrepo:2376&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ejemplo-existente&#34;&gt;Ejemplo existente&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --name ffox -d -p 5001:5001 kaixhin/vnc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/vncffox.png&#34; width=&#34;200px&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;???
Luego con un cliente vnc accedemos a un lxde con firefox instalado&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-08dc8.png&#34; width=&#34;45px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h2 id=&#34;nbsp-tecnica-para-construir-un-dockerfile&#34;&gt;&amp;nbsp;Tecnica para construir un Dockerfile&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Se inicia un shell sobre una imagen base
&lt;code&gt;bash
$ docker run -it --name testC ubuntu sh
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Se ejecutan los comandos y se van traduciendo a instrucciones de un Dockerfile&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;???
- tar
- scratch image (reserved word)
- &lt;em&gt;history&lt;/em&gt; de image
- &lt;em&gt;commit&lt;/em&gt; del container como no recomendada mas que para pruebas y debugging&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;debug&#34;&gt;Debug&lt;/h2&gt;

&lt;p&gt;a. Entramos a un contenedor corriendo&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# otra alternativa, tomar una
$ docker exec -it nignxTest /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b. Miramos los logs conectados&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker logs nginxTest
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;buenas-prácticas&#34;&gt;Buenas prácticas&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Containers lo más prescindibles posibles&lt;/li&gt;
&lt;li&gt;Usar .dockerignore&lt;/li&gt;
&lt;li&gt;Evitar instalar paquetes innecesarios&lt;/li&gt;
&lt;li&gt;Correr un sólo proceso por container&lt;/li&gt;
&lt;li&gt;Minimizar la cantidad de capas&lt;/li&gt;
&lt;li&gt;Organizar argumentos y comandos de multiples lineas con &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Contemplar el build cache
&lt;center&gt;
&lt;img src=&#34;http://nicosommi.github.com/assets/docker-d0772.png&#34; width=&#34;50%&#34;&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
* prescindible = efimero = pueden ser parados, destruidos y reemplazados
* usar cache o no
* el checksum del cache, que se invalida cuando algo cambia en determinadas instrucciones, por ejemplo los archivos agregados con ADD o COPY se chequean por cada uno sin usar la fecha de modificacion, en cambio para RUN el string del comando es suficiente
* una vez invalidado, ya no se utiliza para las subsecuentes capas&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ejemplos-docker-para-web&#34;&gt;Ejemplos docker para web&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;spa-build&#34;&gt;SPA build&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:6
ADD . /src
WORKDIR /src
RUN rm -fR ./node_modules &amp;amp;&amp;amp; \
  npm i
ENTRYPOINT [&amp;quot;npm&amp;quot;, &amp;quot;build&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???
Hay maneras alternativas de ejecutar CMD, esa es la preferida (JSON array) ya que no tiene nada implicito (como el ´shell´ form que hace &amp;ldquo;/bin/sh -c&amp;rdquo; lo que oculta señales por ejemplo docker stop)
&amp;ndash;entrypoint overrides
* tiene que haber al menos un cmd o entrypoint
* entrypoint para ejecutables
* cmd es mas para preparar parametros&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;spa-serve&#34;&gt;SPA serve&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;version: &#39;2&#39;
services:
  spa:
    image: nginx
    volumes:
      - &amp;quot;.:/usr/share/nginx/html:ro&amp;quot;
    ports:
      - &amp;quot;10000:80&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;api&#34;&gt;API&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:6
EXPOSE 3000
ADD . /src
WORKDIR /src
RUN npm rebuild &amp;amp;&amp;amp; \
  npm test
CMD [&amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???
Hay muchas alternativas, hay una tarea de diseño implícita&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;div style=&#34;float: left;&#34;&gt;
  &lt;img src=&#34;http://nicosommi.github.com/assets/docker-32d4f.png&#34; width=&#34;50px&#34;&gt;&lt;/img&gt;
&lt;/div&gt;
##&amp;nbsp; Compose&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# docker-compose.yml just for api
version: &#39;2&#39;
services:
  api:
    image: mirepo.com/api-image:production
    ports:
      - &amp;quot;3000:3000&amp;quot;
    depends_on:
      - mongo
    environment:
      PORT: 3000
  mongo:
    image: mongo
    ports:
      - &amp;quot;27017:27017&amp;quot;
    volumes:
      - ./mongodata:/data/db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???&lt;/p&gt;

&lt;h2 id=&#34;links-puede-utilizarse-para-definir-alias-pero-no-es-necesario&#34;&gt;Links puede utilizarse para definir alias pero no es necesario&lt;/h2&gt;

&lt;h2 id=&#34;comandos-para-compose&#34;&gt;Comandos para compose&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Correr, Parar, Borrar
&lt;code&gt;bash
$ docker-compose up -d
$ docker-compose stop -t 10
$ docker-compose rm
$ docker-compose --help
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;anexo-docker-services&#34;&gt;Anexo: Docker services&lt;/h2&gt;

&lt;p&gt;Es una abstracción de los contenedores.
* Permite a un swarm de docker nodes trabajar juntos mediante la ejecucion de replica tasks, que son docker images tambien
* Se puede especificar la cantidad de replica tasks y el manager del swarm se encarga de distribuir la carga entre los nodos
* Para el cliente, el servicio luce como un docker daemon regular
* Los servicios son los que brindan escalabilidad y flexibilidad de updates
???
swarm = el plural de docker nodes&amp;hellip; manada/multitud/enjambre/nube
* temas avanzados pendientes: swarm, service discovery, pagina oficial, shipping yard, etc&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;operaciones-con-services&#34;&gt;Operaciones con services&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker service create \
  --name my-service \
  --replicas 3 \
  nginx:alpine

$ docker-compose scale service-name=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???
* services global/replicated&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;q-a&#34;&gt;Q &amp;amp; A&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;gracias&#34;&gt;Gracias!&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>proxies</title>
      <link>http://nicosommi.github.com/slide/proxies/</link>
      <pubDate>Mon, 24 Oct 2016 15:38:10 -0300</pubDate>
      
      <guid>http://nicosommi.github.com/slide/proxies/</guid>
      <description>

&lt;h1 id=&#34;proxies-en-es6&#34;&gt;Proxies en ES6&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;agenda&#34;&gt;Agenda&lt;/h2&gt;

&lt;p&gt;&lt;small&gt;
  Terminología&lt;br /&gt;
  Desarrollo&lt;br /&gt;
  Casos de uso&lt;br /&gt;
  Ejercitación&lt;br /&gt;
  Desarrollo&lt;br /&gt;
  Casos de uso&lt;br /&gt;
  Ejercitación&lt;br /&gt;
&lt;/small&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;terminología&#34;&gt;Terminología&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;¿Que es un proxy?&lt;br /&gt;
Origen: &lt;em&gt;prokecye&lt;/em&gt;&lt;br /&gt;
  &amp;ldquo;agency of one who acts instead of another&amp;rdquo;&lt;br /&gt;
En español significa &lt;em&gt;apoderado&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;adj.&lt;/em&gt; Dicho de una persona: Que tiene poderes de otra para representarla y proceder en su nombre&lt;/p&gt;

&lt;p&gt;???
Ejemplo, firmar un poder para hacer un trámite&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;¿Que es un protocolo?&lt;br /&gt;
Un &lt;em&gt;protocolo&lt;/em&gt; es un conjunto de normas. Esto podria verse como un conjunto interfaces con reglas para usarlas, y ECMAScript define un protocolo para manejar objetos. Este protocolo opera a nivel Meta.&lt;/p&gt;

&lt;p&gt;???
La definición no es la misma que suele utilizarse de protocolos para interfaces de otros lenguajes porque también incluye reglas.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Metaprogramming&lt;/em&gt;&lt;br /&gt;
En la programación hay niveles base y meta. El nivel base procesa el input del usuario, mientras que el meta procesa al base.&lt;/p&gt;

&lt;p&gt;???
Pueden incluso ser dos lenguajes distintos.
En es como los closures, los usamos sin saber.
Hay unos que usamos constantemente: Object.*&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Meta Object Protocol&lt;/em&gt;  es como se lo llama al protocolo de manejo de objetos de ECMAScript. Como particularidad, son internos (no son accesibles desde JS). Los engines pueden usarlos o no.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Los metodos de un objeto del MOP llaman operaciones del engine, algunas que llaman a otras como [[Get]], que se llaman &lt;em&gt;operaciones derivadas&lt;/em&gt; y las que son independientes, que se llaman &lt;em&gt;operaciones fundamentales&lt;/em&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;???
Ejemplo [[Get]] usa getOwnProperty, getPrototypeOf y Call&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Tipos de metaprogramming&lt;/em&gt;&lt;br /&gt;
- Introspection: permite sólo leer la estructura
- Self-modification: permite modificar la estructura
- Intercession: redefine la semantica de algunas operaciones&lt;/p&gt;

&lt;p&gt;???
Ejemplos Object.keys, moveProperty, proxy respectivamente&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Elementos del proxy&lt;/em&gt;&lt;br /&gt;
- target: es el fallback del handler, el representado
[[ProxyTarget]]
- handler: es quien, en caso de definir el método indicado, intercepta la llamada, el representante
[[ProxyHandler]]
- proxy: el que compone ambos y delega a uno u otro&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const proxy = new Proxy(target, handler); // OK
var p = Proxy(target, handler); // TypeError: calling a builtin Proxy constructor without new is forbidden
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???
El método del handler se llama trap.&lt;br /&gt;
Es decir que el proxy &amp;ldquo;wrappea&amp;rdquo; al target.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;class MyHandler {
  get(target, key, receiver) {
    return Reflect[key];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;???
Reflect no se puede instanciar, tiene los mismos metodos que el handler, es como Math, todo estatico
Por ejemplo Reflect.apply es menos verboso que Function.prototype.apply
Algunas veces nos da información adicional como Reflect.set -&amp;gt; [boolean]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;¿Que operaciones pueden ser interceptadas?&lt;/em&gt;&lt;br /&gt;
Esto es selectivo, no se puede interceptar todo o solo las fundamentales como podria suponerse.&lt;br /&gt;
Esto es por dos razones
- porque una operacion estable corre el riesgo de que un proxy la haga inestable
- porque tener mucho codigo custom intercalado haria el programa muy dificil de entender y debuggear&lt;/p&gt;

&lt;p&gt;???
ejemplo el === que no puede ser trapeada.
Estable: sin side effects, que produce siempre el mismo resultado ante los mismos argumentos&lt;br /&gt;
Se podría pensar como que con interceptar sólo operaciones fundamentales, pero esto no es tan útil ya que no inlcuiría get por ejemplo.
Ver codigo de api client.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Prototype chain&lt;/em&gt;&lt;br /&gt;
Los engines en su comportamiento habitual, al subir por el chain, van a disparar las traps que encuentren.&lt;br /&gt;
Sin embargo, hay ciertas operaciones que suben por el prototype chain si no encuentran la property en el handler como get, set y has, las demas no alteran el prototype chain.&lt;/p&gt;

&lt;p&gt;???
Ver codigo y test de ghost.
Instanceof &amp;ldquo;lies&amp;rdquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Básicas&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defineProperty(target, propKey, propDesc) // → boolean  (fundamental)
  // trigger: Object.defineProperty(proxy, propKey, propDesc)
deleteProperty(target, propKey) // → boolean  (fundamental)
  // trigger: delete proxy[propKey], delete proxy.foo
get(target, propKey, receiver) // → any
  // trigger: receiver[propKey]
  // trigger: receiver.foo
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Casos de uso&lt;/em&gt;
  * API Client
  * Tracing / Logging
  * Trap undefined property access
  * Type check&lt;/p&gt;

&lt;p&gt;???
  Señalar el tracing puede implementarse cambiando el objeto.
  Type check example: properties que son &amp;ldquo;fieles&amp;rdquo; a su tipo incial.
  Ir viendo ejemplos de api client, logging y lock&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Preguntas&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Practica 1&lt;/em&gt;&lt;br /&gt;
Hacer &amp;ldquo;trap undefined&amp;rdquo;&lt;br /&gt;
&amp;ldquo;Objeto que tira excepcion cuando se accede a una propiedad undefined&amp;rdquo;
(30 minutos)&lt;/p&gt;

&lt;p&gt;???
Debe tirar un ReferenceError si no esta. Debe devolver el valor si esta.
Probar nested with lock.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Compatibilidad&lt;/em&gt;
* Solo FF, CH, Edge, Opera, Safari 10, Node 6&lt;/p&gt;

&lt;p&gt;???
No hay polyfill.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Tipos de proxy&lt;/em&gt;
* Wrappers (solo control) o Virtual Objects (agregan comporamiento)&lt;/p&gt;

&lt;p&gt;???
Wrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Propiedades del proxy&lt;/em&gt;
* Transparencia virtual: no podemos saber si un objeto es un proxy
* Encapsulamiento: no podemos acceder al handler desde el proxy&lt;/p&gt;

&lt;p&gt;???
Wrappers se refiere a esos casos en los que intercepta para controlar el acceso al target, mientras que virtual se refiere a cuando agregan un comportamiento y el virtual object no importa (ejemplo, property check y RMI respectivamente)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Mas casos de uso&lt;/em&gt;
* DOM
* Indices negativos de array
* Data binding (polemico)
* Profiling
* RMI&lt;/p&gt;

&lt;p&gt;Note:
DOM: usualmente está implementado entre C++ y JS, y el context switch es costoso, lo que nos lleva a querer hacer el dom en js puro, pero hay cosas que no son tan simples de implementar, y ello fue una importante razon para hacer los proxies en JS (dom mas eficiente) y ademas que nos permite emular el browser (jsdom).&lt;/p&gt;

&lt;p&gt;Indices negativos como en algunos lenguajes.
Mencionar Object.observe (ES7) creado para binding por la pobre performance de los proxy, aunque abandonado por react.
Object.observe no es necesario con la inmutabilidad, tratar browser como remote rendering, no storage y query
(undo, state). Se dice que es lo que queremos, no lo que necesitamos (Stateful dom).
Profiling para medir tiempo.
RMI permite por ejemplo db access directo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Invariants&lt;/em&gt;&lt;br /&gt;
Si el target es no extensible y no configurable, lo invariante es forzado por el engine.&lt;/p&gt;

&lt;p&gt;???
no extensible protege objetos, non configurability protege properties.
Con los proxy se podría violar la invariabilidad, pero el engine lo prohibe chequeando los parametros y los resultados de los handlers, preventExtension, true y luego false, e igual para isExtensible y getOwnPropertyDescriptor&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Practica 2&lt;/em&gt;&lt;br /&gt;
Mejorar api client&lt;br /&gt;
(30 minutos)&lt;/p&gt;

&lt;p&gt;???
elegir algunos de los TODO&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Avanzadas 1&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getOwnPropertyDescriptor(target, propKey) // → PropDesc|Undefined  (fundamental)  
  // tby: Object.getOwnPropertyDescriptor(proxy, propKey)  
getPrototypeOf(target) // → Object|Null  (fundamental)  
  // tby: Object.getPrototypeOf(proxy)  
has(target, propKey) // → boolean  
  // tby: propKey in proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Avanzadas 2&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;isExtensible(target) // → boolean  (fundamental)  
  // tby: Object.isExtensible(proxy)  
ownKeys(target) // → Array&amp;lt;PropertyKey&amp;gt;  (fundamental)  
  // tby: Object.getOwnPropertyPropertyNames(proxy) (only uses string-valued keys)  
  // tby: Object.getOwnPropertyPropertySymbols(proxy) (only uses symbol-valued keys)  
  // tby: Object.keys(proxy) (only uses enumerable string-valued keys;
  // enumerability is checked via Object.getOwnPropertyDescriptor)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Avanzadas 3&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;preventExtensions(target) // → boolean  (fundamental)  
  // tby: Object.preventExtensions(proxy)  
set(target, propKey, value, receiver) // → boolean  
  // tby: receiver[propKey] = value  
  // tby: receiver.foo = value // propKey = &#39;foo&#39;  
setPrototypeOf(target, proto) // → boolean  (fundamental)  
  // tby: Object.setPrototypeOf(proxy, proto)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Para funciones&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apply(target, thisArgument, argumentsList) // → any  
  // tby: proxy.apply(thisArgument, argumentsList) (fundamental)  
  // tby: proxy.call(thisArgument, ...argumentsList)  
  // tby: proxy(...argumentsList)  
construct(target, argumentsList) // → Object  
  // tby: new proxy(..argumentsList)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;br /&gt;
* Performance
* Debug
* Casos de uso
* Complejidad
* Compatibilidad&lt;/p&gt;

&lt;p&gt;Note:
Performance: Conviene medir la performance en cada caso, evaluar que tan critica es la performance en nuestra app y tomar una decision.
A mas código interceptado, menor performance, mayor dificultad de entender el codigo y de debug.
Riesgo: podemos &amp;ldquo;romper&amp;rdquo; comportamientos, hacerlo inconsistente
Casos de uso:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Preguntas / Discusion / Ideas&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Gracias!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contenedores unicamente de volumenes en docker (volume only containers)</title>
      <link>http://nicosommi.github.com/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/</link>
      <pubDate>Wed, 07 Sep 2016 00:10:13 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2016/09/06/contenedores-unicamente-de-volumenes-en-docker-volume-only-containers/</guid>
      <description>&lt;p&gt;En estos dias estuve trabajando mucho con Docker para diversos proyectos, aprendiendo mucho en el camino, y note que hay un tema particular que me costo digerir.&lt;/p&gt;

&lt;p&gt;Los volumenes compartidos entre containers que necesitan permanecer en una ubicacion determinada del host son soportados de una manera extraña que se da casi por casualidad.&lt;/p&gt;

&lt;p&gt;Es decir, si quiero que mi container bindee una carpeta a una carpeta del host, esto es muy sencillo si quiero hacerlo para un solo container, basta con un argumento a docker run, como el siguiente&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;docker run -it -v /etc:/etc coreos/apache /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero que tal si quiero que esto suceda en varios servicios y a su vez utilizando docker-compose?&lt;/p&gt;

&lt;p&gt;Bueno esto tampoco es dificil, por ejemplo algo asi&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;version: &#39;2&#39;
services:
  webserver:
    image: coreos/apache
    volumes:
      - /etc:/etc
  app2:
    build: .
    volumes:
      - /etc:/etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podriamos utilizar los &amp;#8216;named&amp;#8217; volumes a nivel service para compartirlos, pero en ese caso no estariamos especificando el volume del host.&lt;/p&gt;

&lt;p&gt;Ahora bien, si este patron de mapeo de volumenes lo utilizamos varias veces, uno tiende a reutilizar el codigo, y aqui es donde he encontrado este patron muy utilizado que queria señalar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;version: &#39;2&#39;
services:
  data:
    image: tianon/true
    volumes:
      - /etc:/etc
  webserver:
    image: coreos/apache
    volumes_from:
      - data
  app2:
    build: .
    volumes_from:
      - data
  app3:
    image: postgres
    volumes_from:
      - data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bueno aqui ven el patron al que me refiero. Es extraño porque hay incluso imagenes en docker hub que son &amp;#8220;fake&amp;#8221; solo para generar esto (como la indicada, tianon/true). Si bien la idea del comando es realmente tomar los volumenes de otro container, esto lo he visto muchisimo, y es usado porque de esta manera queda mas significativo el mapeo que tomandolo de un container X particularmente (es decir queda mas claro al tomar volumes from &amp;#8216;data&amp;#8217; que tomarlos de &amp;#8216;webserver&amp;#8217;) y bueno porque de docker te dicen que lo hagas asi.&lt;/p&gt;

&lt;p&gt;Creo que vale la pena señalarlo ya que me costo mucho entender que en la version 2 del docker compose esto no tiene nada que ver con los volumenes (que estan pensados para compartir volumenes entre containers) y buscando en internet no suelen encontrarse tan facilmente desde este punto de vista, sino que uno tiene que &amp;#8220;deducir&amp;#8221; que esta es la &amp;#8220;mejor&amp;#8221; forma de utilizarlo, y entonces buscarlo de esta manera (volume only container o data volume container), porque en realidad esto si esta documentado &lt;a href=&#34;https://docs.docker.com/engine/tutorials/dockervolumes/#/creating-and-mounting-a-data-volume-container&#34;&gt;aqui&lt;/a&gt; y es uno de los pocos casos de uso que no cubre el nuevo volumes (segun &lt;a href=&#34;https://github.com/docker/docker/issues/17798&#34;&gt;este issue&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Como conclusion final vale la pena entonces destacar que en la version 2 del docker compose esto sigue utilizandose de la misma manera que la primer version, mas alla de la adicion de los volumes al YAML.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generation Driven Development – Introduction to the idea and to gddify</title>
      <link>http://nicosommi.github.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/</link>
      <pubDate>Fri, 27 May 2016 13:38:42 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify on github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nicosommi.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/&#34;&gt;leer este articulo en español&lt;/a&gt;&lt;figure id=&#34;attachment_639&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png&#34; alt=&#34;Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.&#34; width=&#34;300&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-639&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Keep your source code blocks updated on every software component on your architecture. Even if they belong to the same file.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: GDD and gddify are a work in progress.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Applications are concrete points of view. A point of view that is composed by other points of view. Those from every person that participates in their development. Specially the developers, who create the abstraction from the real information flow using a programming language.&lt;/p&gt;

&lt;p&gt;Points of view, or models, are the thing that is observed, plus an additional subjective load from the observer, a meta information. Payload and meta.&lt;/p&gt;

&lt;p&gt;Over the last year, many times I have created source code generators. Either using one of the template languages out there (swig, ejs, lodash, etc, etc) or using yeoman. Even with custom scripts.&lt;/p&gt;

&lt;p&gt;Also, over the last years, I saw how promises get into the equation on the async world. This javascript objects that promise us some information to be delivered in the future. I always though that this was a very interesting concept, and that it was very clever. Is not only that simplifies the way you can write functions, but also addresses ambiguity in the error handling mechanism. But better of all, it represents the reality better. This is the point which I want to take in order to explain GDD (generation driven development).&lt;/p&gt;

&lt;p&gt;As I said earlier, when generating source code, we (developers) are used to use some kind of templating language, or yeoman or some custom script. However, if we take a look at the reality, a template (God bless the templates, I will never criticize them after all that they did for me) is physically impossible, it just does not make any sense to put two things together on the same place and mix them up literally. The &amp;#8220;mix&amp;#8221;, in the reality, is like a cell-level genesis that grows.&lt;/p&gt;

&lt;p&gt;Someone may tell me here that, even if templates are not too close to the reality, they helped us to accomplish many objectives, even unimaginable. And that&amp;#8217;s true. Absolutely. But I think that a better picture of the reality here, like promises did, may also simplify the development process.&lt;/p&gt;

&lt;p&gt;But let&amp;#8217;s take a look at some common problems right now:&lt;/p&gt;

&lt;p&gt;&amp;#8211; microservices: a lot of overhead on maintenance because the number of projects that compose your architecture&lt;/p&gt;

&lt;p&gt;&amp;#8211; constant module update: it happens a lot that you use a module out there that may not be updated at the right time for you, you have to fork it and create your own.&lt;/p&gt;

&lt;p&gt;&amp;#8211; technology decisions: new utilities are released every day, some are the right choice for us and others don&amp;#8217;t, and the impact here is important because it may lead to a certain amount of refactor work later on&lt;/p&gt;

&lt;p&gt;&amp;#8211; unmaintained modules: it&amp;#8217;s a common case that some libraries are abandonware because of different reasons&lt;/p&gt;

&lt;p&gt;&amp;#8211; broken module compatibility: also, there are modules that relies on other modules, and wrappers-only-modules often don&amp;#8217;t get updated as fast as the original module, or when they change the version and the interface gets changed too in some way and now we need to adapt all of our projects.&lt;/p&gt;

&lt;p&gt;&amp;#8211; repeated source code patterns: there are source code patterns that we repeat over and over on our components&lt;/p&gt;

&lt;p&gt;&amp;#8211; build a generator: is something new and you have to learn how to use it, how to test it, or use some third party generator and learn how it works (like MEAN)&lt;/p&gt;

&lt;p&gt;&amp;#8211; template issues: IDE&amp;#8217;s are not prepared to parse two languages in the same file on most cases&lt;/p&gt;

&lt;p&gt;All these are reasons made me think that there is something better out there. There are things to improve.&lt;/p&gt;

&lt;p&gt;Going back to points of view. Applications are concrete points of view. So, if we think on how to generate more points of view, we will need to pay special attention to the meta information, which are the perception of the reality, to create and maintain other similar perceptions. We need to observe the observer in order to create it.&lt;/p&gt;

&lt;p&gt;From this idea I created this development practice that I called GDD, which stands for Generation Driven Development, which is just to add meta information on the source code that is needed in order to generate it again but with little differences, using the main meta information tool on source code: the comments.&lt;/p&gt;

&lt;h2 id=&#34;which-is-that-necessary-information&#34;&gt;Which is that necessary information?&lt;/h2&gt;

&lt;p&gt;This can be a long discussion and surely with time and maybe the collaboration of the community I will find things that today I do not see.&lt;/p&gt;

&lt;p&gt;Actually, the tool that I created to implement GDD, gddify, supports the thing that my experience told me (my current point of view to create points of view). So let&amp;#8217;s take a look at those elements one by one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;sw component (swComponent)&lt;/em&gt;: a software component that contains software blocks. A project. Examples: a webapp, an API, a microservice, or any project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;sw block (swBlock)&lt;/em&gt;: a sw block, a group of files inside a software component with a particular purpose. For example, the files that build the source code into the compiled code (in the js world, maybe gulp related files), or the files involved in a SCUDL (even specs!), or any other group that means something logically or practically to our architecture.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;source code files&lt;/em&gt;: this is the minimum unit for generation. a file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure id=&#34;attachment_630&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png&#34; alt=&#34;place holders&#34; width=&#34;300&#34; height=&#34;255&#34; class=&#34;size-medium wp-image-630&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Inside place holders, that content will be always the same for that particular file even after updates&lt;/figcaption&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;place holders&lt;/em&gt;: This are source code blocks that keep their content the same for that specific file. It is delimited with meta information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example using gddify (js)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph constructor */
constructor () {
  this.name = &#39;nico&#39;
}
/* endph */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;replacements&lt;/em&gt;: objects with information for replacements, which will be used in the synchronization. Their current attributes in gddify are name (which will be used to match the same point from other files), regex (regular expression, which is used to synchronize other files with this one) and value (which is the value for that replacement here in this file).&lt;/p&gt;

&lt;p&gt;Example using gddify (js), please notice that this replacement information is contained inside a special placeholder called replacements and that their attributes are comma separated, and one per line.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph replacements &lt;em&gt;/
/&lt;/em&gt; name, /myClass/g, myClass &lt;em&gt;/
/&lt;/em&gt; endph */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_629&#34; style=&#34;width: 280px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png&#34; alt=&#34;replacements&#34; width=&#34;280&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-629&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w&#34; sizes=&#34;(max-width: 280px) 85vw, 280px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;a replacement example&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;stamps&lt;/em&gt;: source code blocks shared across components. They keeps always the same content. But, they can be ignored from files.&lt;/p&gt;

&lt;p&gt;Example using gddify (js)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* stamp toJson &lt;em&gt;/
toJSON () {
  return { name: this.name }
}
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_631&#34; style=&#34;width: 199px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png&#34; alt=&#34;stamps&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-631&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w&#34; sizes=&#34;(max-width: 199px) 85vw, 199px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Stamps are code blocks shared and immutable across components (that can be ignored)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;ignoring stamps&lt;/em&gt;: array of names of stamps that will be ignored on this file.&lt;/p&gt;

&lt;p&gt;Example using gddify (js). Notice that, like replacements, ignored stamps are contained in a special place holder called ignoringStamps.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph ignoringStamps &lt;em&gt;/
/&lt;/em&gt; toJson, parse &lt;em&gt;/
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_632&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png&#34; alt=&#34;Ignoring stamps&#34; width=&#34;300&#34; height=&#34;244&#34; class=&#34;size-medium wp-image-632&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Ignoring stamps are those code blocks that we do not want to show this particular file&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The description of this software components on the right way, will allow us not just create more components, but also combine blocks, and keep them updated, with no additional effort building generators, and with just one programming language, and with no templates. That is the value that this way of development has, thanks to the change on the model which is at my opinion, better to address these common problems of today.&lt;/p&gt;

&lt;p&gt;I consider that GDD has the potential to lower that cost considerably, because it allows you to share code blocks across projects, keeping them up to date easily, and thus brings microservices and other kind of complex architectures that requires modularization to everyone and not only to those who can pay high expenses on development. Improve applications quality and price. That is my personal objetive and the compromise and vision of &lt;a href=&#34;http://integracionesagiles.com&#34;&gt;Integraciones Agiles&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a simple introduction to the model of visualizing the problem, soon I will publish more details on the usability, on how to get used to the process, common issues, use cases, more code examples, and much more.&lt;/p&gt;

&lt;h2 id=&#34;contribute&#34;&gt;Contribute&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m doing this open source without making any money, so in order to keep dedicating time to this kind of projects I need the support of the community. Please do no hesitate to contact me for contributions to the idea, to the source code, donations, services, consultancy or business.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://integracionesagiles.com&#34;&gt;http://integracionesagiles.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify en github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generation Driven Development – Introducción a la idea y a gddify</title>
      <link>http://nicosommi.github.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/</link>
      <pubDate>Thu, 26 May 2016 00:08:30 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2016/05/25/generation-driven-development-introduccion-a-la-idea-y-a-gddify/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify en github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nicosommi.com/index.php/2016/05/27/generation-driven-development-introduction-to-the-idea-and-to-gddify/&#34;&gt;read this article in english&lt;/a&gt;&lt;figure id=&#34;attachment_639&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png&#34; alt=&#34;Mantenga los bloques de codigo en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.&#34; width=&#34;300&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-639&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/sync-300x300.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync-150x150.png 150w, http://www.nicosommi.com/wp-content/uploads/2016/05/sync.png 512w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Mantenga los bloques de código en sus componentes de software actualizados. Incluso perteneciendo al mismo archivo.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota: GDD y gddify son un trabajo en curso.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Las aplicaciones, son ni mas ni menos que materializaciones de un punto de vista. Un punto de vista que esta compuesto por los puntos de vista de los participantes del desarrollo de la misma. Sobre todo de los programadores que son quienes crean entidades que abstraen el comportamiento real del flujo de la información a lenguajes de programación.&lt;/p&gt;

&lt;p&gt;Los puntos de vista, o modelos, se podría decir que son lo observado, mas una carga subjetiva del observador, una meta información. Para los mas técnicos: payload y meta.&lt;/p&gt;

&lt;p&gt;Durante los últimos años me vi muchas veces desarrollando generadores de código. Ya sea utilizando templates (de los miles que hay), o con yeoman (que esta de moda y utiliza templates), o con algún script personalizado.&lt;/p&gt;

&lt;p&gt;También, durante los últimos años, he visto el avance de las Promesas. Estos objetos de javascript que nos prometen la entrega de algo a futuro. Este concepto me pareció siempre muy interesante, y acertado a la vez. Es que no sólo simplifica el modo de escribir funciones, también elimina ambigüedades. Pero por sobre todo, representa mejor la realidad. Y esto es lo que me quiero llevar para explicar GDD (Generation Driven Development).&lt;/p&gt;

&lt;p&gt;A la hora de generar codigo, los programadores estamos acostumbrados ya a usar templates, a utilizar yeoman, o a hacer cosas raras. Sin embargo, si observamos la realidad, un template (benditos templates no me animaría a criticarlos&amp;#8230; despues de tantas veces que me han salvado!) es mas bien algo totalmente imposible en el mundo físico, sencillamente no tiene sentido poner dos cosas en el mismo lugar de manera literal. La &amp;#8220;mezcla&amp;#8221;, en la realidad se produce por ejemplo, por reproducción a nivel celular que luego, crece.&lt;/p&gt;

&lt;p&gt;Ahora bien, alguien podria decir que si bien no sea una fiel representacion de la realidad, los templates han servido a numerosos objetivos y aun lo hacen. Es totalmente cierto. Pero creo que una representación de la realidad mas atinada, como lo hicieron las promesas, tambien simplificara el proceso de desarrollo.&lt;/p&gt;

&lt;p&gt;Toda esta introducción, sumada a necesidades actuales como los microservicios que tiene una carga de mantenimiento de muchos proyectos muy grande (de hecho sigue el single responsibility pattern o patrón de responsabilidad simple), las constantes actualizaciones de librerías, las librerías abandonadas, las compatibilidades que se rompen, la lisa y llana repetición de patrones de operaciones, etc, etc. y ademas sumado a la carga que lleva hoy en dia el desarrollo de generadores, el bajo nivel de test (o de alto esfuerzo en su realizacion) que se puede efectuar sobre los templates y su bajo soporte por los IDE&amp;#8230; todo esto como decia, me ha llevado a pensar en que allí había algo por mejorar.&lt;/p&gt;

&lt;p&gt;Volviendo a lo de los puntos de vista. Las aplicaciones son puntos de vista concretos. Ahora bien, si pensamos en generar como siendo esto generar mas puntos de vista, debemos prestar especial atención a la meta información de dichos puntos de vista, que son la percepción de la realidad, para crear y mantener otras percepciones similares. Debemos observar al observador para recrearlo.&lt;/p&gt;

&lt;p&gt;De este concepto, he creado esta practica de desarrollo que llame GDD, que no es ni mas ni menos que añadir en el código fuente, información necesaria para poder generarlo, utilizando como principal herramienta el principal elemento para la meta información del código fuente: los comentarios.&lt;/p&gt;

&lt;h2 id=&#34;cual-es-la-informacion-necesaria&#34;&gt;Cual es la informacion necesaria?&lt;/h2&gt;

&lt;p&gt;Eso puede ser una larga discusion y seguramente con el paso del tiempo y quizas con la colaboracion de la comunidad podre encontrar cosas que aun no he detectado. Actualmente, en la herramienta para implementar GDD que he desarrollado, gddify, he agregado soporte para lo que mi experiencia me ha marcado (mi punto de vista actual para generar puntos de vista), veamos estos elementos uno a uno:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;componente sw (swComponent)&lt;/em&gt;: es un componente software, que consta de bloques sw. Un proyecto. Por ejemplo, una aplicacion web, un api, un microservicio, o cualquier proyecto.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;bloques sw (swBlock)&lt;/em&gt;: es un bloque de software, un conjunto de archivos dentro de un componente, con una funcion particular. Por ejemplo, los archivos de codigo que ejecutan el build, los archivos de un CRUD (o SCUDL), o cualquier otra agrupacion que tenga un significado logico o practico para nuestra arquitectura.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;archivo de codigo fuente (source code files)&lt;/em&gt;: este es la unidad base de sincronizacion/generacion. Es un archivo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure id=&#34;attachment_630&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png&#34; alt=&#34;place holders&#34; width=&#34;300&#34; height=&#34;255&#34; class=&#34;size-medium wp-image-630&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion-300x255.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/ph.portion.png 466w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Dentro de los place holders, se mandentra el codigo del archivo actual a pesar de las actualizaciones&lt;/figcaption&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;contenedores (place holders)&lt;/em&gt;: estos son bloques de codigo que mantienen su contenido siempre para el archivo actual, mas alla de las sincronizaciones que pudiesen ocurrir con otros archivos. Se delimita con meta informacion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ejemplo de implementacion en gddify (js)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph constructor */
constructor () {
  this.name = &#39;nico&#39;
}
/* endph */
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;reemplazos (replacements)&lt;/em&gt;: objetos de informacion para reemplazos, que seran utilizados en la sincronizacion. Sus atributos actuales en gddify son name (nombre, que se utilizara para encontrar correspondencias entre archivos), regex (expresion regular de javascript que utilizaran otros archivos para sincronizarse con este), y value (valor que este archivo tendra en esos reemplazos).&lt;/p&gt;

&lt;p&gt;Ejemplo de implementacion en gddify (js), notar que es esta contenido dentro de un placeholder especial denominado replacements, y que sus atributos estan separados por comas. Habra una linea para cada atributo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph replacements &lt;em&gt;/
/&lt;/em&gt; name, /myClass/g, myClass &lt;em&gt;/
/&lt;/em&gt; endph */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_629&#34; style=&#34;width: 280px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png&#34; alt=&#34;replacements&#34; width=&#34;280&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-629&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion-280x300.png 280w, http://www.nicosommi.com/wp-content/uploads/2016/05/replacements.portion.png 425w&#34; sizes=&#34;(max-width: 280px) 85vw, 280px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;un ejemplo complejo de reemplazos&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;estampas (stamps)&lt;/em&gt;: bloques de codigo que no cambiaran para ninguno de los archivos sincronizados, pero que pueden ser omitidos con otro objeto denominado ignoringStamps (siguiente)&lt;/p&gt;

&lt;p&gt;Ejemplo en gddify (js)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* stamp toJson &lt;em&gt;/
toJSON () {
  return { name: this.name }
}
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_631&#34; style=&#34;width: 199px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png&#34; alt=&#34;stamps&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-631&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion-199x300.png 199w, http://www.nicosommi.com/wp-content/uploads/2016/05/package.js.portion.png 583w&#34; sizes=&#34;(max-width: 199px) 85vw, 199px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Los stamps son bloques de codigo compartidos e inmutables entre componentes (pero que se pueden ignorar)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;estampas ignoradas (ignoringStamps)&lt;/em&gt;: array de nombres de estampas cuyo contenido este archivo no incluira si apareciesen en una sincronizacion con otro archivo.&lt;/p&gt;

&lt;p&gt;Ejemplo en gddify (js). Notar que al igual que los reemplazos, se encuentra dentro de un place holder especial, en este caso denominado ignoringStamps&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* ph ignoringStamps &lt;em&gt;/
/&lt;/em&gt; toJson, parse &lt;em&gt;/
/&lt;/em&gt; endstamp */
&lt;/code&gt;&lt;/pre&gt;&lt;figure id=&#34;attachment_632&#34; style=&#34;width: 300px&#34; class=&#34;wp-caption alignnone&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png&#34; alt=&#34;Ignoring stamps&#34; width=&#34;300&#34; height=&#34;244&#34; class=&#34;size-medium wp-image-632&#34; srcset=&#34;http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion-300x244.png 300w, http://www.nicosommi.com/wp-content/uploads/2016/05/gulpfile.ignoringstamps.portion.png 591w&#34; sizes=&#34;(max-width: 300px) 85vw, 300px&#34; /&gt;&lt;figcaption class=&#34;wp-caption-text&#34;&gt;Ignoring stamps son aquellos bloques inmutables que no queremos mostrar en este archivo en particular&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;La descripción de estos componentes de software de manera correcta, nos permitirá no solo generarlos en el futuro, sino generar particularmente bloques individuales pudiendo combinarlos, y ademas mantenerlos actualizados, sin esfuerzo adicional en la construcción de generadores, y en un solo lenguaje sin templates. He allí el valor que creo que este modo de desarrollar tiene gracias al cambio de modelo con el que ataca el problema que considero es mas cercano a al sentido común.&lt;/p&gt;

&lt;p&gt;Actualmente una arquitectura de microservicios tiene una desventaja muy importante que es la dificultad de mantenimiento. Esto ocurre mas alla del delivery continuo, de la integración continua, etc. Esto es debido a lo costoso de mantener muchos proyectos.&lt;/p&gt;

&lt;p&gt;Por otro lado, este trabajo genera des-sincronizacion por falta del adecuado mantenimiento, impactando en la calidad de los componentes producidos.&lt;/p&gt;

&lt;p&gt;Considero que GDD tiene el potencial de disminuir ese costo considerablemente ya que permite compartir bloques de código y archivos entre proyectos, manteniendolos actualizados de manera sencilla, y asi acercar los microservicios y otras arquitecturas complejas que requieren modularización a todo el mundo y no solo a quienes puedan afrontar altos gastos en el departamento de sistemas. Mejorar el mundo de las aplicaciones en calidad y precio. Ese es mi objetivo personal y el compromiso y la visión de &lt;a href=&#34;http://integracionesagiles.com&#34;&gt;Integraciones Agiles&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Esto es una simple introducción al modelo de visualizar el problema, pronto publicare mas detalles de la usabilidad del mismo, de como acostumbrarse, problemas frecuentes, ejemplos de aplicación, códigos de ejemplo, y mucho mas.&lt;/p&gt;

&lt;h2 id=&#34;colaboración&#34;&gt;Colaboración&lt;/h2&gt;

&lt;p&gt;Me encuentro desarrollando esto de manera open source y sin ganar dinero a cambio, y para poder continuar dedicando tiempo a estos proyectos, necesito el aporte de la comunidad. Por favor no dude en contactarme si esta interesado en temas de donaciones, servicios, consultoria, negocios, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://integracionesagiles.com&#34;&gt;http://integracionesagiles.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/gddify&#34;&gt;gddify en github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A common pitfall when using “global” (not really) CLI’s in your node.js project (like gulp)</title>
      <link>http://nicosommi.github.com/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/</link>
      <pubDate>Wed, 30 Mar 2016 16:47:00 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2016/03/30/a-good-way-to-use-global-not-really-clis-in-your-node-js-project-like-gulp/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&amp;#8220;Little things can make a big difference.&amp;#8221;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“Little things can make a big difference.” I’m sure you heard that phrase a lot. Well there are cases in which that is true. And this is, at my opinion, one of those cases. Some people know about this detail I&amp;#8217;m going to talk about, but most people don’t.&lt;/p&gt;

&lt;p&gt;Why? Almost everyone, including me until recently, when they decide to use a tool, like gulp, on one of their node.js projects, they creates a gulp file on the project root with some tasks like “test” on it for example, and then run something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;gulp test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Right?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well. I understand you if that&amp;#8217;s your case, because they tell you to do so in the official documentation. I did the same some time ago. But, in most cases, that&amp;#8217;s a bad thing to do. I will say that you should stop doing that ASAP.&lt;/em&gt; Not the gulpfile, that&amp;#8217;s ok, but I have what I think it is a solid set of arguments against using gulp as a top level task runner (I mean installed globally). &lt;em&gt;Let me explain you why.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Firstly, I want my node.js project to be cloned and executed right away. Period. &lt;em&gt;I do not want the container / user / developer / anybody to install something globally on their environments&lt;/em&gt; besides of the natural requirements for that technology. Because &lt;em&gt;is just unrelated&lt;/em&gt; to my node.js project environment. It&amp;#8217;s not a global dependency, it is a local dependency&lt;strong&gt;.&lt;/strong&gt; The flow should be something more like: git clone, npm install, npm test. &lt;em&gt;And that&amp;#8217;s it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let&amp;#8217;s imagine this situation for a minute.&lt;/em&gt; I&amp;#8217;m making public modules relying on the global gulp. On the other hand, you&amp;#8217;re a developer and you&amp;#8217;re new to node.js&amp;#8230; then you start with some project and you decide to clone one of my modules. Now, suddenly, if you want to run the test or maybe do some other task like contributing to my project, you need to install some global tool called, in this example, gulp. So now you need to read lot&amp;#8217;s of docs to know what it is and how it works. &lt;em&gt;All right, I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&amp;#8217;s also unfair for those developers who don&amp;#8217;t know about our custom tool preference or they just don&amp;#8217;t want to learn it. So by doing this, you&amp;#8217;re not just creating a dependency for your projects in your environments but also for the users/potential contributors of your module if it&amp;#8217;s a public module, or the developers in your team if it&amp;#8217;s not.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I would say that coupling gulp learning curve to my node.js modules is not intuitive and it&amp;#8217;s also unfair for those developers who don&amp;#8217;t know about our custom tool preference or they just don&amp;#8217;t want to learn it. So by doing this, you&amp;#8217;re not just creating a dependency for your projects in your environments but also for the users&lt;em&gt;/potential contributors&lt;/em&gt; of your module if it&amp;#8217;s a public module, or the developers in your team if it&amp;#8217;s not.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wait, this is not just some hedonistic crap. And it&amp;#8217;s not just me believing it&amp;#8217;s better. That thing can hurt your open source strategy and it can make you lose time with your team.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And there are even more real conflicts with this&amp;#8230; specifically with module versions.&lt;/em&gt; If you don&amp;#8217;t believe me, just start playing with babel versions 5, 6 along with gulp versions 2 and 3 in two or three different projects, and you will face a lot of problems. Because you&amp;#8217;re sharing dependency versions among projects by using a global CLI. Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &amp;#8220;is this CLI a real global dependency or is related to my projects individually?&amp;#8221;. Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, &lt;strong&gt;&lt;em&gt;making you lose time and money&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You may think, well anyway I just have a few projects and if I refresh one I can just refresh all of them. Well if you grow you will have troubles this is a side effect on the team plan. It&amp;#8217;s creating unexpected efforts. And it may be not so easy to figure out which versions are failing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_**Gulp (like almost any other popular CLI in node.js) is not really a global CLI, is a dependency of each one of your projects. So on each case you really need to ask to yourself &amp;#8220;is this CLI a real global dependency or is related to my projects individually?&amp;#8221; Because if you decide this wrong, this may force you to update your old projects after you update one, or switch constantly global CLI versions, and this task can be very annoying, &lt;strong&gt;&lt;em&gt;making you lose time and money&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;**_&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if gulp get a really amazing development process in which they fully stick to backwards compatibility, this is not a recommended practice at all, mainly because you are creating a node.js project, not a gulp project. And it does not depend on one framework as I told you with the babel/gulp letal combination. &lt;em&gt;I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;I remember that day. We literally had to refresh all our modules because they suddenly started to fail in the continuous integration server when the environment changed.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Introduction to the &amp;#8220;trivial&amp;#8221; solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Node.js comes with the npm binary built in&lt;/em&gt;. Npm supports, via package.json, running scripts in different stages or phases and also custom scripts. Also, some packages like gulp have a binary link for which &lt;em&gt;npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;npm creates a symbolic link automatically on a project scoped bin folder and npm run includes those links in the PATH automatically for the scripts in the package.json.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see a reference here &lt;a href=&#34;https://docs.npmjs.com/cli/run-script&#34;&gt;https://docs.npmjs.com/cli/run-script&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks.&lt;/em&gt; And, luckily, that is transparent to us.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;So the point is to use the local gulp binary link in the package.json as a shortcut for executing your internal gulp tasks&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;How to do this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well basically, let&amp;#8217;s say you want to replace your &lt;em&gt;gulp test&lt;/em&gt; command so you don&amp;#8217;t need a global gulp&amp;#8230; well ok, then simply add this to your scripts section of your package.json&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;...(content on your package.json)...
&#34;scripts&#34;: {
&#34;test&#34;: &#34;gulp test&#34;
}
...(more content on your package.json)...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;And that&amp;#8217;s it!&lt;/strong&gt; With that line now you just need a node js regular environment with nothing installed globally on it, like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;npm test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trivial? Well not so fast. This is the small detail. If you read the npm documentation, maybe you are doing this already. But according to my experience and what I see out there, some people do this but they don&amp;#8217;t know what happens behind the scenes and most people just use the global gulp&lt;em&gt;. This npm test command is not executing the global gulp. The better way to experiment this is just uninstalling the global gulp. And please do that ASAP!&lt;/em&gt; &lt;em&gt;You just need to install gulp (or the CLI you want to make local) locally&lt;/em&gt; in your project before you execute the script through &lt;strong&gt;npm run&lt;/strong&gt;&amp;#8230; remember that. So this is picking the link from the PATH that points to the node_modules version of gulp of your project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;npm uninstall -g gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;**&lt;em&gt;This npm test command is not executing the global gulp.&lt;/em&gt; The better way to experiment this is just uninstalling the global gulp. And please do that ASAP! You just need to install gulp (or the CLI you want to make local) locally&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;**Sugar for complex cases&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;As I said earlier, you can use custom scripts (meaning any name you want) on the scripts element on your package.json. If that&amp;#8217;s your case, after you added it on your package.json, you need can run that custom npm script with this command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javacript&#34;&gt;npm run gulp yourcustomtask
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here, an elegant ultimate approach that let you execute any gulp task you may have with the bin symbolic link fix with a command like &lt;strong&gt;&lt;em&gt;npm run gulp anytask&lt;/em&gt;&lt;/strong&gt;, check it out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;...(content on your package.json)...
&#34;scripts&#34;: {
&#34;test&#34;: &#34;gulp test&#34;,
&#34;gulp&#34;: &#34;gulp&#34;
}
...(more content on your package.json)...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Other examples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And as I mentioned I&amp;#8217;m not talking about just gulp, eslint is another good example of this concept but in a slightly different way, you can configure your IDE to use some global eslint set of rules, but &lt;em&gt;every project may have different rules, and this is a real conflict too because one maybe is in es5 and the other one in ECMAScript 2015&lt;/em&gt;, and there lots of examples. &lt;em&gt;Grunt also applies&lt;/em&gt;&lt;strong&gt;,&lt;/strong&gt; you can stop using the global grunt by following this steps too (installing grunt-cli locally instead). Want more? Mocha, some Babel versions. And the list is long. Of course, they are creating a module, they want it to be easy so more developers adopt it. And it’s true, it works, they get more engagement on their modules. But at some point we need to know where to stop and grow from our experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So in conclusion, I think every project should be self sufficient, self configured, and this approach tries to tackle that. If you create a node.js project you need to stick to the node.js interpreter as a requirement. Nothing global except for that container platform itself which is a natural requirement for your scripts. In this way, if some day another task runner came out and kills gulp, or any pseudo global CLI, you can smoothly switch to the new one. Also you don&amp;#8217;t couple the learning curve from the CLI to your module user&amp;#8217;s, and you don&amp;#8217;t share CLI dependencies between your different projects you may have, letting you have different project with different versions without forcing you to refresh them all.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Please any comment, suggestion, typo, send it to nicosommi@gmail.com&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How, adopting cucumber js and other agile practices, can help you improve your development process</title>
      <link>http://nicosommi.github.com/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/</link>
      <pubDate>Wed, 21 Oct 2015 14:47:35 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2015/10/21/how-adopting-cucumber-js-and-other-agile-practices-can-help-you-improve-your-development-process/</guid>
      <description>

&lt;h2 id=&#34;how-s-that&#34;&gt;How’s that?&lt;/h2&gt;

&lt;p&gt;Well, I just experienced that last month, we were chatting with Dallas and after a discussion about our cucumber &lt;strong&gt;features&lt;/strong&gt; I said to him “So cucumber made our scrum better, how about that?” so he told me to write about that and I think that is actually an interesting experience to share.&lt;/p&gt;

&lt;p&gt;We started using agile practices with our team at the very beginning of our project. Very soon we started using &lt;strong&gt;cucumber&lt;/strong&gt; (first time for me), because our team used it before in Ruby and they were happy with it. And &lt;strong&gt;there is a JS version&lt;/strong&gt; for it. Oh yes it is, and it works pretty well. Read more &lt;a href=&#34;https://cucumber.io/docs/reference/javascript&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;but-why-cucumber&#34;&gt;But… why cucumber?&lt;/h2&gt;

&lt;p&gt;Well, first off it’s convenient for executives so you can easily start using it, because they can actually understand what’s going on without a deep technical/specific knowledge, and they can see better the things the team had done with a quick look. And because of that, now communication with executives is better, and you can practice a better scrum, which can have a great impact for programmers and for the final product. And that’s a fact that everyone who worked with agile practices knows. Of course you can find a better explanation about cucumber itself by looking their &lt;a href=&#34;https://cucumber.io/&#34; target=&#34;_blank&#34;&gt;homepage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was a great decision for us.&lt;/p&gt;

&lt;h2 id=&#34;other-tools-and-practices&#34;&gt;Other tools and practices?&lt;/h2&gt;

&lt;p&gt;Yes. &lt;a href=&#34;http://martinfowler.com/bliki/TestDrivenDevelopment.html&#34; target=&#34;_blank&#34;&gt;TDD&lt;/a&gt;/BDD, &lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34; target=&#34;_blank&#34;&gt;test coverage&lt;/a&gt; and &lt;a href=&#34;https://www.bithound.io/&#34; target=&#34;_blank&#34;&gt;source code quality&lt;/a&gt; controls. All those practices/tools were helpful. It’s not just cucumber.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Well this article is not a pro scrum nor a pro cucumber article. I think they are great, but is not what I want to talk about in this post. Also, this experience perse is nothing new, I just found interesting to point out how we saw it. So what &lt;strong&gt;I&lt;/strong&gt; really &lt;strong&gt;want&lt;/strong&gt; &lt;strong&gt;to share&lt;/strong&gt; is &lt;strong&gt;this particular experience,&lt;/strong&gt; in which cucumber, in combination with those other practices and tools actually made our scrum, better.&lt;/p&gt;

&lt;p&gt;We already made a lot of improvements to our agile framework.&lt;/p&gt;

&lt;p&gt;Like for example we recently started to work with one dashboard per team instead of one per project like we did before (it sounds dumb to me now I mention that, but you can just work on one prioritized list at a time… otherwise priorities lose sense, but is a common mistake that some people, to think that they are doing better because now developers can work on a lot of stuff but it’s wrong, because they are now confused wasting lots of time with context switch tasks).&lt;/p&gt;

&lt;p&gt;Also we changed the way we create our stories to be those who strictly add business value to our application (before this, what we usually do was to create technical chores as user stories with points, another common mistake that leads to finish sprints without any real business value to the end user… which defeats the whole purpose of scrum, dummy mistake).&lt;/p&gt;

&lt;p&gt;But recently we discovered a new issue on our development process: **shared features. And that’s what I want to talk about.&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;h2 id=&#34;ok-but-technically-speaking-how-it-happened&#34;&gt;Ok, but technically speaking, how it happened?&lt;/h2&gt;

&lt;p&gt;Well we experienced it with the authentication/authorization &lt;strong&gt;feature&lt;/strong&gt; &lt;em&gt;-gherkin speaking-&lt;/em&gt; (which is maybe the better example because of how scrum create user stories for many people, based on roles and creating the “walking skeleton” from that point of view).&lt;/p&gt;

&lt;p&gt;So the User Stories usually says something like “As a user/admin/whatever I want to do something”, all right? But anyway the common thing is to create one story for that. But it&amp;#8217;s actually mixed: authentication, authorization, and the particular “something” for that story.&lt;/p&gt;

&lt;p&gt;At first, we were doing special cucumber &lt;strong&gt;scenarios&lt;/strong&gt; on each cucumber &lt;strong&gt;feature&lt;/strong&gt; to test roles, token expiration, and so on (they have different messages, HTTP statuses, etc). There was no direct functionality related to it, as I said, it’s a cross service shared functionality. An aspect of the user story. Take this feature for item creation as an example (simplified):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Given a valid access token
When a new item creation request is received
Then create a new item on the list

Given an invalid access token
When a new item creation request is received
Then throw an unauthorized error

Given an expired access token
When a new item creation request is received
Then throw an expired token error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see &lt;strong&gt;in this example feature&lt;/strong&gt;, there is &lt;strong&gt;one different scenario per authorization&lt;/strong&gt; &lt;strong&gt;scenario on each business&lt;/strong&gt; &lt;strong&gt;feature&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It turns out that when we created the first feature for the first user story, we just made an inline authentication and authorization source code, which is the common path to follow when practicing a TDD/BDD approach.&lt;/p&gt;

&lt;p&gt;On the second feature, on the final refactor step, and with the help of some source code quality check tool like bithound or code climate detecting code duplicates afterwards on our commits, we moved that logic into a common space with some common design techniques for reusability. In this particular node case it was just a separate file with the common authentication/authorization function.&lt;/p&gt;

&lt;p&gt;Later, we split up our service into many services, so to different repositories&amp;#8230; and I was actually writing the source code of a specific integration chore to provide authorization/authentication to the first particular brand new service, and again because TDD/BDD, I quickly realized that I needed to create a superfluous unrelated cucumber feature to test that. Let&amp;#8217;s say the item creation feature that I shown previously.&lt;/p&gt;

&lt;p&gt;Well. That was the signal. I realized &lt;strong&gt;that having the same cucumber scenario over and over on several features implies lots of cucumber steps (test related source code) actually testing the same portion of code&lt;/strong&gt;. If you use istanbul or some other test coverage tool like I do, you will probably understand what I&amp;#8217;m talking about. The same branches are being tested twice or N-times being N the feature quantity &lt;strong&gt;in which you actually remember to test that&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So when the &amp;#8220;chore&amp;#8221; was completed it was obvious that, if we had a particular special feature for it, let&amp;#8217;s say an access token/authorization feature (which implies a user story with points), we can test more scenarios and save scenarios for other business features. For example, in this case&amp;#8230; using an expired token, or a wrong one, or no token at all, those scenarios can now be tested just in one feature for it, and on every other feature it will be implied with just two trivial scenarios that just test that the function is present on that particular feature (that the branch exist on that particular service, and I said two are needed because just one could throw a false positive).&lt;/p&gt;

&lt;p&gt;So our new business feature like item creation became something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Given a valid access token
When a new item creation request is received
Then create a new item on the list

Given a invalid access token
When a new item creation request is received
Then throw an unauthorized error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we created another feature for the authorization and authentication like this one&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Given a valid access token
When a generic message is received
Then respond ok

Given a invalid access token
When a generic message is received
Then throw an unauthorized error

Given a expired access token
When a generic message is received
Then throw an unauthorized error

Given a absent access token
When a generic message is received
Then throw an unauthorized error

Given an incomplete access token
When a generic message is received
Then throw an unauthorized error with a custom message
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In short terms,  you need a user story for this kind of shared feature.&lt;/p&gt;

&lt;p&gt;Now you may think &amp;#8220;Ey well, don&amp;#8217;t try to change the business (user stories) from the source code, it&amp;#8217;s just better to test what the business says, don&amp;#8217;t touch the user stories and if you have to write more source code, well just write it and shut up&amp;#8221;. And that&amp;#8217;s ok. But I don&amp;#8217;t want to change the business. I just think &lt;strong&gt;that there is a better model to approach it&lt;/strong&gt;. It saves work, increasing productivity (not writing unnecessary steps that tests the code already tested) and increasing also the final product quality (writing scenarios that may came out by getting deep into the newly created feature for the shared feature like in this case the custom error message on a incomplete access token).&lt;/p&gt;

&lt;p&gt;Also we realized that the authentication actually has a business value by itself. Now our API is more secure. So we definitely changed that chore into a user story with points instead.&lt;/p&gt;

&lt;p&gt;This is just one more concrete example on how cucumber act as a bridge between the technical (source code) aspect and the business aspect (or the user story), and this is done in two ways, not just one, and I mean not just to make it more understandable for non-technical people but also showing the business better to the technical people so now developers can improve their workflow to be smoother. But you need to use the right tools and practices.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Partial class approach for ES5/ES6</title>
      <link>http://nicosommi.github.com/index.php/2015/08/10/partial-class-approach-for-es6/</link>
      <pubDate>Mon, 10 Aug 2015 02:50:50 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2015/08/10/partial-class-approach-for-es6/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/nicosommi/partialClass&#34; target=&#34;_blank&#34;&gt;Source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you create components that have some code quality control like code climate, bithound or something like that. There are plenty errors that you will found on your component, from code duplication to very specific details.&lt;/p&gt;

&lt;p&gt;One of those rules is the &lt;strong&gt;class complexity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So you have a giant class. You may &lt;strong&gt;need or want to split it up into different files&lt;/strong&gt;. Of course, you can do some hacks with the javascript language to get that done. Of course, you can take a different design solution and make smaller classes. Of course, you can do a lot of things, but what I&amp;#8217;m trying to show here is an approach to get &lt;strong&gt;something like the partial class declaration from OOP languages like C#&lt;/strong&gt;. Keeping files simple and small. You need to cover some features like private methods, public ones, properties, bind problems ( so you can use &amp;#8220;this&amp;#8221; on every method), etc. And at the same time you should produce self documented code.&lt;/p&gt;

&lt;p&gt;So I came up with a simple solution but that has some key points to unlock some features (private methods with symbols and using a standard function to attach to the class prototype). It is not something trivial actually but not so hard neither. It consist on some &lt;strong&gt;easy to follow steps&lt;/strong&gt; (on the example code, using the Babel plugin implementation for ES6 and ES5 compatibility):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of creating a file for your class, create a folder for it.&lt;/li&gt;
&lt;li&gt;Create an index.js inside of it that contains the actual class&lt;/li&gt;
&lt;li&gt;Create some file with the function/functions that you want to have in different files&lt;/li&gt;
&lt;li&gt;Chose one of the alternatives to assign the method to the main class on the index. For example Object.assign(MyClass.prototype, objNewMethods). This is maybe the best option since it bind the functions automatically. UPDATE: It seems like there is a caveat using Object.assign to copy methods&amp;#8230; I will work on it soon to check that it happens and then update the article/source code with a better solution.&lt;/li&gt;
&lt;li&gt;If you want to split up symbols (usually used for private methods) you need a separate file to instantiate them and use the same one among different files (for example to call a private method from another file).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#8217;s basically all! &lt;strong&gt;See&lt;/strong&gt; &lt;a href=&#34;http://github.com/nicosommi/partialClass&#34;&gt;this repo&lt;/a&gt; to take a look at a working source code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you have a class in several files, small and self documented files with functions with reduced complexity.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crear un componente javascript y open source de calidad en minutos</title>
      <link>http://nicosommi.github.com/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/</link>
      <pubDate>Fri, 17 Jul 2015 01:34:25 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2015/07/17/crear-un-componente-javascript-y-open-source-de-calidad-en-minutos/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://nicosommi.com/?p=403&#34;&gt;Read this article in english&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/generator-oss-component&#34;&gt;Ir al componente en npm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hace unos meses con el equipo en Free All Media empezamos a construir un proyecto javascript que rapidamente fue creciendo en lineas de codigo y en lo que en ese momento llamabamos componentes, pero que consistia en una coleccion de carpetas con archivos javascript en ellas. Teniamos la certidumbre al iniciar que &lt;strong&gt;ibamos a componentizar la aplicacion&lt;/strong&gt; en algun momento, &lt;strong&gt;pero todavia no sabiamos cuando&lt;/strong&gt; esto iba a ser apoyado por las prioridades del negocio.&lt;/p&gt;

&lt;p&gt;Luego de un tiempo, llego el momento de crear un nuevo set de servicios, que tenian componentes en comun con el set de servicios anterior. Entonces fue donde ocurrio el suceso: la &lt;strong&gt;necesidad de compartir componentes con al menos un proyecto&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En ese momento se nos presento un problema clasico ingenieril de eficacia y eficiencia. Teniamos alrededor de 15 componentes distintos, y sabiamos que el mejor camino para tomar era el de hacer un componente distinto en cada uno de ellos en lugar de acoplar sus responsabilidades y hacer componentes &amp;#8220;magicos&amp;#8221;. Siempre procuramos intentar ir por el mejor camino que podemos visualizar, entonces no dudamos en ir por alli. &lt;strong&gt;Pero el negocio no estaba tan contento de gastar tanto tiempo en crear 15 componentes&lt;/strong&gt; en lugar de 1 por una simple cuestion de orgullo profesional (con todas las garantias de calidad que un componente necesita para estar a la altura del resto de los componentes de la organizacion, que mas adelante detallo).&lt;/p&gt;

&lt;p&gt;Hablando en numeros, &lt;strong&gt;cada componente manualmente tardaria en inicializarse varias horas&lt;/strong&gt;, dependiendo la funcionalidad del mismo. Fue entonces que negociamos con el negocio y &lt;strong&gt;decidimos hacer un generador de componentes&lt;/strong&gt; en lugar de hacerlos individualmente, con el objetivo de optimizar por completo el tiempo de desarrollo de los patrones que se repetian.&lt;/p&gt;

&lt;p&gt;Este generador tiene la responsabilidad de inicializar un componente open source con una serie de caracteristicas deseables para los mismos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un &lt;strong&gt;readme acorde&lt;/strong&gt;, con las secciones y badges deseables&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test coverage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;integracion continua&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;calidad de codigo&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chequeo de dependencias&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tareas de compilado&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testeo de compatibilidad con browsers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;compatibilidad con &lt;strong&gt;standards ECMA 6 y 5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;archivos de linting&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;muchos mas caracteristicas por venir: comportamiento mas complejo, mas integraciones y mejores preguntas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por suerte este componente &lt;strong&gt;dio rapidamente el resultado esperado&lt;/strong&gt; y si bien esta en sus primeras versiones y con implementaciones muy particulares, nos es de muchisima utilidad, ya que &lt;strong&gt;en lugar de varias horas, ahora conseguimos un componente listo para utilizar y con un monton de caracteristicas de calidad listas en cuestion de minutos&lt;/strong&gt;. Sabemos que la funcionalidad debido a la infinidad de opciones muy probablemente ira incrementandose con el tiempo y haciendo de este componente algo todavia mas completo y detallado aun.&lt;/p&gt;

&lt;p&gt;Desde luego el componente para generar componentes open source de calidad es tambien un componente open source generado por si mismo (se creo primero el componente open source basico y una vez lograda una mediana calidad del mismo, se &amp;#8220;piso&amp;#8221; consigo mismo). De hecho, &lt;strong&gt;para conseguir una mayor eficiencia a lo largo del tiempo con los componentes que se generen con este generador, se sugiere no tocar a mano los artefactos generados por el mismo&lt;/strong&gt; (aunque hoy en dia es necesario para ciertas cosas en particular, en un futuro no deberia serlo).&lt;/p&gt;

&lt;p&gt;En definitiva creo que vale el aporte a la comunidad, y este post es una humilde sugerencia e invitacion para que lo adopten aquellos que quieran generar un componente con diversas caracteristicas adicionales tan solo contestando unas simples preguntas y sobre todo en unos pocos minutos.&lt;/p&gt;

&lt;p&gt;Como se utiliza?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lo mas recomendado es&lt;/strong&gt; &lt;a href=&#34;https://github.com/FreeAllMedia/generator-oss-component/&#34; target=&#34;_blank&#34;&gt;leer el README&lt;/a&gt; pero basicamente:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;creas tu repositorio en github&lt;/li&gt;
&lt;li&gt;lo linkeas en coveralls y en travis (basico para integracion continua y test coverage)&lt;/li&gt;
&lt;li&gt;si queres en las otras herramientas que se soportan en la aplicacion y que se deseen utilizar.&lt;/li&gt;
&lt;li&gt;(si no tenes yeoman instalado) npm install -g yo bower grunt-cli gulp&lt;/li&gt;
&lt;li&gt;&lt;em&gt;npm install -g generator-oss-component&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;inicialiar repo en github, ir a la carpeta y tipear: yo oss-component&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;contestar las preguntas usando las credenciales si son necesarias para las posibles integraciones&lt;/li&gt;
&lt;li&gt;comenza a codear&lt;/li&gt;
&lt;li&gt;despues, ejecuta travis setup npm asi tu componente se autopublica&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Si no la encontras estas invitado a contrubuir desde luego, abriendo issues o enviando pull requests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a javascript quality open source component in minutes</title>
      <link>http://nicosommi.github.com/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/</link>
      <pubDate>Fri, 17 Jul 2015 01:34:06 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2015/07/17/create-a-javascript-quality-open-source-component-in-minutes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://nicosommi.com/?p=395&#34;&gt;Leer este articulo en espaniol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/generator-oss-component&#34;&gt;Go to the component on npm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some months ago with the team from Free All Media we started to build a new javascript project, which &lt;strong&gt;rapidly began to grow in code lines and in what we called components&lt;/strong&gt;, but consisted only in a folder collection with javascript files on it. We knew at the very beginning that &lt;strong&gt;sooner or later creating component will be necesary, but we didn&amp;#8217;t knew yet when&lt;/strong&gt; the business would support it by increasing the priority.&lt;/p&gt;

&lt;p&gt;After some time, &lt;strong&gt;we had to create a new set of services, which shared some component functionality&lt;/strong&gt; with the previous one. &lt;strong&gt;Then it happened: the real need&lt;/strong&gt; of sharing components with at least one more project. At that moment we confront the classic engineering problem of being as efficient and efective as possible. We had around 15 different folders and we knew that the best path was to create one component for each functionality instead of trying to create one giant component to maybe save some time and costs (with repos, deployment tasks, etc, etc). We always try to go by the best path we see, so we had no doubts about sticking with the one component per functionality option. &lt;strong&gt;But the business wasn&amp;#8217;t very happy with spending money in creating so many components with all that creation overhead&lt;/strong&gt; and with all the extra costs, specially when we could just create one component and use that. Speaking of numbers, &lt;strong&gt;each component would take many hours&lt;/strong&gt; to get created and published correctly, maybe a little more or a little less depending upon the particular component needs. It was just then when we made some business with the business and we decided to &lt;strong&gt;create a component generator&lt;/strong&gt; with the target of optimizing the time and the related costs associated, specially on shared patterns.&lt;/p&gt;

&lt;p&gt;This generator has &lt;strong&gt;the responsibility of initialize a new open source component with a set of desirable features for them:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A good README&lt;/strong&gt; with &lt;strong&gt;badges&lt;/strong&gt; and common sections&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;LICENSE file&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test coverage support&lt;/strong&gt; (generation and report integration with travis and coveralls)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous integration&lt;/strong&gt; (with &lt;strong&gt;travis&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gulp tasks&lt;/strong&gt; for compile sources and testing them&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;browser compatibility tests&lt;/strong&gt; using karma and a optional sauce labs integration&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ES6 and ES5&lt;/strong&gt; compatibility using babel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;linting files&lt;/strong&gt; a eslint file and the required dependencies&lt;/li&gt;
&lt;li&gt;many more on the way: more integrations, more detailed questions and a smarter behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily us this component quickly &lt;strong&gt;give us the expected result&lt;/strong&gt; and, &lt;strong&gt;even knowing that this is a still very early version&lt;/strong&gt;, it&amp;#8217;s very useful and it has a great potential but &lt;strong&gt;it saves us hours of working already&lt;/strong&gt;. We know that there are lots of tools out there to integrate a generic open source component to, but &lt;strong&gt;we believe that given the fact that this is open source, the best way to reach that point is having the contribution of the open source community&lt;/strong&gt; like the normal process to cover such giant amount of options, if we everyone put&amp;#8217;s his own particular alternatives on it we will have lot&amp;#8217;s of options some day.&lt;/p&gt;

&lt;p&gt;Of course &lt;strong&gt;this open source component generator is an open source component by itself&lt;/strong&gt; (the first was the component, and once he got mature, he override himself, but just for stetics). In fact, in order to get better efficiency through time with the generated components, &lt;strong&gt;we strongly suggest to try to reduce to the minimum any modification to the auto generated artifacts&lt;/strong&gt; (currently some little manual changes are needed).&lt;/p&gt;

&lt;p&gt;In conclusion, I think it worth enough the contribution to the community and this post is just an &lt;strong&gt;invitation&lt;/strong&gt; to &lt;strong&gt;contribute&lt;/strong&gt; to our project if you want to or just &lt;strong&gt;use it&lt;/strong&gt; if you want to get a new component in just minutes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;How do you use it?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First highly recommended steps is to &lt;strong&gt;read the README, but basically&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;create the github repo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;link it with coveralls and travis (basic to get ci and test coverage)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;if you want to add another tool supported by the component and you want to use.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;(if you don&amp;#8217;t have yeoman) npm install -g yo bower grunt-cli gulp&lt;/li&gt;
&lt;li&gt;&lt;em&gt;npm install -g generator-oss-component&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;initialize the repo with github and go to that folder and type&lt;em&gt;: yo oss-component&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;answer the questions using the credentials if needed for the integrations to be done&lt;/li&gt;
&lt;li&gt;execute travis setup npm if you want to auto publish to npm your component&lt;/li&gt;
&lt;li&gt;start coding&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember if you do not find the application to integrate with we invite you to &lt;strong&gt;send us a pull request&lt;/strong&gt; by following the contribution guide on the README 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mmmmm…. mozilla…</title>
      <link>http://nicosommi.github.com/index.php/2014/06/21/mmmmm-mozilla/</link>
      <pubDate>Sat, 21 Jun 2014 19:12:03 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2014/06/21/mmmmm-mozilla/</guid>
      <description>&lt;p&gt;Estos dias estuve leyendo sobre el alejamiento de &lt;a href=&#34;http://es.wikipedia.org/wiki/Brendan_Eich&#34; title=&#34;Brendan Eich&#34;&gt;Brendan Eich&lt;/a&gt; de Mozilla (noticia difundida en varios lugares por ejemplo &lt;a href=&#34;http://www.latimes.com/business/hiltzik/la-fi-mh-gay-marriage-20140404-story.html&#34; title=&#34;aca&#34;&gt;aca&lt;/a&gt;). En principio muy sorpresivo debido a que si bien es totalmente reprobable lo que hizo (dono dinero a un movimiento que iba en contra del matrimonio gay), su alejamiento por el apalancamiento de ese simple hecho es algo quizas exagerado. Es verdad, al ser el CEO de una fundacion con tanta influencia es normal quizas que sea objeto de numerosas criticas, sin embargo en el dia a dia uno escucha decir barbaridades a miles y miles de personas en todos los ambitos y mucho peores que este hecho, y ademas como menciona &lt;a href=&#34;http://www.csmonitor.com/USA/2014/0405/Mozilla-s-Brendan-Eich-and-gay-marriage-Intolerance-over-tolerance-video&#34; title=&#34;aca&#34;&gt;aca&lt;/a&gt; es casi comico tal intolerancia siendo que hasta Obama se opuso a esta ley en su momento. Pero &lt;strong&gt;supongamos que no fue exagerado y que Mozilla como fundacion se puso intachable en sus valores&lt;/strong&gt; (Eich renuncio, entre muchas otras cosas que sucedieron, porque otros empleados de Mozilla se lo pidieron encarecidamente). OK. Perfecto.&lt;/p&gt;

&lt;p&gt;Ahora bien, luego de unos dias en los que de a poco me fui dando cuenta por interes personal de la gran influencia de Eich en Mozilla, me tope con un comentario de un usuario criticando a firefox por asociarse con Adobe para mostrar contenido protegido por DRM. El usuario comentaba con &lt;a href=&#34;https://fsf.org/news/fsf-condemns-partnership-between-mozilla-and-adobe-to-support-digital-restrictions-management&#34; title=&#34;este link&#34;&gt;este link&lt;/a&gt; en el que se anuncia que &lt;strong&gt;la Fundacion de Software Libre esta muy decepcionada porque Mozilla va en contra de los valores que la fundaron inicialmente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Tan facilmente no iba a cambiar de opinion con respecto a Mozilla sin antes chequear un poco. La palabra oficial de Mozilla se puede encontrar &lt;a href=&#34;https://blog.mozilla.org/blog/2014/05/14/drm-and-the-challenge-of-serving-users/&#34; title=&#34;aca&#34;&gt;aca&lt;/a&gt; y es muy logica ya que habla de la experiencia del usuario final, y la comparacion con otros browsers (???) y de que esto es opcional ya que uno puede usar firefox sin incluir DRM. Sin embargo, como siempre, la logica siempre puede respetarse incluso en absurdos, los fundamentos son muy importantes. En esta accion, &lt;strong&gt;Mozilla parece no ser tan intachable en sus valores&lt;/strong&gt;. Y trata de justificar la utilizacion de codigo cerrado con la utilizacion de un wrapper de codigo abierto (???).&lt;/p&gt;

&lt;p&gt;Luego decidi por supuesto leer la opinion de Eich y encontre &lt;a href=&#34;https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/&#34; title=&#34;esto&#34;&gt;esto&lt;/a&gt; que si bien es un poco viejo (de cuando Eich estaba en Mozilla), es muy util ya que muestra su oposicion a la implementacion de DRM y todo este tema y los diversos motivos. Entre otros motivos (&lt;strong&gt;como presiones de Hollywood, Google, Microsoft, etc&lt;/strong&gt;), estan por ejemplo &lt;a href=&#34;https://plus.google.com/app/basic/stream/z13qtnxhuojytbjbr04ci3cowrmtehsy324&#34; title=&#34;este&#34;&gt;este&lt;/a&gt; que nos habla que &lt;strong&gt;DRM, por cuestiones tecnicas, no sirve para proteger las copias de los videos sino que sirve para que los productores de contenido puedan apalancar sobre los fabricantes de dispositivos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esto me hizo sospechar de intereses economicos y encontre &lt;a href=&#34;http://www.redstate.com/2014/05/17/brendan-eich-removed-get-closed-source-drm-firefox/&#34; title=&#34;este&#34;&gt;este&lt;/a&gt; articulo que &lt;strong&gt;sugiere que la presion de Hollywood fue lo que realmente expulso a Eich de Mozilla&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Un sabor amargo me quedo despues de todo esto. Por el futuro de firefox, por la carta que traduje hace poco.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Esto no es un veredicto final, pero es verdad que la asociacion con Adobe para &amp;#8220;dar un beneficio al usuario&amp;#8221;, rompe los valores de la fundacion&amp;#8230; y es algo que no cierra, sobre todo porque el usuario siempre fue libre de usar chrome, ie, o instalar un plugin externo.&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;:/&lt;/p&gt;

&lt;p&gt;Por ahora seguire con Firefox porque sigue garantizando cierta privacidad&amp;#8230; pero en el futuro&amp;#8230; que navegador tenemos que usar? Depende ciertamente de lo que vaya sucediendo y de las decisiones estrategicas de la fundacion, pero &lt;strong&gt;esto ciertamente marca un precedente y Mozilla ahora no genera tanta confianza en su transparencia.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Asusta pero es exitante – Traducción al español de la carta de Mark Surman de Mozilla (Scary, but exciting)</title>
      <link>http://nicosommi.github.com/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/</link>
      <pubDate>Fri, 02 May 2014 01:56:10 +0000</pubDate>
      
      <guid>http://nicosommi.github.com/index.php/2014/05/02/asusta-pero-es-exitante-traduccion-al-espanol-de-la-carta-de-mark-surman-de-mozilla-scary-but-exciting/</guid>
      <description>&lt;p&gt;Hoy recibí un mail lindo y prometedor y quisiera que los que hablan sólo español puedan también leerlo.&lt;/p&gt;

&lt;p&gt;Es de Mark Surman de Mozilla. Y dice:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;Desde donde yo lo veo, el futuro luce exitante pero también asusta un poco.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Primero lo que asusta (Que puedo decir? Soy muy precavido y prefiero terminar bien):&lt;/p&gt;

&lt;p&gt;Ahora mismo internet preserva tu derecho a acceder a todo contenido legal y programas sin interferencia. Es lo mismo cual sea tu campo: mirar House of Cards, leer Wikipedia o construir un sitio web para tu nuevo negocio &amp;#8211; todo en el mismo término que todos los demás.&lt;/p&gt;

&lt;p&gt;Esto es lo que hace que la web sea lo que es hoy, un motor global de innovación y emprendedurismo. Probablemente escuchaste acerca de la &amp;#8220;neutralidad de la red&amp;#8221; (net neutrality). Estamos preocupados de que esto deje de ser así.&lt;/p&gt;

&lt;p&gt;Estoy preocupado acerca de esto en distintos niveles. El fin de la neutralidad de la red puede sentar un precedente para una internet crecientemente cerrada, controlada de manera centralizada y diseñada para servir a unos pocos en lugar de servir a muchos. Básicamente, todas esas cosas malas contra las que lucha Mozilla, siendo que fué creado para evitarlas. Desanima. Pero&amp;#8230;&lt;/p&gt;

&lt;p&gt;Lo exitante (Dije que íbamos a llegar acá):&lt;/p&gt;

&lt;p&gt;Las cosas no están tan quietas como parecen &amp;#8211; y la verdad es, el futuro está en nuestras manos. No en &amp;#8220;nuestras&amp;#8221; como refiriéndome a nosotros en el staff de Mozilla. Con nosotros me refiero a vos, a mí, tus amigos y mis amigos, y todos los usuarios de la web del pasado, presente y del futuro. Tenemos que ponernos de pie por una Internet abierta. Por una web que es construida para el bien de la humanidad. Por una internet que nos enlaza para estar más cerca entre nosotros, en lugar de que unos empujen a otros afuera.&lt;/p&gt;

&lt;p&gt;Y esta pelea empieza ahora mismo. En las próximas semanas y meses estamos lanzando una campaña de larga escala para atraer usuarios de todo el mudno para defender una web que sirve al bien público y no a unas pocas gigantes compañías. Para pelear y construir la web que queremos ver en el mundo. El primer paso es responder a una pregunta muy simple: Que tipo de web querés? Hacénoslo saber, y unite a los millones que están ayudando a formar el futuro del recurso público más grande del mundo.&lt;/p&gt;

&lt;p&gt;Y si después de decirnos tu pequeño vistazo de tus esperanzas para la web (y ver que es lo que otros en el mundo tienen para decir), tenemos algo para darle forma a esa realidad &amp;#8211; la nueva actualización del navegador Firefox. No voy a entrar en detalles de porqué es maravilloso (aunque desearía poder hacerlo), pero he aquí es un pequeño vistazo: es más seguro, es más rápido, es más personalizable y luce realmente bien. Para ponerlo sencillo, el nuevo Firefox fué hecho con la misión de ponerte a vos primero.&lt;/p&gt;

&lt;p&gt;Al final del día, la genial comunidad global Mozilla es la razón por la cual peleamos la pelea, resolvemos problemas difíciles y tomamos acciones importantes. Y mientras nuestra misión no cambie (y no lo hará), estamos haciendo paquetes más grandes y mejores para asegurarnos que nuestra comunidad es parte de nuestro crecimiento y parte de nuestro futuro. El nuevo Firefox es sólo el comienzo.&lt;/p&gt;

&lt;p&gt;Sigue conectado.&lt;/p&gt;

&lt;p&gt;Mark&amp;#8221;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://webwewant.mozilla.org/es/?utm_source=newsletter&amp;amp;utm_medium=newsletter&amp;amp;utm_content=foundationemail&amp;amp;utm_campaign=glow2014&#34;&gt;Para más información sobre Firefox click aquí.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Texto Original&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;From where I&amp;#8217;m sitting, the future looks exciting, but also a bit scary.&lt;/p&gt;

&lt;p&gt;First, the scary (What can I say? I&amp;#8217;m a worrier, and I&amp;#8217;d rather end on the high note.):&lt;/p&gt;

&lt;p&gt;Right now the internet preserves your right to access all lawful content and software without interference. It is an equal playing field: you can watch House of Cards, read Wikipedia or build a website for your new business — all on the same terms as everybody else.&lt;/p&gt;

&lt;p&gt;This is what has made the web what it is today, a global engine for innovation and entrepreneurship. You&amp;#8217;ve probably heard about it as &amp;#8220;net neutrality.&amp;#8221; We&amp;#8217;re worried it&amp;#8217;s about to go away.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m worried about this on a number of levels. The end of net neutrality could set a precedent for an internet that is increasingly closed, centrally controlled and designed to serve the few instead of the many. Basically, all of the bad things Mozilla was built to fight. It&amp;#8217;s discouraging. But&amp;#8230;&lt;/p&gt;

&lt;p&gt;The exciting (I told you we&amp;#8217;d get there):&lt;/p&gt;

&lt;p&gt;Things are not quite as bleak as they seem — and the truth is, the future is up to us. Not &amp;#8220;us&amp;#8221; as in Mozilla staff. &amp;#8220;Us&amp;#8221; as in you, and me, and your friends and my friends, and all web users past, present and future. We have to stand up for the open internet. For a web that is built for the good of humanity. For a web that ties us closer together, rather than one that pushes us further apart.&lt;/p&gt;

&lt;p&gt;And that fight starts right now. In the next few weeks and months we are launching a large-scale campaign to engage users worldwide to defend a web that serves the public good, not a few giant companies. To fight for and build the kind of web we want to see in the world. The first step is to answer one simple question:&lt;/p&gt;

&lt;p&gt;What kind of web do you want? Let us know, and then join the millions who are helping shape the future of the world&amp;#8217;s largest public resource.&lt;/p&gt;

&lt;p&gt;And after you&amp;#8217;ve given us a little insight into your hopes for the web (and seen what others around the world have to say), we&amp;#8217;ve got something to help shape that reality — the newest update to the Firefox browser. I won&amp;#8217;t go into all the details as to why it&amp;#8217;s awesome (though I wish I could), but here&amp;#8217;s the upshot: it&amp;#8217;s more secure, it&amp;#8217;s faster, it&amp;#8217;s more customizable and it&amp;#8217;s also really good-looking. Simply put, the new Firefox was made with a mission to put you first.&lt;/p&gt;

&lt;p&gt;At the end of that day, Mozilla&amp;#8217;s amazing global community is the reason we fight the fight, solve difficult problems and take important actions. And while our mission has not (and will not) change, we&amp;#8217;re making bigger and better plans to make sure our community is part of our growth, and part of our future. The new Firefox is just the beginning.&lt;/p&gt;

&lt;p&gt;Stay tuned,&lt;/p&gt;

&lt;p&gt;Mark&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cualquier sugerencia sobre la traducción nicosommi@gmail.com&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>