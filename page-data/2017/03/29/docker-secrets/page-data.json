{"componentChunkName":"component---src-templates-slide-tsx","path":"/2017/03/29/docker-secrets","webpackCompilationHash":"88062f546259d5d495e1","result":{"data":{"markdownRemark":{"internal":{"content":"\n<!-- class: middle -->\n<!-- layout: true -->\n\n---\n\n<img src=\"/images/assets/2017-03-25-13-39-09.png\" width=\"400px\"></img>\n\n# Docker secrets\n\n## Por nicosommi\n\n---\n\nname: agenda\n\n## Agenda\n\n1. Agenda e introducción\n2. Como surgen?\n3. ¿Qué son los secrets?\n4. ¿Para que sirven?\n5. Anotaciones de seguridad\n6. Detalles de utilización\n7. Preparando nuestras imágenes\n8. Creando un secreto sencillo\n9. Utilizando secrets con YML's de docker compose\n10. Usando https con secrets\n11. Resumen de comandos\n12. Q & A\n13. Fin\n\n---\n\n## ¿Como surgen?\n\nPorque la comunidad toma decisiones heterogeneas y peligrosas:\n\n- Usar variables de entorno (12 factor app)\n- Variables de entorno en build\n- Manual build (commit)\n- Custom hacks (curl a webserver)\n  ... Se necesitan do's and don'ts\n\n???\n\n- accesibles por cualquier proceso, guardada en capas intermedias, compartidas para otros contenedores linkeados\n- hasta se decidio no encriptarlas solo para que la gente no las use para secretos\n\n---\n\n## ¿Qué son los secrets?\n\nPara docker es un BLOB de datos manejado de manera centralizada.\n\n- Compartido para los servicios del swarm que lo necesitan, solo mientras estos ejecutan\n- Solo para swarm... por ahora\n- Hasta 500KB (no TAN large)\n- Por ahora solo para runtime\n  <center>\n    <img src=\"/images/assets/2017-03-22-21-47-13.png\" width=\"800px\"></img>\n  </center>\n\n???\nBinary Large OBjects\nSecure Sockets Layer (ahora Transport Layer Security)\nSwarmKit es una libreria que se encarga del node management\nHay un issue en curso para build time secrets\n\n---\n\n## ¿Para que sirven?\n\n- Para guardar certificados SSL, SSH Keys, Username y Passwords, nombres de bases de datos... y cualquier dato sensible que debe estar en runtime, pero no en la imagen ni en el control de versiones\n- Funciona como capa de abstraccion entre las credenciales y los contenedores\n\n???\n\n- En los distintos ambientes puedo tener credenciales con el mismo nombre pero distinto contenido y entonces el contenedor es exactamente igual mas alla de que los secrets cambien de contenido\n\n---\n\n## Anotaciones de seguridad\n\n- Viajan a los managers del swarm por TLS\n- Se almacenan en el Raft log, con todo lo que ello nos garantiza (que está encriptado y es replicado a través de los managers, garantizando la misma HA que el resto de la informacion del swarm)\n- Cuando se detiene un container, se hace unmount y se flushea la memoria\n- Si se pierde conexión con el swarm, se tiene acceso al secret, pero no puede recibir ninguna instrucción hasta que se vuelva a conectar al swarm  \n  http://thesecretlivesofdata.com/raft/\n\n???\n\n- Esta encriptado desde la 1.13\n- El rotado de secrets es basicamente actualizar el servicio con el secret viejo y el nuevo, proceder a cambiarlo en el servicio, luego borrarlo del servicio y finalmente borrarlo del swarm\n- El \"Raft log\" se refiere al consensus algorithm que utiliza swarmkit _entre managers_ para coordinar nodos y no depender de un solo punto de falla para tomar decisiones. Raft fue diseñado para ser simple de entender y que más sistemas utilizen un buen algoritmo de consenso para ser más tolerantes a fallas. Consiste en un simple sistema de eleccion de lider y de propagacion de estado. Define followers, candidatos y líderes.\n- Cuando no hay lideres, se inician las rondas de timeout random para que un nodo se vuelva candidato, vote por si mismo y reciba votos de los otros nodos. Las rondas terminan cuando un líder es elegido. Después hay un heartbeat timeout y cuando se pierde el lider se hace la re eleccion.\n  http://thesecretlivesofdata.com/raft/\n  Tienen un log y una maquina de estados.\n  Si una parte del cluster se cae, el que tiene mayoria igual puede impactar, los que no tienen mayoria dejan pendiente, y cuando reciben el mensaje de quien tenia mayoria, hacen rollback y acceden al cambio del lider que tiene mayoria, también relegando su liderazgo.\n\n---\n\n## Detalles de utilización\n\n- Se montan en /run/secrets/name\n- Solo tiene acceso si es un manager o si tiene permisos específicos\n- Se pueden ver, listar los secrets, pero no se puede borrar uno que está siendo utilizado, para ello se debe rotar el secret\n- Se recomienda poner en el nombre una fecha o numero de version, para hacer más sencillo el control\n\n???\n\n- --secret source=mysql_password,target=wp_db_password,mode=0400\n\n---\n\n## Preparando nuestras imágenes\n\n- Para hacer nuestras imagenes secrets-friendly debemos brindar, tal como lo hizo wordpress, una alternativa de archivos a la environment variable que clasicamente se utiliza (MYSQL_PASSWORD_FILE además de MYSQL_PASSWORD)\n\n---\n\n## Creando un secreto sencillo\n\n```shell\n$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ openssl rand -base64 20 | docker secret create mi_secreto -\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker exec $(docker ps --filter name=mi_servicio -q) ls /run/secrets\n$ docker exec $(docker ps --filter name=mi_servicio -q) cat /run/secrets/mi_secreto\n```\n\n???\nSi commiteamos el container a una imagen, el secreto es desmontado\nSi tengo mas replicas el comando debe ser adaptado porque hay mas de un hash, tengo que hacerlo mas a mano\n\n---\n\n## Utilizando secrets con YML's de docker compose\n\n```yaml\nversion: \"3.1\"\nservices:\n  test:\n    image: \"alpine\"\n    command: \"cat /run/secrets/my_secret\"\n    secrets:\n      - my_secret\nsecrets:\n  my_secret:\n    file: ./mysecret.txt\n    # o external: true para tomarlo del swarm\n```\n\n???\nGracias al stack del compose\ndocker stack deploy -c file.yml name\n\n---\n\n## Usando https con secrets\n\n1. Generar certificado con let's encrypt, self-signed u otra CA\n2. Preparar nginx config\n3. Preparar secrets en el swarm\n\n```shell\n$ docker secret create site.key site.key\n$ docker secret create site.crt site.crt\n$ docker secret create site.conf site.conf\n```\n\n4. Crear el servicio\n\n```shell\n$ docker service create --name nginx --secret site.key \\\n     --secret site.crt --secret site.conf --publish 3000:443 nginx:latest \\\n     sh -c \"ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf && exec nginx -g 'daemon off;'\"\n```\n\n???\nDaemon off es un flag de nginx para docker o debug que lo mantiene en foreground y que es amigo de tener un proceso por container\n\n---\n\n## Resumen de comandos\n\n```shell\n$ docker swarm init --advertise-addr eth0 # solo para probar local\n$ echo \"a\" | docker secret create mi_secreto -\n$ docker secret inspect mi_secreto\n$ docker secret ls\n$ docker service create --name mi_servicio --secret mi_secreto nginx\n$ docker service update mi_servicio --secret-rm mi_secreto\n$ docker service update mi_servicio --secret-add mi_nuevo_secreto\n$ docker secret rm mi_secreto\n```\n\n???\nAca se pueden ver todos los comandos necesarios para por ejemplo hacer una rotacion de logs\n\n---\n\n# Q & A\n\n---\n\n# Gracias!\n"},"frontmatter":{"date":"March 29, 2017","url":"/2017/03/29/docker-secrets","title":"docker secrets","author":"nico","categories":null,"tags":null,"type":"remark-slide"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}