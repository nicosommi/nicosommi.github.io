{"componentChunkName":"component---src-templates-post-tsx","path":"/2014/04/20/debugging-node-seriously/","webpackCompilationHash":"88062f546259d5d495e1","result":{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"/?p=284","title":"Debugging node"},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"To see this article in english click here."}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Cuando programamos en Node.js siempre hay cositas que vuelan por la cabeza. Hay muchas cosas en las que pensar. Muchas cosas que tener en cuenta. Es simple, pero hay que saber lo que se está haciendo al altísimo precio de llegar a un lío muy importante. Javascript. Npm. Lo bueno, lo malo y lo feo."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Una de las cosas que más me asustaban en este node-hell es poder depurar nuestro script. Muchos solemos usar muy frecuentemente logging de distintos tipos, desde el simple console.log hasta paquetes más copados como debug, ain2, winston o algo así. Pero muchos evaden el viejo y conocido debug, que nos permite agregar watch expressions, evaluar ejecuciones en el contexto actual, observar el backtrace, y otras cositas mas."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"En mi experiencia había debuggeado previamente node en mis comienzos, pero de una forma muy distinta. Usando eclipse. Vengo de Java así que me resultaba familiar, y el debugger V8 se conecta sin problemas a un proceso node ejecutando en modo debug (con –debug). Sin lugar a dudas es una muy buena alternativa. Sin embargo hoy tengo un entorno de desarrollo mucho más dinámico y liviano en memoria. También puedo abrir el chrome y hacer lo mismo que del eclipse pero desde ahí. Pero hay dos motivos en contra de eso: los que no usamos Chrome (yo uso Firefox por ahora) y los que encima no desarrollamos necesariamente algo web con node.js y no necesitamos abrir el browser. Gedit y Sublime son los editores que uso frecuentemente. Perder el miedo a la consola es algo que aprendemos todos los que somos habitué de ubuntu, git, y esas cosas. Perder el miedo a la consola es también clave para no complicarse la vida con la depuración en node.js."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Es tan sencillo como lo siguiente: es un debugger como los que conocemos de toda la vida pero comandado por consola. Desde algunos lenguajes ya vienen acostumbrados a esto, sin embargo yo que vengo de Java, y anteriormente C# y TIBCO, estoy acostumbrado a debuggers de todo tipo pero es la primera vez que experimento con la consola."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Primero que nada repasemos la necesidad. Esto surge de la experiencia en ambientes reales en donde solucionar un problema complejo en ambientes productivos es algo habitual. Los logging de consola algunas veces son precarios en algunos aspectos y nos limitan a la hora de solucionar un problema rápidamente. Muchos podrán discutir sobre este tema apoyados en su rapidez y lucidez mental constante. Yo prefiero saber que no dependo de eso. Prefiero no sentir esa presión. Prefiero saber como debuggear y detectar el problema mirando mejor el contexto. Demás está decir que algunas veces los errores son tan complicados que la reproducción del mismo nos lleva mucho tiempo y sincronización, y por ende estaría buenísimo si descubrimos el error en la menor cantidad de intentos posibles."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mencionados ya los beneficios de usar un debugger, vayamos al acto. El uso trivial es sencillo: ponemos un debugger; en donde nos plazca y luego ejecutamos la aplicación con el argumento debug."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node debug script.js"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Algo tan simple como eso ya nos deja en la consola de debug. Ahora es sencillo, para lo que antes haciamos en entornos gráficos ahora tenemos un string que dispara el comando. Por ejemplo poniendo ‘cont’ o ‘c’ el debugger avanzará hasta el próximo debugger;"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hay una lista completa de comandos en la sección Commands reference en el siguiente link "},{"type":"element","tagName":"a","properties":{"href":"http://nodejs.org/api/debugger.html","title":"http://nodejs.org/api/debugger.html"},"children":[{"type":"text","value":"http://nodejs.org/api/debugger.html"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Los más destacados son"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"step in: se hace escribiendo s"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"step out: escribiendo o"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"next step: n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"pause"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"watch(‘variableName’) : imprimira el valor en cada paso"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"unwatch(‘variableName’) : dejara de monitorear el valor"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"list(4) : imprime el contexto en un radio de 4 lineas"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"repl : importantísimo, nos permite evaluar algo en el contexto actual como el console del browser (tenemos todo lo del contexto pero no podemos modificarlo). Salimos con ctrl+c"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hay “complicaciones” extra para quienes utilizan gulp/grunt (casi todos) ejecutando algunas tareas previas a iniciar la aplicación… pero buenas noticias, se puede utilizar algo como por ejemplo nodemon en esos casos, con la opción nodeArgs."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Por ejemplo:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nodemon({script: './app.js', nodeArgs: ['debug']})"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Otro caso común. Test unit. Con debug? Sí. Por ejemplo si ejecutamos"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mocha debug test/ejemplo.js"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"entonces nos llevará a la consola de debug."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Combinando mocha y grunt/gulp se puede hacer esto (también con nodemon):"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nodemon({script: './node_modules/mocha/bin/_mocha', nodeArgs: ['debug']});"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"donde ponés la ruta a tu instalación global del ejecutable _mocha (con guión bajo) y listo, con eso tenés tus test con el debugger built in y tus tareas previas ejecutadas."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Obteniendo un error ENOSPC?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Eso es porque hay muchos archivos abiertos (o tenés un editor que suele abrir muchos archivos como Sublime o nodemon está incluyendo muchos archivos)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lo podés solucionar incrementando el valor de max"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"user"}]},{"type":"text","value":"watches con este comando"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sudo sysctl fs.inotify.max_user_watches=20000"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"El número correcto depende de tus necesidades. Podés ver que tenés actualmente ejecutando esto"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"more /proc/sys/fs/inotify/max_user_watches"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"También recordá executar nodemon con el argumento -i nodemodules"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"En definitiva. Si todavía no lo hiciste animate que es sencillo. Hace un script sencillo que cuente hasta 100 en un for y probalo vos mismo."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tenés una idea para mejorar este artículo? Mandámela a nicosommi@gmail.com"}]}],"data":{"quirksMode":false}},"timeToRead":4,"frontmatter":{"date":"April 20, 2014","url":"/2014/04/20/debugging-node-seriously/","title":"Debugueando node","author":"nico","categories":["Español","Experiencias","Tecnicos"],"tags":["debug","javascript","js","node.js"],"type":null,"version":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}